// NOTE This file is auto-generated by Contentlayer

import type { Markdown, MDX, ImageFieldData, IsoDateTimeString } from 'contentlayer/core'
import * as Local from 'contentlayer/source-files'

export { isType } from 'contentlayer/client'

export type { Markdown, MDX, ImageFieldData, IsoDateTimeString }

/** Document types */
export type Page = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Page'
  /** Page title */
  title: string
  /** Page description */
  description?: string | undefined
  /** MDX file body */
  body: MDX
  slug: string
  slugAsParams: string
}

export type Post = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Post'
  /** The title of the post */
  title: string
  /** An excerpt of the post */
  excerpt: string
  /** path to post cover image */
  coverImage: string
  /** The date of the post */
  date: IsoDateTimeString
  /** Published indicator */
  published: boolean
  author: Author
  ogImage: OGImage
  /** SEO slug */
  seoURL?: string | undefined
  /** MDX file body */
  body: MDX
  slug: string
  slugAsParams: string
  stats: nested
}

export type Snippet = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Snippet'
  /** The title of the post */
  title: string
  /** A summary of the snippet */
  summary: string
  /** name of the icon to use */
  icon: string
  /** The date of the post */
  date: IsoDateTimeString
  /** Published indicator */
  published: boolean
  /** List of tags to describe the snippet */
  tags?: string[] | undefined
  /** MDX file body */
  body: MDX
  slug: string
  slugAsParams: string
  stats: nested
}  

/** Nested types */
export type Author = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Author'
  name: string
  picture: string

}

export type OGImage = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'OGImage'
  url?: string | undefined

}  

/** Helper types */

export type AllTypes = DocumentTypes | NestedTypes
export type AllTypeNames = DocumentTypeNames | NestedTypeNames

export type DocumentTypes = Page | Post | Snippet
export type DocumentTypeNames = 'Page' | 'Post' | 'Snippet'

export type NestedTypes = Author | OGImage
export type NestedTypeNames = 'Author' | 'OGImage'

export type DataExports = {
  allDocuments: DocumentTypes[]
  allPosts: Post[]
  allSnippets: Snippet[]
  allPages: Page[]
}


export interface ContentlayerGenTypes {
  documentTypes: DocumentTypes
  documentTypeMap: DocumentTypeMap
  documentTypeNames: DocumentTypeNames
  nestedTypes: NestedTypes
  nestedTypeMap: NestedTypeMap
  nestedTypeNames: NestedTypeNames
  allTypeNames: AllTypeNames
  dataExports: DataExports
}

declare global {
  interface ContentlayerGen extends ContentlayerGenTypes {}
}

export type DocumentTypeMap = {
  Page: Page
  Post: Post
  Snippet: Snippet
}

export type NestedTypeMap = {
  Author: Author
  OGImage: OGImage
}

 