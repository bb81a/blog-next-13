{
  "title": "Setup a CoreOS Playground",
  "excerpt": "Do you want your own CoreOS fleet?",
  "coverImage": "/assets/blog/img/coreos_2.png",
  "date": "2014-06-29T00:00:00.000Z",
  "published": false,
  "author": {
    "name": "Dan Stroot",
    "picture": "/assets/blog/authors/dan.jpeg",
    "type": "Author",
    "_raw": {}
  },
  "ogImage": {
    "url": "/assets/blog/img/coreos_2.png",
    "type": "OGImage",
    "_raw": {}
  },
  "seoURL": "https://danstroot.com/2014/06/28/setup-a-coreos-playground/",
  "body": {
    "raw": "\n### If you want to test your very own CoreOS \"fleet\"\n\nI recommend using Vagrant and VirtualBox. If you have them installed fire up a terminal and go to where you keep your Vagrant files and:\n\n```shell\n$ git clone https://github.com/coreos/coreos-vagrant.git\n$ cd coreos-vagrant\n```\n\nNow you have to edit two files before starting your cluster: `user.data` and `config.rb`.\n\nIn order to initialize a cluster (or fleet, or hive, or whatever you want to call your group of CoreOS machines) you will need an etcd discovery URL to bootstrap the cluster and elect an initial etcd leader. To do this you will need to replace \\<token\\> with your own URL from `https://discovery.etcd.io/new` before you `vagrant up`. If you ever destroy your cluster with `vagrant destroy` you will _need to get a new token and update this file again_ before you `vagrant up`.\n\n#### Start Machines Using Vagrant's default VirtualBox Provider\n\nStart the machine(s):\n\n```shell\n$ vagrant up\n```\n\nList the status of the running machines:\n\n```shell\n$ vagrant status\nCurrent machine states:\n\ncore-01                   running (virtualbox)\ncore-02                   running (virtualbox)\ncore-03                   running (virtualbox)\n\nThis environment represents multiple VMs. The VMs are all listed\nabove with their current state. For more information about a specific\nVM, run `vagrant status NAME`.\n```\n\nConnect to one of the machines:\n\n```shell\n$ vagrant ssh core-01 -- -A\n```\n\n- Each unit of computing is described by a unit file (files because neckbeards know to keep things simple). Here's what it looks like - this example is just running a dockerfile to run busybox and then a bash command to echo \"Hello World\" repeatedly.\n\n```shell\n[Unit]\nDescription=My Service\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nExecStart=/usr/bin/docker run busybox /bin/sh -c \"while true; do echo Hello World; sleep 1; done\"\n\n[Install]\nWantedBy=multi-user.target\n```\n\nSources:\n\n- [KVM and Docker LXC Benchmarking with OpenStack](http://bodenr.blogspot.com/2014/05/kvm-and-docker-lxc-benchmarking-with.html)\n",
    "code": "var Component=(()=>{var d=Object.create;var s=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(r,e)=>()=>(e||r((e={exports:{}}).exports,e),e.exports),f=(r,e)=>{for(var a in e)s(r,a,{get:e[a],enumerable:!0})},l=(r,e,a,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of p(e))!g.call(r,t)&&t!==a&&s(r,t,{get:()=>e[t],enumerable:!(o=u(e,t))||o.enumerable});return r};var y=(r,e,a)=>(a=r!=null?d(m(r)):{},l(e||!r||!r.__esModule?s(a,\"default\",{value:r,enumerable:!0}):a,r)),v=r=>l(s({},\"__esModule\",{value:!0}),r);var c=b((_,i)=>{i.exports=_jsx_runtime});var N={};f(N,{default:()=>x,frontmatter:()=>w});var n=y(c()),w={title:\"Setup a CoreOS Playground\",excerpt:\"Do you want your own CoreOS fleet?\",coverImage:\"/assets/blog/img/coreos_2.png\",date:\"2014-06-29\",published:!1,author:{name:\"Dan Stroot\",picture:\"/assets/blog/authors/dan.jpeg\"},ogImage:{url:\"/assets/blog/img/coreos_2.png\"},seoURL:\"https://danstroot.com/2014/06/28/setup-a-coreos-playground/\"};function h(r){let e=Object.assign({h3:\"h3\",p:\"p\",pre:\"pre\",code:\"code\",span:\"span\",em:\"em\",h4:\"h4\",ul:\"ul\",li:\"li\",a:\"a\"},r.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h3,{id:\"if-you-want-to-test-your-very-own-coreos-fleet\",children:'If you want to test your very own CoreOS \"fleet\"'}),`\n`,(0,n.jsx)(e.p,{children:\"I recommend using Vagrant and VirtualBox. If you have them installed fire up a terminal and go to where you keep your Vagrant files and:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-shell\",children:[(0,n.jsx)(e.span,{className:\"hljs-meta prompt_\",children:\"$ \"}),(0,n.jsxs)(e.span,{className:\"bash\",children:[\"git \",(0,n.jsx)(e.span,{className:\"hljs-built_in\",children:\"clone\"}),\" https://github.com/coreos/coreos-vagrant.git\"]}),`\n`,(0,n.jsx)(e.span,{className:\"hljs-meta prompt_\",children:\"$ \"}),(0,n.jsxs)(e.span,{className:\"bash\",children:[(0,n.jsx)(e.span,{className:\"hljs-built_in\",children:\"cd\"}),\" coreos-vagrant\"]}),`\n`]})}),`\n`,(0,n.jsxs)(e.p,{children:[\"Now you have to edit two files before starting your cluster: \",(0,n.jsx)(e.code,{children:\"user.data\"}),\" and \",(0,n.jsx)(e.code,{children:\"config.rb\"}),\".\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"In order to initialize a cluster (or fleet, or hive, or whatever you want to call your group of CoreOS machines) you will need an etcd discovery URL to bootstrap the cluster and elect an initial etcd leader. To do this you will need to replace <token> with your own URL from \",(0,n.jsx)(e.code,{children:\"https://discovery.etcd.io/new\"}),\" before you \",(0,n.jsx)(e.code,{children:\"vagrant up\"}),\". If you ever destroy your cluster with \",(0,n.jsx)(e.code,{children:\"vagrant destroy\"}),\" you will \",(0,n.jsx)(e.em,{children:\"need to get a new token and update this file again\"}),\" before you \",(0,n.jsx)(e.code,{children:\"vagrant up\"}),\".\"]}),`\n`,(0,n.jsx)(e.h4,{id:\"start-machines-using-vagrants-default-virtualbox-provider\",children:\"Start Machines Using Vagrant's default VirtualBox Provider\"}),`\n`,(0,n.jsx)(e.p,{children:\"Start the machine(s):\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-shell\",children:[(0,n.jsx)(e.span,{className:\"hljs-meta prompt_\",children:\"$ \"}),(0,n.jsx)(e.span,{className:\"bash\",children:\"vagrant up\"}),`\n`]})}),`\n`,(0,n.jsx)(e.p,{children:\"List the status of the running machines:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-shell\",children:[(0,n.jsx)(e.span,{className:\"hljs-meta prompt_\",children:\"$ \"}),(0,n.jsx)(e.span,{className:\"bash\",children:\"vagrant status\"}),`\nCurrent machine states:\n\ncore-01                   running (virtualbox)\ncore-02                   running (virtualbox)\ncore-03                   running (virtualbox)\n\nThis environment represents multiple VMs. The VMs are all listed\nabove with their current state. For more information about a specific\nVM, run \\`vagrant status NAME\\`.\n`]})}),`\n`,(0,n.jsx)(e.p,{children:\"Connect to one of the machines:\"}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-shell\",children:[(0,n.jsx)(e.span,{className:\"hljs-meta prompt_\",children:\"$ \"}),(0,n.jsx)(e.span,{className:\"bash\",children:\"vagrant ssh core-01 -- -A\"}),`\n`]})}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:`Each unit of computing is described by a unit file (files because neckbeards know to keep things simple). Here's what it looks like - this example is just running a dockerfile to run busybox and then a bash command to echo \"Hello World\" repeatedly.`}),`\n`]}),`\n`,(0,n.jsx)(e.pre,{children:(0,n.jsx)(e.code,{className:\"hljs language-shell\",children:`[Unit]\nDescription=My Service\nAfter=docker.service\nRequires=docker.service\n\n[Service]\nExecStart=/usr/bin/docker run busybox /bin/sh -c \"while true; do echo Hello World; sleep 1; done\"\n\n[Install]\nWantedBy=multi-user.target\n`})}),`\n`,(0,n.jsx)(e.p,{children:\"Sources:\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"http://bodenr.blogspot.com/2014/05/kvm-and-docker-lxc-benchmarking-with.html\",children:\"KVM and Docker LXC Benchmarking with OpenStack\"})}),`\n`]})]})}function j(r={}){let{wrapper:e}=r.components||{};return e?(0,n.jsx)(e,Object.assign({},r,{children:(0,n.jsx)(h,r)})):h(r)}var x=j;return v(N);})();\n;return Component;"
  },
  "_id": "posts/2014-06-29-setup-a-coreos-playground.mdx",
  "_raw": {
    "sourceFilePath": "posts/2014-06-29-setup-a-coreos-playground.mdx",
    "sourceFileName": "2014-06-29-setup-a-coreos-playground.mdx",
    "sourceFileDir": "posts",
    "contentType": "mdx",
    "flattenedPath": "posts/2014-06-29-setup-a-coreos-playground"
  },
  "type": "Post",
  "slug": "/posts/2014-06-29-setup-a-coreos-playground",
  "slugAsParams": "2014-06-29-setup-a-coreos-playground",
  "stats": {
    "text": "2 min read",
    "minutes": 1.5,
    "time": 90000,
    "words": 300
  }
}