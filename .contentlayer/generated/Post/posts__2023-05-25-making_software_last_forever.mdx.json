{
  "title": "Making Software Last Forever",
  "excerpt": "Joel Spolsky (of Fog Creek Software and Stack Overflow) describes system re-writes as “the single worst strategic mistake that any software company can make”. However, engineering teams love full rewrites because they incorrectly think of old systems as specs. They assume that since the old system works, all functional aspects have been settled. Design risks have been eliminated! They can focus on making changes to the underlying architecture without worry. This is a deeply flawed assumption.",
  "coverImage": "/assets/blog/img/billg.jpeg",
  "date": "2023-05-25T00:00:00.000Z",
  "published": true,
  "author": {
    "name": "Dan Stroot",
    "picture": "/assets/blog/authors/dan.jpeg",
    "type": "Author",
    "_raw": {}
  },
  "ogImage": {
    "url": "/assets/blog/img/billg.jpeg",
    "type": "OGImage",
    "_raw": {}
  },
  "seoURL": null,
  "body": {
    "raw": "\nHow many of us have bought a new home because our prior home was not quite meeting our needs? Maybe we needed an extra bedroom, or wanted a bigger backyard? Now, as a thought experiment, assume you _couldn't sell your existing home_. If you bought a new home, you'd have to \"retire\" or \"decommission\" your prior home (and your investment in it). Does that change your thinking?\n\nFurther, imagine you had a team of five people maintaining your prior home, improving it, and keeping it updated, for the last ten years. You'd have a cumulative investment of 50 person/years in your existing home (5 people x 10 years) just in maintenance, on top of the initial investment. If each person was paid the equivalent of a software developer (we'll use $200k to include benefits, office space, leadership, etc.) you'd have an investment just in labor of **$10 million dollars** (50 person/years x $200,000). Would you walk away from that investment?\n\nWhen companies decide to re-write or replace an existing software application, they are making a similar decision. Existing software is \"retired\" or \"decommissioned\" (along with its cumulative investment). Yet the belief that new code is always better than old is patently absurd. Old code has weathered and withstood the test of time. It has been battle-tested. You know it's failure modes. Bugs have been found, and more importantly, fixed.\n\nJoel Spolsky (of Fog Creek Software and Stack Overflow) describes system re-writes in \"[Things You Should Never Do, Part I](https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/)\" as “the single worst strategic mistake that any software company can make.”\n\nContinuing our home analogy, recent price increases for construction materials like lumber, drywall, and wiring (and frankly everything else) should, according to Economics 101, cause us to treat our current homes more dearly. Similarly, price increases for quality software engineers should force companies to treat existing software more dearly.\n\nLots of current software started out as C software from the 1980s. Engineers don't often write software with portability as a goal at the beginning, but once something is relatively portable, it tends to stay that way. Code that was well designed and written often migrated from mini-computers to i386, from i386 to amd64, and now ARM and arch64, with a minimum of redesign or effort. You can take large, complicated programs from the 1980s written in C, and compile/run them on a modern Linux computer - even when the modern computer is running architectures which _hadn't even been dreamt of when the software was originally written_.\n\nWhy can't software last forever? It's not made of wood, concrete, or steel. It doesn't \"wear out\", rot, weather, or rust. A working algorithm is a working algorithm. Technology doesn’t need to be beautiful, or impress other people, to be effective. Aren't technologists ultimately in the business of producing cost effective technology?\n\nI am going to attempt to convince you that _maintaining_ your existing systems is one the most cost-effective technology investments you can make. \n\n## The World's Oldest Software Systems\n\nIn 1958, the United States Department of Defense launched a new computer-based contract management system called \"Mechanization of Contract Administration Services\", or MOCAS (pronounced “MOH-cass”). In 2015, [MIT Technology Review](https://www.technologyreview.com/2015/08/06/166822/what-is-the-oldest-computer-program-still-in-use/) stated that MOCAS was the oldest computer program in continuous use they could verify. At that time MOCAS managed about $1.3 trillion in government obligations and 340,000 contracts.\n\nAccording to the [Guinness Book of World Records](https://www.guinnessworldrecords.com/world-records/636196-oldest-software-system-in-continuous-use), the oldest software system in use today is either the [SABRE](<https://en.wikipedia.org/wiki/Sabre_(travel_reservation_system)>) Airline Reservation System (introduced in 1960), or the IRS Individual Master File (IMF) and Business Master File (BMF) systems introduced in 1962–63.\n\nSABRE went online in 1960. It had cost $40 million to develop and install (about **$400 million** in 2022 dollars). The system took over all American Airlines booking functions in 1964, and the system was expanded to provide access to external travel agents in 1976.\n\nWhat is the secret to the long lifespan of these systems? Shouldn't companies with long-lived products (annuities, life insurance, etc.) study these examples? After all, they need systems to support products that _last most of a human lifespan_. However, shouldn't _all companies_ want to their investments in software to last as long as possible?\n\n## Maintenance is About Making Something Last\n\nWe spoke of SABRE above, and we know that airlines recognize the value of maintenance. Commercial aircraft are inspected **at least once every two days**. Engines, hydraulics, environmental, and electrical systems all have additional maintenance schedules. A \"heavy\" maintenance inspection occurs once every few years. This process maintains the aircraft's service life over decades.\n\nOn average, an aircraft is operable for about 30 years before it must be retired. A Boeing 747 can endure 35,000 pressurization cycles — roughly 135,000 to 165,000 flight hours — before metal fatigue sets in. However, most older airframes are retired for fuel-efficiency reasons, not because they're worn out.\n\nEven stuctures made of grass can last indefinitely. [Inca rope bridges](https://en.wikipedia.org/wiki/Inca_rope_bridge) were simple suspension bridges constructed by the Inca Empire. The bridges were an integral part of the Inca road system were constructed using ichu grass. \n\n![Inca Rope Bridge](https://danstroot.imgix.net/assets/blog/img/inca_bridge.jpg)\n\nEven though they were made of grass, these bridges were maintained with such regularity and attention **they lasted centuries**. The bridge's strength and reliability came from the fact that _each cable was replaced every June_.\n\nThe goal of maintenance is **catching problems before they happen.** That’s the difference between _maintenance_ and _repair_. Repair is about fixing something that’s already broken. **Maintenance is about making something last.**\n\n## Unfortunately, Maintenance is Chronically Undervalued\n\nMaintenance is one of the easiest things to cut when budgets get tight. Some legacy software systems have _decades_ of underinvestment in maintenance. This leads up to the inevitable \"we have to replace it\" discussion - which somehow always sounds more persuasive (even though it’s more expensive and riskier) than arguing to invest in system rehabilitation and deferred system maintenance.\n\nExecutives generally can't refuse \"repair\" work because the system is broken and must be fixed. However, maintenance is a tougher sell. It’s not strictly necessary — or at least it doesn’t seem to be until things start falling apart. It is so easy to divert maintenance budget into a halo project that gets an executive noticed (and possibly promoted) before the long-term effects of underinvestment in maintenance become visible. Even worse, the executive is also admired for reducing the costs of maintenance and switching costs from \"run\" to \"grow\" - while they are torpedoing the company under the waterline.\n\nThe other challenge is conflating enhancement work with maintenance work. Imagine you have $1,000 and you want to add a sunroof to your car, but you also need new tires (which coincidentally also cost $1,000). You have to replace the tires every so often, but a sunroof is \"forever\" right? If you spend the money on the sunroof the tires could get replaced next month, or maybe the month after - they'll last a couple more months, won't they?\n\nWith software, users can't see \"the bald tires\" - they only thing they see, or experience (and value), are new features and capabilities. Pressure is always present to cut costs _and_ to add new features. The result is budget **always** swings away from maintenance work towards enhancements.\n\nFinally, maintenance work is typically an operational cost, yet building a new system, or a significant new feature, can often be capitalized - making the future costs someone else's problem.\n\n## Risks of Replacing Software Systems\n\nIt's usually not the design or the age of a system that causes it to fail but rather _neglect_. People fail to maintain software systems because they are _not given the time, incentives, or resources to maintain them_.\n\n> \"Most of the systems I work on rescuing are not badly built. **They are badly maintained.**\"\n>\n> <cite>&mdash; Marianne Bellotti, Kill it With Fire</cite>\n\nOnce a system degrades it is an enormous challenge to fund deferred maintenance (or \"technical debt\"). No one plans for it, no one wants to pay for it, and no engineer wants to do it. Initiatives to restore operational excellence, much the way one would fix up an old house, tend to have few volunteers among engineering teams. No one gets noticed doing maintenance. No one ever gets promoted because of maintenance.\n\nIt should be clear why engineers prefer to re-write a system rather than maintain it. They get to \"write a new story\" rather than edit someone else's. They will attempt to convince a senior executive to fund a project to replace a problematic system by describing all the new features and capabilities that could be added as well as how \"bad\" the existing, unmaintained, system has become. Further, they will get to use modern technology that makes them much more valuable in the market.\n\nIncentives aside, engineering teams tend to gravitate toward system rewrites because they incorrectly think of old systems as specs. They assume that since an old system works, the functional risks have been eliminated. They can focus on adding more features to the new system or make changes to the underlying architecture without worry. Either they do not perceive the ambiguity these changes introduce, or they see such ambiguity positively, imagining only gains in performance and the potential for innovation.\n\nWhy not authorize that multimillion-dollar replacement if the engineers convince management the existing system is doomed? Eventually a \"replacement\" project will be funded (typically at a much higher expenditure than rehabilitating the existing system). Even if the executives are not listening to the engineers, they will be listening to external consultants telling them they are falling behind.\n\nWhat do you do with the old system while you’re building the new one? Most organizations put the old system on “life support” and give it only the resources for patches and fixes necessary to keep it running. This reduces maintenance even further and becomes a self-fulfilling prophecy that the existing system will eventually fail.\n\nWho gets to work on the new system, and who takes on the maintenance tasks of the old system? If the old system is written in older technology that the company is actively abandoning, the team maintaining the old system is essentially sitting around waiting to be fired. And don’t kid yourself, they know it. If the people maintaining the old system are not participating in the creation of the new system, you should expect that they are also looking for new jobs. If they leave before your new system is operational, you lose both their expertise and their institutional knowledge.\n\nIf the new project falls behind schedule (and it almost certainly will), the existing system continues to degrade, and knowledge continues to walk out the door. If the new project fails and is subsequently canceled, the gap between the legacy system and operational excellence has widened _significantly_ in the meantime.\n\nThis explains why executives are loathe to cancel system replacement projects even when they are obviously years behind schedule and failing to live up to expectations. Stopping the replacement project seems impossible because the legacy system is now so degraded that restoring it to operational excellence seems impossible. Plus, politically canceling a marquee project can be career suicide for the sponsoring executive(s). Much better to do \"deep dives\" and \"assessments\" on why the project is failing and soldier on than cancel it.\n\nThe interim state is not pretty. The company now has two systems to operate, much higher costs and new risks.\n\n- The new system will have high costs, limited functionality, new and unique errors/issues, and lower volumes (so the \"per unit cost\" of the new system will be quite high).\n- The older system will still be running most of the business, and usually **all** of the complex business, while having lost its best engineers and subject matter experts. Its maintenance budget will have been whittled down to nothing to redirect spending to implement (save?) the new system. This system will be in grave danger to significant system failure (which proponents of the new system will use to justify the investment in the new system, not admitting to a self-fulfilling prophecy).\n\nNeither system will exhibit operational excellence, and both put the organization at significant risk in addition to the higher costs and complexity of running two systems.\n\n## Maintaining Software to Last Forever\n\nAs I discussed in [How Software Learns](/posts/2022-06-05-how-software-learns), software adapts over time - as it is continually refined and reshaped by maintenance and enhancements. **Maintenance** is crucial to software's lifespan and business relevance/value. When software systems are first developed, they are based on a prediction of the future - a prediction of the future that we know is wrong even as we make it. No set of requirements have ever been perfect. However, all new systems become \"less wrong\" as time, experience, and knowledge are continually added (e.g., maintenance).\n\nFutureproofing means constantly rethinking and iterating on the existing system. We know from both research and experience that iterating and maintaining existing solutions is a much more likely, and less expensive, way to improve software's lifespan and functionality.\n\nBefore choosing to replace a system that needs deferred maintenance remember _it’s the lack of maintenance that create the impression that failure is inevitable_, and pushes otherwise rational engineers and executives toward rewrites or replacements. What mechanisms will prevent lack of maintenance from eventually dooming the brand-new system? Has the true root problem been addressed?\n\nRobust maintenance practices could preserve software for decades, but first maintenance must be valued, funded, and applied. To maintain software properly we have to consider:\n\n1. How do you measure the overall health of a system?\n1. How do you define and manage maintenance work?\n1. How do you define a reasonable maintenance budget? _How can you protect that budget?_\n1. How do you motivate engineers to perform maintenance?\n\n### 1. How do you measure the overall health of a system?\n\n#### Objective measures\n\n1. **Maintenance Backlog** — If you added up **all** the open work requests, including work the software engineers deem necessary to eliminate technical debt, what is the total amount of effort? Now, divide that by the team capacity. For example, imagine you have a total amount of work of 560 days, and you have one person assigned to support the system - they work approximately 200 days annually. The backlog in days in 560, but in time it is 2.8 years (560 days / 200 days/year = 2.8 years). What is a reasonable amount of backlog time?\n\n1. **System Reliability/Downtime** — If you added up **all** the time the system is down in a given period, what is the total amount? What is the user or customer impact of that downtime? Conversely, what would reducing that downtime be worth? What is the relationship of maintenance and downtime? In other words, does the system need to be taken down to maintain it (planned maintenance)? Does planned maintenance reduce unplanned downtime?\n\n1. **Capacity/Performance Constraints** — Is the existing hitting capacity constraints that will prevent future growth of the business? How unpredictable are the system capacity demands? What is the customer experience when the system capacity is breached? What is relationship between hardware and software that constrains the system? Is the software performant? Can hardware solve the problem?\n\n#### Subjective measures\n\n1. **User Satisfaction**: User satisfaction includes both how happy your employees are with the applications and/or how well those applications meet your customer's needs. Many times I have found the technology team and the business users arguing over \"bug\" vs. \"enhancement\". It is a way of assigning blame. \"Bug\" means its engineering's fault, \"enhancement\" means it was a missed requirement. When emotions run hot it means that the maintenance budget is insufficient. I always tell everyone they are both just maintenance and the only important decision is which to prioritize and fix first.\n\n1. **“Shadow IT”** — If you used applications in the past that didn’t meet employees’ needs, and didn’t have a good governance plan to address problems, you may have noticed employees found other solutions on their own. This is an indication of underfunded maintenance.\n\n1. **Adaptable Architecture** — \"The cloud\", API-based integration, and unlocking your data are no longer “nice to haves.” Your architecture needs to adapt. If these are challenges, then the architecture must be addressed.\n\n1. **Governance** — Healthy application architecture isn’t just about technology—it’s also about having well-documented and well-understood governance documents that guide technology investments for your organization. Good governance helps create adaptable architecture and avoid “shadow IT” applications.\n\n### 2. How do you define maintenance work?\n\nThere are four general types of software maintenance. The first two types take up the majority of most organizations' maintenance budget, and _may not even be considered maintenance_ - however, all four types must be funded adequately for software to remain healthy. If you can't fully address types three and four your maintenance budget is inadequate.\n\n#### 1. Corrective Software Maintenance (more accurately called \"repair\")\n\nCorrective software maintenance is necessary when something goes wrong in a piece of software including faults and errors. These can have a widespread impact on the functionality of the software in general and therefore must be addressed as quickly as possible. However, it is important to consider repair work separate from the other types of maintenance because repair work must get done. Note: this is generally the only type of work that happens when a system is put on \"life support\".\n\n#### 2. Perfective Software Maintenance (more accurately called \"enhancements\")\n\nOnce software is released and is being used new issues and ideas come to the surface. Users will think up new features or requirements that they would like to see. Perfective software maintenance aims to adjust software by adding new features as necessary (and removing features that are irrelevant or not effective). This process keeps software relevant as the market, and user needs, evolve. It there is funding beyond \"life support\" it usually is spent here.\n\n#### 3. Preventative Software Maintenance (true maintenance is **catching problems before they happen.**)\n\nPreventative software maintenance is looking into the future so that your software can keep working as desired for as long as possible. This includes making necessary changes, upgrades, and adaptations. Preventative software maintenance may address small issues which at the given time may lack significance but may turn into larger problems in the future. These are called latent faults which need to be detected and corrected to make sure that they won’t turn into effective faults. This type of maintenance is generally underfunded.\n\n#### 4. Adaptive Software Maintenance (true maintenance **adapts to changes**)\n\nAdaptive software maintenance is responding to the changing technology landscape, as well as new company policies and rules regarding your software. These include operating system changes, using cloud technology, security policies, hardware changes, etc. When these changes are performed, your software (and possibly architecture) must adapt to properly meet new requirements and meet current security and other policies.\n\n### 3. How do you define a reasonable maintenance budget? How can you protect that budget?\n\nIn the case of the Inca rope bridges what was the cost of maintenance annually? Let's assume some of the build work was site preparation and building the stone anchors on each side, but most of the work was constructing the bridge itself. Since the bridge was _entirely replaced_ each year, the maintenance costs could be as much as 80% of the initial build effort, _every year_.\n\nComparing to \"software as a service\" (SaaS) vendors is difficult because they have shifted to a subscription model that bundles infrastructure, enhancements, and ongoing maintenance. Prior to SaaS subscription-based pricing one would typically buy a perpetual license plus maintenance at ~20-30% annual cost of the license to obtain support and updates.\n\nSide note: Now that the SaaS annual costs are commingled, some enterprises fall into the trap that “building it is cheaper because we pay up front but then it will cost less in the long run” assuming the \"long run\" almost always underprices infrastructure and assumes near zero maintenance cost. In the case of a brand-new, internally designed and developed software system - one that is well architected, well designed, well built, and meets all reliability, scalability, and performance needs (i.e., fantasy software) it's conceivable that there is no maintenance necessary for some period of time - but **very** unlikely.\n\nSo, maintenance costs can have a very wide range. A general rule of thumb is 20-30% of the initial build cost will be required for ongoing maintenance work annually. However, maintenance costs usually start off lower and increase over time. They are also unpredictable costs that are hard to budget.\n\nThe challenges should be obvious. First, budgets in large organizations tend be last year's budget plus 2-3%. If you start with a maintenance budget of zero on a new system, how do you ever get to the point of a healthy maintenance budget in the future? Second, maintenance costs are unpredictable, and organizations _hate_ unpredictable costs. It's impossible to say when the next new hardware, or storage, or programming construct will occur, or when the existing system will hit a performance or scalability inflection point.\n\nThis is like buying a brand-new car. The maintenance costs are negligible in the first couple years, until they start to creep up. Then things start to need maintenance, replacement, or repair. As the car ages the maintenance costs continue to increase until at some point it makes economic sense to buy another new car. _Except none of us wait that long._ Most of us buy new cars before our old one is completely worn out. As a counter-example, in Cuba some cars have been maintained meticulously for 30-40 years and _run better than new_.\n\n#### Protecting your maintenance budget - creating a \"maintenance fund\"\n\nWe know that maintenance cost increase over time, and the costs of proper maintenance are unpredictable. In addition, there is some amount of management discretion that can be applied. When your house needs a new roof it's reasonable to defer it through summer, but it probably needs to be done before winter.\n\nSince business require predictability of costs, unpredictable maintenance costs are easy to defer. \"We didn't budget for that; we'll have to put it in next year's budget.\" Except of course in the budget process it will compete with other projects and enhancement work, where it's again likely to be deprioritized.\n\nWhat's the solution? Could it be possible to create some type of maintenance fund where a predictable amount is budgeted each year, and then spent \"unpredictably\" when/as needed? Could this also be a solution to preventing executives from diverting maintenance budget into pet projects by protecting this maintenance fund in some fashion?\n\n### 4. How do you motivate software engineers to perform maintenance?\n\nThere is a Chinese proverb about a discussion between a king and a famous doctor. The well-known doctor explains to the king that his brother (who is also a doctor) is superior at medicine, but he is unknown because he always successfully treats small illnesses, preventing them from evolving into more serious or terminal ones. So, people say \"Oh he is a fine doctor, but he only treats minor illnesses\". It's true: [Nobody Ever Gets Credit for Fixing Problems that Never Happened.](https://web.mit.edu/nelsonr/www/Repenning=Sterman_CMR_su01_.pdf)\n\nTo most software engineers, legacy systems seem like torturous dead-end work, but the reality is systems that are not important get turned off. Working on \"estate\" systems means working on some of the most critical systems that exist — computers that govern millions of people’s lives in enumerable ways. This is not the work of technical janitors, but _battlefield surgeons_.\n\nEngineering loves new technology. It gains the engineers attention and industry marketability. [Boring technology](https://engineering.atspotify.com/2013/02/in-praise-of-boring-technology/) on the other hand is great for the **company**. The engineering cost is lower, and the skills are easier to obtain and keep, because these engineers are not being pulled out of your organization for double their salary by Amazon or Google.\n\nWell-designed, high-functioning software that is easy to understand usually blends in. Simple solutions do not do much to enhance one’s personal brand. Therefore, when an organization provides limited pathways to promotion for software engineers, they tend to make technical decisions that emphasize their individual contribution and technical prowess. You have to be very careful to reward what you want from your engineering team.\n\nWhat earns them the acknowledgment of their peers? What gets people seen is what they will ultimately prioritize, even if those behaviors are in open conflict with the official direction they receive from management. In most organizations shipping new code gets attention, while technical debt accrues silently in the background.\n\nThe specific form of acknowledgment also matters a lot. Positive reinforcement in the form of social recognition tends to be a more effective motivator than the traditional incentive structure of promotions, raises, and bonuses. Behavioral economist Dan Ariely attributes this to the difference between social markets and traditional monetary-based markets. Social markets are governed by social norms (read: peer pressure and social capital), and they often inspire people to work harder and longer than much more expensive incentives that represent the traditional work-for-pay exchange. In other words, _people will work really hard for positive reinforcement from their peers_.\n\n## Legacy System Modernization\n\nUnmaintained software will certainly die at some point. Due to factors discussed above, software does not always receive the proper amount of maintenance to remain healthy. Eventually a larger modernization effort may become necessary to restore a system to operational and functional excellence.\n\nLegacy modernization projects start off feeling easy. The organization once had a reliable working system and kept it running for years. All the modernizing team should need to do is simply reshape it using better technology, better architecture, the benefit of hindsight, and improved tooling. It should be simple. But, because people do not see the hidden technical challenges they are about to uncover, they also assume the work will be boring. There’s little glory to be had re-implementing a solved problem.\n\nModernization projects are also typically the ones organizations just want to get out of the way, so they launch into them unprepared for the time and resource commitments they require. Modernization projects take months, if not years of work. Keeping a team of engineers focused, inspired, and motivated from beginning to end is difficult. Keeping their senior leadership prepared to invest in what is, in effect, something they already have is a huge challenge. Creating momentum and sustaining it are where most modernization projects fail.\n\nThe hard part about legacy modernization is the \"system around the system\". The organization, its communication structures, its politics, and its incentives are all intertwined with the technical product in such a way that to improve the product, you must do it by turning the gears of this other, complex, undocumented system. Pay attention to politics and culture. Technology is at most only 50% of the legacy problem, ways of working, organization structure and leadership/sponsorship are just as important to success.\n\nTo do this, you need to overcome people’s natural skepticism and get them to buy in. The important word in the phrase \"proof of concept\" is _proof_. You need to prove to people that success is possible and worth doing. It can't be just an MVP, because [MVPs are dangerous.](/posts/2021-12-27-dangerous-mvps). A red flag is raised when companies talk about the phases of their modernization plans in terms of which technologies they are going to use _rather than what value they will add_.\n\nFor all that people talk about COBOL dying off, it is good at certain tasks. The problem with most old COBOL systems is that they were designed at a time when COBOL was the _only option_. Start by sorting which parts of the system are in COBOL because COBOL is good at performing that task, and which parts are in COBOL because there were no other technologies available. Once you have that mapping, start by pulling the latter off into separate services that are written and designed using the technology we would choose for that task today.\n\nGoing through the exercise of understanding what functionality is fit for use for specific languages/technologies not only gives engineers a way to keep building their skillsets but also is an opportunity to pair with other engineers who have different/complimentary skills. This exchange also has the benefit of diffusing the understanding of the system to a broader group of people without needing to solely rely on documentation (which never exists).\n\nCounterintuitively, SLAs/SLOs are valuable because they provide a \"failure budget\". When organizations stop aiming for perfection and accept that all systems will occasionally fail, they stop letting their technology rot for fear of change. In most cases, mean time to recovery (MTTR) is a more useful statistic to push than reliability. MTTR tracks how long it takes the organization to recover from failure. Resilience in engineering is all about recovering stronger from failure. That means better monitoring, better documentation, and better processes for restoring services, but you can’t improve any of that if you don’t occasionally fail.\n\nAlthough a system that constantly breaks, or that breaks in unexpected ways without warning, will lose its users’ trust, the reverse isn’t necessarily true. A system that never breaks doesn’t necessarily inspire high degrees of trust - and its maintenance budget _is even easier to cut_.\n\nPeople take systems that are too reliable for granted. Italian researchers Cristiano Castelfranchi and Rino Falcone have been advancing a general model of trust that postulates trust naturally degrades over time, regardless of whether any action has been taken to violate that trust. Under Castelfranchi and Falcone’s model, maintaining trust doesn’t mean establishing a perfect record; it means continuing to rack up observations of resilience. If a piece of technology is so reliable it has been completely forgotten, it is not creating those regular observations. Through no fault of the technology, the user’s trust in it slowly deteriorates.\n\nWhen both observability and testing are lacking on your legacy system, observability comes first. Tests tell you only what shouldn’t fail; monitoring tells you what _is failing_. Don’t forget: a perfect record will always be broken, but resilience is an accomplishment that lasts. Modern engineering teams use stats like service level objectives, error budgets, and mean time to recovery to move the emphasis away from avoiding failure and toward recovering quickly.\n\n## Summary\n\nMaintenance mostly happens out of sight, mysteriously. If we notice it, it’s a nuisance. When road crews block off sections of highway to fix cracks or potholes, we treat it as an obstruction, not a vital and necessary process. This is especially true in the public sector: it’s almost impossible to get governmental action on, or voter interest in, spending on preventive maintenance, yet governments make seemly unlimited funds available once we have a disaster. We are okay spending a massive amount of money to fix a problem, but consistently resist spending a much smaller amount of money to prevent it; as a business strategy this makes no sense.\n\nThe [Open Mainframe Project](https://www.openmainframeproject.org) estimates that there about 250 billion lines of COBOL code running today in the world economy, and nearly all COBOL code contains critical business logic. Companies should maintain that software and make it last as long as possible. \n\n### References\n\n- [Things You Should Never Do, Part I](https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/)\n- [Patterns of Legacy Displacement](https://martinfowler.com/articles/patterns-legacy-displacement/)\n- [Kill It with Fire: Manage Aging Computer Systems (and Future Proof Modern Ones)](https://www.amazon.com/Kill-Fire-Manage-Computer-Systems/dp/1718501188)\n- [Building software to last forever](https://herman.bearblog.dev/building-software-to-last-forever/)\n- [The Disappearing Art Of Maintenance](https://www.noemamag.com/the-disappearing-art-of-maintenance/)\n- [Inca rope bridge](https://en.wikipedia.org/wiki/Inca_rope_bridge)\n- [How Often Do Commercial Airplanes Need Maintenance?](https://monroeaerospace.com/blog/how-often-do-commercial-airplanes-need-maintenance/#:~:text=Commercial%20airplanes%20require%20frequent%20maintenance,inspection%20once%20every%20few%20years.)\n- [Nobody Ever Gets Credit for Fixing Problems that Never Happened](https://web.mit.edu/nelsonr/www/Repenning=Sterman_CMR_su01_.pdf)\n- [Boring Technology Club](https://boringtechnology.club/)\n- [Open Mainframe Project 2021 Annual Report](https://www.openmainframeproject.org/wp-content/uploads/sites/11/2022/04/OMP_Annual_Report_2021_040622.pdf)\n- [How Popular is COBOL?](https://news.ycombinator.com/item?id=33999718)\n\n---\n\nImage Credit: **Bill Gates, CEO of Microsoft, holds Windows 1.0 floppy discs.**\n\n<span className='text-sm'>\n  (Photo by Deborah Feingold/Corbis via Getty Images) This was the release of Windows 1.0. The beginning. Computers evolve. The underlying hardware, CPU, memory, and storage evolves. The operating system evolves. Of course, the software we use must evolve as well. \n</span>\n",
    "code": "var Component=(()=>{var dn=Object.create;var P=Object.defineProperty;var un=Object.getOwnPropertyDescriptor;var mn=Object.getOwnPropertyNames;var fn=Object.getPrototypeOf,bn=Object.prototype.hasOwnProperty;var q=(u,e)=>()=>(e||u((e={exports:{}}).exports,e),e.exports),cn=(u,e)=>{for(var p in e)P(u,p,{get:e[p],enumerable:!0})},Ne=(u,e,p,x)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let y of mn(e))!bn.call(u,y)&&y!==p&&P(u,y,{get:()=>e[y],enumerable:!(x=un(e,y))||x.enumerable});return u};var hn=(u,e,p)=>(p=u!=null?dn(fn(u)):{},Ne(e||!u||!u.__esModule?P(p,\"default\",{value:u,enumerable:!0}):p,u)),pn=u=>Ne(P({},\"__esModule\",{value:!0}),u);var ve=q((wn,we)=>{we.exports=React});var Te=q(U=>{\"use strict\";(function(){\"use strict\";var u=ve(),e=Symbol.for(\"react.element\"),p=Symbol.for(\"react.portal\"),x=Symbol.for(\"react.fragment\"),y=Symbol.for(\"react.strict_mode\"),G=Symbol.for(\"react.profiler\"),K=Symbol.for(\"react.provider\"),X=Symbol.for(\"react.context\"),k=Symbol.for(\"react.forward_ref\"),A=Symbol.for(\"react.suspense\"),M=Symbol.for(\"react.suspense_list\"),E=Symbol.for(\"react.memo\"),F=Symbol.for(\"react.lazy\"),Ee=Symbol.for(\"react.offscreen\"),J=Symbol.iterator,Se=\"@@iterator\";function Re(n){if(n===null||typeof n!=\"object\")return null;var o=J&&n[J]||n[Se];return typeof o==\"function\"?o:null}var w=u.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function b(n){{for(var o=arguments.length,a=new Array(o>1?o-1:0),i=1;i<o;i++)a[i-1]=arguments[i];Oe(\"error\",n,a)}}function Oe(n,o,a){{var i=w.ReactDebugCurrentFrame,l=i.getStackAddendum();l!==\"\"&&(o+=\"%s\",a=a.concat([l]));var d=a.map(function(s){return String(s)});d.unshift(\"Warning: \"+o),Function.prototype.apply.call(console[n],console,d)}}var Ie=!1,je=!1,Pe=!1,Ae=!1,Me=!1,Z;Z=Symbol.for(\"react.module.reference\");function Fe(n){return!!(typeof n==\"string\"||typeof n==\"function\"||n===x||n===G||Me||n===y||n===A||n===M||Ae||n===Ee||Ie||je||Pe||typeof n==\"object\"&&n!==null&&(n.$$typeof===F||n.$$typeof===E||n.$$typeof===K||n.$$typeof===X||n.$$typeof===k||n.$$typeof===Z||n.getModuleId!==void 0))}function We(n,o,a){var i=n.displayName;if(i)return i;var l=o.displayName||o.name||\"\";return l!==\"\"?a+\"(\"+l+\")\":a}function Q(n){return n.displayName||\"Context\"}function g(n){if(n==null)return null;if(typeof n.tag==\"number\"&&b(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"),typeof n==\"function\")return n.displayName||n.name||null;if(typeof n==\"string\")return n;switch(n){case x:return\"Fragment\";case p:return\"Portal\";case G:return\"Profiler\";case y:return\"StrictMode\";case A:return\"Suspense\";case M:return\"SuspenseList\"}if(typeof n==\"object\")switch(n.$$typeof){case X:var o=n;return Q(o)+\".Consumer\";case K:var a=n;return Q(a._context)+\".Provider\";case k:return We(n,n.render,\"ForwardRef\");case E:var i=n.displayName||null;return i!==null?i:g(n.type)||\"Memo\";case F:{var l=n,d=l._payload,s=l._init;try{return g(s(d))}catch{return null}}}return null}var N=Object.assign,C=0,ee,ne,te,oe,ae,ie,re;function se(){}se.__reactDisabledLog=!0;function De(){{if(C===0){ee=console.log,ne=console.info,te=console.warn,oe=console.error,ae=console.group,ie=console.groupCollapsed,re=console.groupEnd;var n={configurable:!0,enumerable:!0,value:se,writable:!0};Object.defineProperties(console,{info:n,log:n,warn:n,error:n,group:n,groupCollapsed:n,groupEnd:n})}C++}}function ze(){{if(C--,C===0){var n={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:N({},n,{value:ee}),info:N({},n,{value:ne}),warn:N({},n,{value:te}),error:N({},n,{value:oe}),group:N({},n,{value:ae}),groupCollapsed:N({},n,{value:ie}),groupEnd:N({},n,{value:re})})}C<0&&b(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\")}}var W=w.ReactCurrentDispatcher,D;function S(n,o,a){{if(D===void 0)try{throw Error()}catch(l){var i=l.stack.trim().match(/\\n( *(at )?)/);D=i&&i[1]||\"\"}return`\n`+D+n}}var z=!1,R;{var Le=typeof WeakMap==\"function\"?WeakMap:Map;R=new Le}function le(n,o){if(!n||z)return\"\";{var a=R.get(n);if(a!==void 0)return a}var i;z=!0;var l=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var d;d=W.current,W.current=null,De();try{if(o){var s=function(){throw Error()};if(Object.defineProperty(s.prototype,\"props\",{set:function(){throw Error()}}),typeof Reflect==\"object\"&&Reflect.construct){try{Reflect.construct(s,[])}catch(_){i=_}Reflect.construct(n,[],s)}else{try{s.call()}catch(_){i=_}n.call(s.prototype)}}else{try{throw Error()}catch(_){i=_}n()}}catch(_){if(_&&i&&typeof _.stack==\"string\"){for(var r=_.stack.split(`\n`),c=i.stack.split(`\n`),m=r.length-1,f=c.length-1;m>=1&&f>=0&&r[m]!==c[f];)f--;for(;m>=1&&f>=0;m--,f--)if(r[m]!==c[f]){if(m!==1||f!==1)do if(m--,f--,f<0||r[m]!==c[f]){var h=`\n`+r[m].replace(\" at new \",\" at \");return n.displayName&&h.includes(\"<anonymous>\")&&(h=h.replace(\"<anonymous>\",n.displayName)),typeof n==\"function\"&&R.set(n,h),h}while(m>=1&&f>=0);break}}}finally{z=!1,W.current=d,ze(),Error.prepareStackTrace=l}var T=n?n.displayName||n.name:\"\",xe=T?S(T):\"\";return typeof n==\"function\"&&R.set(n,xe),xe}function Be(n,o,a){return le(n,!1)}function Ye(n){var o=n.prototype;return!!(o&&o.isReactComponent)}function O(n,o,a){if(n==null)return\"\";if(typeof n==\"function\")return le(n,Ye(n));if(typeof n==\"string\")return S(n);switch(n){case A:return S(\"Suspense\");case M:return S(\"SuspenseList\")}if(typeof n==\"object\")switch(n.$$typeof){case k:return Be(n.render);case E:return O(n.type,o,a);case F:{var i=n,l=i._payload,d=i._init;try{return O(d(l),o,a)}catch{}}}return\"\"}var I=Object.prototype.hasOwnProperty,de={},ue=w.ReactDebugCurrentFrame;function j(n){if(n){var o=n._owner,a=O(n.type,n._source,o?o.type:null);ue.setExtraStackFrame(a)}else ue.setExtraStackFrame(null)}function He(n,o,a,i,l){{var d=Function.call.bind(I);for(var s in n)if(d(n,s)){var r=void 0;try{if(typeof n[s]!=\"function\"){var c=Error((i||\"React class\")+\": \"+a+\" type `\"+s+\"` is invalid; it must be a function, usually from the `prop-types` package, but received `\"+typeof n[s]+\"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");throw c.name=\"Invariant Violation\",c}r=n[s](o,s,i,a,null,\"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\")}catch(m){r=m}r&&!(r instanceof Error)&&(j(l),b(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\",i||\"React class\",a,s,typeof r),j(null)),r instanceof Error&&!(r.message in de)&&(de[r.message]=!0,j(l),b(\"Failed %s type: %s\",a,r.message),j(null))}}}var $e=Array.isArray;function L(n){return $e(n)}function qe(n){{var o=typeof Symbol==\"function\"&&Symbol.toStringTag,a=o&&n[Symbol.toStringTag]||n.constructor.name||\"Object\";return a}}function Ue(n){try{return me(n),!1}catch{return!0}}function me(n){return\"\"+n}function fe(n){if(Ue(n))return b(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\",qe(n)),me(n)}var V=w.ReactCurrentOwner,Ge={key:!0,ref:!0,__self:!0,__source:!0},be,ce,B;B={};function Ke(n){if(I.call(n,\"ref\")){var o=Object.getOwnPropertyDescriptor(n,\"ref\").get;if(o&&o.isReactWarning)return!1}return n.ref!==void 0}function Xe(n){if(I.call(n,\"key\")){var o=Object.getOwnPropertyDescriptor(n,\"key\").get;if(o&&o.isReactWarning)return!1}return n.key!==void 0}function Je(n,o){if(typeof n.ref==\"string\"&&V.current&&o&&V.current.stateNode!==o){var a=g(V.current.type);B[a]||(b('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',g(V.current.type),n.ref),B[a]=!0)}}function Ze(n,o){{var a=function(){be||(be=!0,b(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",o))};a.isReactWarning=!0,Object.defineProperty(n,\"key\",{get:a,configurable:!0})}}function Qe(n,o){{var a=function(){ce||(ce=!0,b(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",o))};a.isReactWarning=!0,Object.defineProperty(n,\"ref\",{get:a,configurable:!0})}}var en=function(n,o,a,i,l,d,s){var r={$$typeof:e,type:n,key:o,ref:a,props:s,_owner:d};return r._store={},Object.defineProperty(r._store,\"validated\",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(r,\"_self\",{configurable:!1,enumerable:!1,writable:!1,value:i}),Object.defineProperty(r,\"_source\",{configurable:!1,enumerable:!1,writable:!1,value:l}),Object.freeze&&(Object.freeze(r.props),Object.freeze(r)),r};function nn(n,o,a,i,l){{var d,s={},r=null,c=null;a!==void 0&&(fe(a),r=\"\"+a),Xe(o)&&(fe(o.key),r=\"\"+o.key),Ke(o)&&(c=o.ref,Je(o,l));for(d in o)I.call(o,d)&&!Ge.hasOwnProperty(d)&&(s[d]=o[d]);if(n&&n.defaultProps){var m=n.defaultProps;for(d in m)s[d]===void 0&&(s[d]=m[d])}if(r||c){var f=typeof n==\"function\"?n.displayName||n.name||\"Unknown\":n;r&&Ze(s,f),c&&Qe(s,f)}return en(n,r,c,l,i,V.current,s)}}var Y=w.ReactCurrentOwner,he=w.ReactDebugCurrentFrame;function v(n){if(n){var o=n._owner,a=O(n.type,n._source,o?o.type:null);he.setExtraStackFrame(a)}else he.setExtraStackFrame(null)}var H;H=!1;function $(n){return typeof n==\"object\"&&n!==null&&n.$$typeof===e}function pe(){{if(Y.current){var n=g(Y.current.type);if(n)return`\n\nCheck the render method of \\``+n+\"`.\"}return\"\"}}function tn(n){{if(n!==void 0){var o=n.fileName.replace(/^.*[\\\\\\/]/,\"\"),a=n.lineNumber;return`\n\nCheck your code at `+o+\":\"+a+\".\"}return\"\"}}var ge={};function on(n){{var o=pe();if(!o){var a=typeof n==\"string\"?n:n.displayName||n.name;a&&(o=`\n\nCheck the top-level render call using <`+a+\">.\")}return o}}function _e(n,o){{if(!n._store||n._store.validated||n.key!=null)return;n._store.validated=!0;var a=on(o);if(ge[a])return;ge[a]=!0;var i=\"\";n&&n._owner&&n._owner!==Y.current&&(i=\" It was passed a child from \"+g(n._owner.type)+\".\"),v(n),b('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',a,i),v(null)}}function ye(n,o){{if(typeof n!=\"object\")return;if(L(n))for(var a=0;a<n.length;a++){var i=n[a];$(i)&&_e(i,o)}else if($(n))n._store&&(n._store.validated=!0);else if(n){var l=Re(n);if(typeof l==\"function\"&&l!==n.entries)for(var d=l.call(n),s;!(s=d.next()).done;)$(s.value)&&_e(s.value,o)}}}function an(n){{var o=n.type;if(o==null||typeof o==\"string\")return;var a;if(typeof o==\"function\")a=o.propTypes;else if(typeof o==\"object\"&&(o.$$typeof===k||o.$$typeof===E))a=o.propTypes;else return;if(a){var i=g(o);He(a,n.props,\"prop\",i,n)}else if(o.PropTypes!==void 0&&!H){H=!0;var l=g(o);b(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\",l||\"Unknown\")}typeof o.getDefaultProps==\"function\"&&!o.getDefaultProps.isReactClassApproved&&b(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\")}}function rn(n){{for(var o=Object.keys(n.props),a=0;a<o.length;a++){var i=o[a];if(i!==\"children\"&&i!==\"key\"){v(n),b(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\",i),v(null);break}}n.ref!==null&&(v(n),b(\"Invalid attribute `ref` supplied to `React.Fragment`.\"),v(null))}}function sn(n,o,a,i,l,d){{var s=Fe(n);if(!s){var r=\"\";(n===void 0||typeof n==\"object\"&&n!==null&&Object.keys(n).length===0)&&(r+=\" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");var c=tn(l);c?r+=c:r+=pe();var m;n===null?m=\"null\":L(n)?m=\"array\":n!==void 0&&n.$$typeof===e?(m=\"<\"+(g(n.type)||\"Unknown\")+\" />\",r=\" Did you accidentally export a JSX literal instead of a component?\"):m=typeof n,b(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\",m,r)}var f=nn(n,o,a,l,d);if(f==null)return f;if(s){var h=o.children;if(h!==void 0)if(i)if(L(h)){for(var T=0;T<h.length;T++)ye(h[T],n);Object.freeze&&Object.freeze(h)}else b(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");else ye(h,n)}return n===x?rn(f):an(f),f}}var ln=sn;U.Fragment=x,U.jsxDEV=ln})()});var Ve=q((Tn,Ce)=>{\"use strict\";Ce.exports=Te()});var xn={};cn(xn,{default:()=>yn,frontmatter:()=>gn});var t=hn(Ve()),gn={title:\"Making Software Last Forever\",excerpt:\"Joel Spolsky (of Fog Creek Software and Stack Overflow) describes system re-writes as \\u201Cthe single worst strategic mistake that any software company can make\\u201D. However, engineering teams love full rewrites because they incorrectly think of old systems as specs. They assume that since the old system works, all functional aspects have been settled. Design risks have been eliminated! They can focus on making changes to the underlying architecture without worry. This is a deeply flawed assumption.\",coverImage:\"/assets/blog/img/billg.jpeg\",date:\"2023-05-25\",published:!0,author:{name:\"Dan Stroot\",picture:\"/assets/blog/authors/dan.jpeg\"},ogImage:{url:\"/assets/blog/img/billg.jpeg\"},seoURL:null};function ke(u){let e=Object.assign({p:\"p\",em:\"em\",strong:\"strong\",a:\"a\",h2:\"h2\",img:\"img\",blockquote:\"blockquote\",ul:\"ul\",li:\"li\",ol:\"ol\",h3:\"h3\",h4:\"h4\",hr:\"hr\"},u.components);return(0,t.jsxDEV)(t.Fragment,{children:[(0,t.jsxDEV)(e.p,{children:[\"How many of us have bought a new home because our prior home was not quite meeting our needs? Maybe we needed an extra bedroom, or wanted a bigger backyard? Now, as a thought experiment, assume you \",(0,t.jsxDEV)(e.em,{children:\"couldn't sell your existing home\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:15,columnNumber:199},this),`. If you bought a new home, you'd have to \"retire\" or \"decommission\" your prior home (and your investment in it). Does that change your thinking?`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:15,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"Further, imagine you had a team of five people maintaining your prior home, improving it, and keeping it updated, for the last ten years. You'd have a cumulative investment of 50 person/years in your existing home (5 people x 10 years) just in maintenance, on top of the initial investment. If each person was paid the equivalent of a software developer (we'll use $200k to include benefits, office space, leadership, etc.) you'd have an investment just in labor of \",(0,t.jsxDEV)(e.strong,{children:\"$10 million dollars\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:17,columnNumber:467},this),\" (50 person/years x $200,000). Would you walk away from that investment?\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:17,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:`When companies decide to re-write or replace an existing software application, they are making a similar decision. Existing software is \"retired\" or \"decommissioned\" (along with its cumulative investment). Yet the belief that new code is always better than old is patently absurd. Old code has weathered and withstood the test of time. It has been battle-tested. You know it's failure modes. Bugs have been found, and more importantly, fixed.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:19,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:['Joel Spolsky (of Fog Creek Software and Stack Overflow) describes system re-writes in \"',(0,t.jsxDEV)(e.a,{href:\"https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/\",children:\"Things You Should Never Do, Part I\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:21,columnNumber:88},this),'\" as \\u201Cthe single worst strategic mistake that any software company can make.\\u201D']},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:21,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Continuing our home analogy, recent price increases for construction materials like lumber, drywall, and wiring (and frankly everything else) should, according to Economics 101, cause us to treat our current homes more dearly. Similarly, price increases for quality software engineers should force companies to treat existing software more dearly.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:23,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"Lots of current software started out as C software from the 1980s. Engineers don't often write software with portability as a goal at the beginning, but once something is relatively portable, it tends to stay that way. Code that was well designed and written often migrated from mini-computers to i386, from i386 to amd64, and now ARM and arch64, with a minimum of redesign or effort. You can take large, complicated programs from the 1980s written in C, and compile/run them on a modern Linux computer - even when the modern computer is running architectures which \",(0,t.jsxDEV)(e.em,{children:\"hadn't even been dreamt of when the software was originally written\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:25,columnNumber:567},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:25,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:`Why can't software last forever? It's not made of wood, concrete, or steel. It doesn't \"wear out\", rot, weather, or rust. A working algorithm is a working algorithm. Technology doesn\\u2019t need to be beautiful, or impress other people, to be effective. Aren't technologists ultimately in the business of producing cost effective technology?`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:27,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"I am going to attempt to convince you that \",(0,t.jsxDEV)(e.em,{children:\"maintaining\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:29,columnNumber:44},this),\" your existing systems is one the most cost-effective technology investments you can make.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:29,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h2,{id:\"the-worlds-oldest-software-systems\",children:\"The World's Oldest Software Systems\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:31,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:['In 1958, the United States Department of Defense launched a new computer-based contract management system called \"Mechanization of Contract Administration Services\", or MOCAS (pronounced \\u201CMOH-cass\\u201D). In 2015, ',(0,t.jsxDEV)(e.a,{href:\"https://www.technologyreview.com/2015/08/06/166822/what-is-the-oldest-computer-program-still-in-use/\",children:\"MIT Technology Review\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:33,columnNumber:210},this),\" stated that MOCAS was the oldest computer program in continuous use they could verify. At that time MOCAS managed about $1.3 trillion in government obligations and 340,000 contracts.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:33,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"According to the \",(0,t.jsxDEV)(e.a,{href:\"https://www.guinnessworldrecords.com/world-records/636196-oldest-software-system-in-continuous-use\",children:\"Guinness Book of World Records\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:35,columnNumber:18},this),\", the oldest software system in use today is either the \",(0,t.jsxDEV)(e.a,{href:\"https://en.wikipedia.org/wiki/Sabre_(travel_reservation_system)\",children:\"SABRE\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:35,columnNumber:206},this),\" Airline Reservation System (introduced in 1960), or the IRS Individual Master File (IMF) and Business Master File (BMF) systems introduced in 1962\\u201363.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:35,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"SABRE went online in 1960. It had cost $40 million to develop and install (about \",(0,t.jsxDEV)(e.strong,{children:\"$400 million\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:37,columnNumber:82},this),\" in 2022 dollars). The system took over all American Airlines booking functions in 1964, and the system was expanded to provide access to external travel agents in 1976.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:37,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"What is the secret to the long lifespan of these systems? Shouldn't companies with long-lived products (annuities, life insurance, etc.) study these examples? After all, they need systems to support products that \",(0,t.jsxDEV)(e.em,{children:\"last most of a human lifespan\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:39,columnNumber:214},this),\". However, shouldn't \",(0,t.jsxDEV)(e.em,{children:\"all companies\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:39,columnNumber:266},this),\" want to their investments in software to last as long as possible?\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:39,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h2,{id:\"maintenance-is-about-making-something-last\",children:\"Maintenance is About Making Something Last\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:41,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"We spoke of SABRE above, and we know that airlines recognize the value of maintenance. Commercial aircraft are inspected \",(0,t.jsxDEV)(e.strong,{children:\"at least once every two days\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:43,columnNumber:122},this),`. Engines, hydraulics, environmental, and electrical systems all have additional maintenance schedules. A \"heavy\" maintenance inspection occurs once every few years. This process maintains the aircraft's service life over decades.`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:43,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"On average, an aircraft is operable for about 30 years before it must be retired. A Boeing 747 can endure 35,000 pressurization cycles \\u2014 roughly 135,000 to 165,000 flight hours \\u2014 before metal fatigue sets in. However, most older airframes are retired for fuel-efficiency reasons, not because they're worn out.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:45,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"Even stuctures made of grass can last indefinitely. \",(0,t.jsxDEV)(e.a,{href:\"https://en.wikipedia.org/wiki/Inca_rope_bridge\",children:\"Inca rope bridges\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:47,columnNumber:53},this),\" were simple suspension bridges constructed by the Inca Empire. The bridges were an integral part of the Inca road system were constructed using ichu grass.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:47,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:(0,t.jsxDEV)(e.img,{src:\"https://danstroot.imgix.net/assets/blog/img/inca_bridge.jpg\",alt:\"Inca Rope Bridge\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:49,columnNumber:1},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:49,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"Even though they were made of grass, these bridges were maintained with such regularity and attention \",(0,t.jsxDEV)(e.strong,{children:\"they lasted centuries\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:51,columnNumber:103},this),\". The bridge's strength and reliability came from the fact that \",(0,t.jsxDEV)(e.em,{children:\"each cable was replaced every June\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:51,columnNumber:192},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:51,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"The goal of maintenance is \",(0,t.jsxDEV)(e.strong,{children:\"catching problems before they happen.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:53,columnNumber:28},this),\" That\\u2019s the difference between \",(0,t.jsxDEV)(e.em,{children:\"maintenance\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:53,columnNumber:100},this),\" and \",(0,t.jsxDEV)(e.em,{children:\"repair\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:53,columnNumber:118},this),\". Repair is about fixing something that\\u2019s already broken. \",(0,t.jsxDEV)(e.strong,{children:\"Maintenance is about making something last.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:53,columnNumber:184},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:53,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h2,{id:\"unfortunately-maintenance-is-chronically-undervalued\",children:\"Unfortunately, Maintenance is Chronically Undervalued\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:55,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"Maintenance is one of the easiest things to cut when budgets get tight. Some legacy software systems have \",(0,t.jsxDEV)(e.em,{children:\"decades\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:57,columnNumber:107},this),' of underinvestment in maintenance. This leads up to the inevitable \"we have to replace it\" discussion - which somehow always sounds more persuasive (even though it\\u2019s more expensive and riskier) than arguing to invest in system rehabilitation and deferred system maintenance.']},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:57,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:`Executives generally can't refuse \"repair\" work because the system is broken and must be fixed. However, maintenance is a tougher sell. It\\u2019s not strictly necessary \\u2014 or at least it doesn\\u2019t seem to be until things start falling apart. It is so easy to divert maintenance budget into a halo project that gets an executive noticed (and possibly promoted) before the long-term effects of underinvestment in maintenance become visible. Even worse, the executive is also admired for reducing the costs of maintenance and switching costs from \"run\" to \"grow\" - while they are torpedoing the company under the waterline.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:59,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:`The other challenge is conflating enhancement work with maintenance work. Imagine you have $1,000 and you want to add a sunroof to your car, but you also need new tires (which coincidentally also cost $1,000). You have to replace the tires every so often, but a sunroof is \"forever\" right? If you spend the money on the sunroof the tires could get replaced next month, or maybe the month after - they'll last a couple more months, won't they?`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:61,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[`With software, users can't see \"the bald tires\" - they only thing they see, or experience (and value), are new features and capabilities. Pressure is always present to cut costs `,(0,t.jsxDEV)(e.em,{children:\"and\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:63,columnNumber:179},this),\" to add new features. The result is budget \",(0,t.jsxDEV)(e.strong,{children:\"always\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:63,columnNumber:227},this),\" swings away from maintenance work towards enhancements.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:63,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Finally, maintenance work is typically an operational cost, yet building a new system, or a significant new feature, can often be capitalized - making the future costs someone else's problem.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:65,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h2,{id:\"risks-of-replacing-software-systems\",children:\"Risks of Replacing Software Systems\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:67,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"It's usually not the design or the age of a system that causes it to fail but rather \",(0,t.jsxDEV)(e.em,{children:\"neglect\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:69,columnNumber:86},this),\". People fail to maintain software systems because they are \",(0,t.jsxDEV)(e.em,{children:\"not given the time, incentives, or resources to maintain them\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:69,columnNumber:155},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:69,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.blockquote,{children:[`\n`,(0,t.jsxDEV)(e.p,{children:['\"Most of the systems I work on rescuing are not badly built. ',(0,t.jsxDEV)(e.strong,{children:\"They are badly maintained.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:71,columnNumber:64},this),'\"']},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:71,columnNumber:3},this),`\n`,(0,t.jsxDEV)(\"cite\",{children:\"\\u2014 Marianne Bellotti, Kill it With Fire\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:73,columnNumber:3},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:71,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:'Once a system degrades it is an enormous challenge to fund deferred maintenance (or \"technical debt\"). No one plans for it, no one wants to pay for it, and no engineer wants to do it. Initiatives to restore operational excellence, much the way one would fix up an old house, tend to have few volunteers among engineering teams. No one gets noticed doing maintenance. No one ever gets promoted because of maintenance.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:75,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:`It should be clear why engineers prefer to re-write a system rather than maintain it. They get to \"write a new story\" rather than edit someone else's. They will attempt to convince a senior executive to fund a project to replace a problematic system by describing all the new features and capabilities that could be added as well as how \"bad\" the existing, unmaintained, system has become. Further, they will get to use modern technology that makes them much more valuable in the market.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:77,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Incentives aside, engineering teams tend to gravitate toward system rewrites because they incorrectly think of old systems as specs. They assume that since an old system works, the functional risks have been eliminated. They can focus on adding more features to the new system or make changes to the underlying architecture without worry. Either they do not perceive the ambiguity these changes introduce, or they see such ambiguity positively, imagining only gains in performance and the potential for innovation.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:79,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:'Why not authorize that multimillion-dollar replacement if the engineers convince management the existing system is doomed? Eventually a \"replacement\" project will be funded (typically at a much higher expenditure than rehabilitating the existing system). Even if the executives are not listening to the engineers, they will be listening to external consultants telling them they are falling behind.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:81,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"What do you do with the old system while you\\u2019re building the new one? Most organizations put the old system on \\u201Clife support\\u201D and give it only the resources for patches and fixes necessary to keep it running. This reduces maintenance even further and becomes a self-fulfilling prophecy that the existing system will eventually fail.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:83,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Who gets to work on the new system, and who takes on the maintenance tasks of the old system? If the old system is written in older technology that the company is actively abandoning, the team maintaining the old system is essentially sitting around waiting to be fired. And don\\u2019t kid yourself, they know it. If the people maintaining the old system are not participating in the creation of the new system, you should expect that they are also looking for new jobs. If they leave before your new system is operational, you lose both their expertise and their institutional knowledge.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:85,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"If the new project falls behind schedule (and it almost certainly will), the existing system continues to degrade, and knowledge continues to walk out the door. If the new project fails and is subsequently canceled, the gap between the legacy system and operational excellence has widened \",(0,t.jsxDEV)(e.em,{children:\"significantly\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:87,columnNumber:290},this),\" in the meantime.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:87,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:'This explains why executives are loathe to cancel system replacement projects even when they are obviously years behind schedule and failing to live up to expectations. Stopping the replacement project seems impossible because the legacy system is now so degraded that restoring it to operational excellence seems impossible. Plus, politically canceling a marquee project can be career suicide for the sponsoring executive(s). Much better to do \"deep dives\" and \"assessments\" on why the project is failing and soldier on than cancel it.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:89,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"The interim state is not pretty. The company now has two systems to operate, much higher costs and new risks.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:91,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.ul,{children:[`\n`,(0,t.jsxDEV)(e.li,{children:'The new system will have high costs, limited functionality, new and unique errors/issues, and lower volumes (so the \"per unit cost\" of the new system will be quite high).'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:93,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:[\"The older system will still be running most of the business, and usually \",(0,t.jsxDEV)(e.strong,{children:\"all\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:94,columnNumber:76},this),\" of the complex business, while having lost its best engineers and subject matter experts. Its maintenance budget will have been whittled down to nothing to redirect spending to implement (save?) the new system. This system will be in grave danger to significant system failure (which proponents of the new system will use to justify the investment in the new system, not admitting to a self-fulfilling prophecy).\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:94,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:93,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Neither system will exhibit operational excellence, and both put the organization at significant risk in addition to the higher costs and complexity of running two systems.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:96,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h2,{id:\"maintaining-software-to-last-forever\",children:\"Maintaining Software to Last Forever\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:98,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"As I discussed in \",(0,t.jsxDEV)(e.a,{href:\"/posts/2022-06-05-how-software-learns\",children:\"How Software Learns\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:100,columnNumber:19},this),\", software adapts over time - as it is continually refined and reshaped by maintenance and enhancements. \",(0,t.jsxDEV)(e.strong,{children:\"Maintenance\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:100,columnNumber:184},this),` is crucial to software's lifespan and business relevance/value. When software systems are first developed, they are based on a prediction of the future - a prediction of the future that we know is wrong even as we make it. No set of requirements have ever been perfect. However, all new systems become \"less wrong\" as time, experience, and knowledge are continually added (e.g., maintenance).`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:100,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Futureproofing means constantly rethinking and iterating on the existing system. We know from both research and experience that iterating and maintaining existing solutions is a much more likely, and less expensive, way to improve software's lifespan and functionality.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:102,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"Before choosing to replace a system that needs deferred maintenance remember \",(0,t.jsxDEV)(e.em,{children:\"it\\u2019s the lack of maintenance that create the impression that failure is inevitable\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:104,columnNumber:78},this),\", and pushes otherwise rational engineers and executives toward rewrites or replacements. What mechanisms will prevent lack of maintenance from eventually dooming the brand-new system? Has the true root problem been addressed?\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:104,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Robust maintenance practices could preserve software for decades, but first maintenance must be valued, funded, and applied. To maintain software properly we have to consider:\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:106,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.ol,{children:[`\n`,(0,t.jsxDEV)(e.li,{children:\"How do you measure the overall health of a system?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:108,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:\"How do you define and manage maintenance work?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:109,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:[\"How do you define a reasonable maintenance budget? \",(0,t.jsxDEV)(e.em,{children:\"How can you protect that budget?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:110,columnNumber:55},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:110,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:\"How do you motivate engineers to perform maintenance?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:111,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:108,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h3,{id:\"1-how-do-you-measure-the-overall-health-of-a-system\",children:\"1. How do you measure the overall health of a system?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:113,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h4,{id:\"objective-measures\",children:\"Objective measures\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:115,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.ol,{children:[`\n`,(0,t.jsxDEV)(e.li,{children:[`\n`,(0,t.jsxDEV)(e.p,{children:[(0,t.jsxDEV)(e.strong,{children:\"Maintenance Backlog\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:117,columnNumber:4},this),\" \\u2014 If you added up \",(0,t.jsxDEV)(e.strong,{children:\"all\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:117,columnNumber:46},this),\" the open work requests, including work the software engineers deem necessary to eliminate technical debt, what is the total amount of effort? Now, divide that by the team capacity. For example, imagine you have a total amount of work of 560 days, and you have one person assigned to support the system - they work approximately 200 days annually. The backlog in days in 560, but in time it is 2.8 years (560 days / 200 days/year = 2.8 years). What is a reasonable amount of backlog time?\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:117,columnNumber:4},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:117,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:[`\n`,(0,t.jsxDEV)(e.p,{children:[(0,t.jsxDEV)(e.strong,{children:\"System Reliability/Downtime\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:119,columnNumber:4},this),\" \\u2014 If you added up \",(0,t.jsxDEV)(e.strong,{children:\"all\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:119,columnNumber:54},this),\" the time the system is down in a given period, what is the total amount? What is the user or customer impact of that downtime? Conversely, what would reducing that downtime be worth? What is the relationship of maintenance and downtime? In other words, does the system need to be taken down to maintain it (planned maintenance)? Does planned maintenance reduce unplanned downtime?\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:119,columnNumber:4},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:119,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:[`\n`,(0,t.jsxDEV)(e.p,{children:[(0,t.jsxDEV)(e.strong,{children:\"Capacity/Performance Constraints\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:121,columnNumber:4},this),\" \\u2014 Is the existing hitting capacity constraints that will prevent future growth of the business? How unpredictable are the system capacity demands? What is the customer experience when the system capacity is breached? What is relationship between hardware and software that constrains the system? Is the software performant? Can hardware solve the problem?\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:121,columnNumber:4},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:121,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:117,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h4,{id:\"subjective-measures\",children:\"Subjective measures\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:123,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.ol,{children:[`\n`,(0,t.jsxDEV)(e.li,{children:[`\n`,(0,t.jsxDEV)(e.p,{children:[(0,t.jsxDEV)(e.strong,{children:\"User Satisfaction\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:125,columnNumber:4},this),`: User satisfaction includes both how happy your employees are with the applications and/or how well those applications meet your customer's needs. Many times I have found the technology team and the business users arguing over \"bug\" vs. \"enhancement\". It is a way of assigning blame. \"Bug\" means its engineering's fault, \"enhancement\" means it was a missed requirement. When emotions run hot it means that the maintenance budget is insufficient. I always tell everyone they are both just maintenance and the only important decision is which to prioritize and fix first.`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:125,columnNumber:4},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:125,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:[`\n`,(0,t.jsxDEV)(e.p,{children:[(0,t.jsxDEV)(e.strong,{children:\"\\u201CShadow IT\\u201D\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:127,columnNumber:4},this),\" \\u2014 If you used applications in the past that didn\\u2019t meet employees\\u2019 needs, and didn\\u2019t have a good governance plan to address problems, you may have noticed employees found other solutions on their own. This is an indication of underfunded maintenance.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:127,columnNumber:4},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:127,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:[`\n`,(0,t.jsxDEV)(e.p,{children:[(0,t.jsxDEV)(e.strong,{children:\"Adaptable Architecture\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:129,columnNumber:4},this),' \\u2014 \"The cloud\", API-based integration, and unlocking your data are no longer \\u201Cnice to haves.\\u201D Your architecture needs to adapt. If these are challenges, then the architecture must be addressed.']},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:129,columnNumber:4},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:129,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:[`\n`,(0,t.jsxDEV)(e.p,{children:[(0,t.jsxDEV)(e.strong,{children:\"Governance\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:131,columnNumber:4},this),\" \\u2014 Healthy application architecture isn\\u2019t just about technology\\u2014it\\u2019s also about having well-documented and well-understood governance documents that guide technology investments for your organization. Good governance helps create adaptable architecture and avoid \\u201Cshadow IT\\u201D applications.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:131,columnNumber:4},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:131,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:125,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h3,{id:\"2-how-do-you-define-maintenance-work\",children:\"2. How do you define maintenance work?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:133,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"There are four general types of software maintenance. The first two types take up the majority of most organizations' maintenance budget, and \",(0,t.jsxDEV)(e.em,{children:\"may not even be considered maintenance\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:135,columnNumber:143},this),\" - however, all four types must be funded adequately for software to remain healthy. If you can't fully address types three and four your maintenance budget is inadequate.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:135,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h4,{id:\"1-corrective-software-maintenance-more-accurately-called-repair\",children:'1. Corrective Software Maintenance (more accurately called \"repair\")'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:137,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:'Corrective software maintenance is necessary when something goes wrong in a piece of software including faults and errors. These can have a widespread impact on the functionality of the software in general and therefore must be addressed as quickly as possible. However, it is important to consider repair work separate from the other types of maintenance because repair work must get done. Note: this is generally the only type of work that happens when a system is put on \"life support\".'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:139,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h4,{id:\"2-perfective-software-maintenance-more-accurately-called-enhancements\",children:'2. Perfective Software Maintenance (more accurately called \"enhancements\")'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:141,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:'Once software is released and is being used new issues and ideas come to the surface. Users will think up new features or requirements that they would like to see. Perfective software maintenance aims to adjust software by adding new features as necessary (and removing features that are irrelevant or not effective). This process keeps software relevant as the market, and user needs, evolve. It there is funding beyond \"life support\" it usually is spent here.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:143,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h4,{id:\"3-preventative-software-maintenance-true-maintenance-is-catching-problems-before-they-happen\",children:[\"3. Preventative Software Maintenance (true maintenance is \",(0,t.jsxDEV)(e.strong,{children:\"catching problems before they happen.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:145,columnNumber:64},this),\")\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:145,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Preventative software maintenance is looking into the future so that your software can keep working as desired for as long as possible. This includes making necessary changes, upgrades, and adaptations. Preventative software maintenance may address small issues which at the given time may lack significance but may turn into larger problems in the future. These are called latent faults which need to be detected and corrected to make sure that they won\\u2019t turn into effective faults. This type of maintenance is generally underfunded.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:147,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h4,{id:\"4-adaptive-software-maintenance-true-maintenance-adapts-to-changes\",children:[\"4. Adaptive Software Maintenance (true maintenance \",(0,t.jsxDEV)(e.strong,{children:\"adapts to changes\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:149,columnNumber:57},this),\")\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:149,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Adaptive software maintenance is responding to the changing technology landscape, as well as new company policies and rules regarding your software. These include operating system changes, using cloud technology, security policies, hardware changes, etc. When these changes are performed, your software (and possibly architecture) must adapt to properly meet new requirements and meet current security and other policies.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:151,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h3,{id:\"3-how-do-you-define-a-reasonable-maintenance-budget-how-can-you-protect-that-budget\",children:\"3. How do you define a reasonable maintenance budget? How can you protect that budget?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:153,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"In the case of the Inca rope bridges what was the cost of maintenance annually? Let's assume some of the build work was site preparation and building the stone anchors on each side, but most of the work was constructing the bridge itself. Since the bridge was \",(0,t.jsxDEV)(e.em,{children:\"entirely replaced\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:155,columnNumber:261},this),\" each year, the maintenance costs could be as much as 80% of the initial build effort, \",(0,t.jsxDEV)(e.em,{children:\"every year\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:155,columnNumber:367},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:155,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:'Comparing to \"software as a service\" (SaaS) vendors is difficult because they have shifted to a subscription model that bundles infrastructure, enhancements, and ongoing maintenance. Prior to SaaS subscription-based pricing one would typically buy a perpetual license plus maintenance at ~20-30% annual cost of the license to obtain support and updates.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:157,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[`Side note: Now that the SaaS annual costs are commingled, some enterprises fall into the trap that \\u201Cbuilding it is cheaper because we pay up front but then it will cost less in the long run\\u201D assuming the \"long run\" almost always underprices infrastructure and assumes near zero maintenance cost. In the case of a brand-new, internally designed and developed software system - one that is well architected, well designed, well built, and meets all reliability, scalability, and performance needs (i.e., fantasy software) it's conceivable that there is no maintenance necessary for some period of time - but `,(0,t.jsxDEV)(e.strong,{children:\"very\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:159,columnNumber:607},this),\" unlikely.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:159,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"So, maintenance costs can have a very wide range. A general rule of thumb is 20-30% of the initial build cost will be required for ongoing maintenance work annually. However, maintenance costs usually start off lower and increase over time. They are also unpredictable costs that are hard to budget.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:161,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"The challenges should be obvious. First, budgets in large organizations tend be last year's budget plus 2-3%. If you start with a maintenance budget of zero on a new system, how do you ever get to the point of a healthy maintenance budget in the future? Second, maintenance costs are unpredictable, and organizations \",(0,t.jsxDEV)(e.em,{children:\"hate\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:163,columnNumber:318},this),\" unpredictable costs. It's impossible to say when the next new hardware, or storage, or programming construct will occur, or when the existing system will hit a performance or scalability inflection point.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:163,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"This is like buying a brand-new car. The maintenance costs are negligible in the first couple years, until they start to creep up. Then things start to need maintenance, replacement, or repair. As the car ages the maintenance costs continue to increase until at some point it makes economic sense to buy another new car. \",(0,t.jsxDEV)(e.em,{children:\"Except none of us wait that long.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:165,columnNumber:322},this),\" Most of us buy new cars before our old one is completely worn out. As a counter-example, in Cuba some cars have been maintained meticulously for 30-40 years and \",(0,t.jsxDEV)(e.em,{children:\"run better than new\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:165,columnNumber:519},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:165,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h4,{id:\"protecting-your-maintenance-budget---creating-a-maintenance-fund\",children:'Protecting your maintenance budget - creating a \"maintenance fund\"'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:167,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"We know that maintenance cost increase over time, and the costs of proper maintenance are unpredictable. In addition, there is some amount of management discretion that can be applied. When your house needs a new roof it's reasonable to defer it through summer, but it probably needs to be done before winter.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:169,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:`Since business require predictability of costs, unpredictable maintenance costs are easy to defer. \"We didn't budget for that; we'll have to put it in next year's budget.\" Except of course in the budget process it will compete with other projects and enhancement work, where it's again likely to be deprioritized.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:171,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:`What's the solution? Could it be possible to create some type of maintenance fund where a predictable amount is budgeted each year, and then spent \"unpredictably\" when/as needed? Could this also be a solution to preventing executives from diverting maintenance budget into pet projects by protecting this maintenance fund in some fashion?`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:173,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h3,{id:\"4-how-do-you-motivate-software-engineers-to-perform-maintenance\",children:\"4. How do you motivate software engineers to perform maintenance?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:175,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[`There is a Chinese proverb about a discussion between a king and a famous doctor. The well-known doctor explains to the king that his brother (who is also a doctor) is superior at medicine, but he is unknown because he always successfully treats small illnesses, preventing them from evolving into more serious or terminal ones. So, people say \"Oh he is a fine doctor, but he only treats minor illnesses\". It's true: `,(0,t.jsxDEV)(e.a,{href:\"https://web.mit.edu/nelsonr/www/Repenning=Sterman_CMR_su01_.pdf\",children:\"Nobody Ever Gets Credit for Fixing Problems that Never Happened.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:177,columnNumber:418},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:177,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:['To most software engineers, legacy systems seem like torturous dead-end work, but the reality is systems that are not important get turned off. Working on \"estate\" systems means working on some of the most critical systems that exist \\u2014 computers that govern millions of people\\u2019s lives in enumerable ways. This is not the work of technical janitors, but ',(0,t.jsxDEV)(e.em,{children:\"battlefield surgeons\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:179,columnNumber:354},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:179,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"Engineering loves new technology. It gains the engineers attention and industry marketability. \",(0,t.jsxDEV)(e.a,{href:\"https://engineering.atspotify.com/2013/02/in-praise-of-boring-technology/\",children:\"Boring technology\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:181,columnNumber:96},this),\" on the other hand is great for the \",(0,t.jsxDEV)(e.strong,{children:\"company\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:181,columnNumber:226},this),\". The engineering cost is lower, and the skills are easier to obtain and keep, because these engineers are not being pulled out of your organization for double their salary by Amazon or Google.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:181,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Well-designed, high-functioning software that is easy to understand usually blends in. Simple solutions do not do much to enhance one\\u2019s personal brand. Therefore, when an organization provides limited pathways to promotion for software engineers, they tend to make technical decisions that emphasize their individual contribution and technical prowess. You have to be very careful to reward what you want from your engineering team.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:183,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"What earns them the acknowledgment of their peers? What gets people seen is what they will ultimately prioritize, even if those behaviors are in open conflict with the official direction they receive from management. In most organizations shipping new code gets attention, while technical debt accrues silently in the background.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:185,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"The specific form of acknowledgment also matters a lot. Positive reinforcement in the form of social recognition tends to be a more effective motivator than the traditional incentive structure of promotions, raises, and bonuses. Behavioral economist Dan Ariely attributes this to the difference between social markets and traditional monetary-based markets. Social markets are governed by social norms (read: peer pressure and social capital), and they often inspire people to work harder and longer than much more expensive incentives that represent the traditional work-for-pay exchange. In other words, \",(0,t.jsxDEV)(e.em,{children:\"people will work really hard for positive reinforcement from their peers\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:187,columnNumber:607},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:187,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h2,{id:\"legacy-system-modernization\",children:\"Legacy System Modernization\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:189,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Unmaintained software will certainly die at some point. Due to factors discussed above, software does not always receive the proper amount of maintenance to remain healthy. Eventually a larger modernization effort may become necessary to restore a system to operational and functional excellence.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:191,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Legacy modernization projects start off feeling easy. The organization once had a reliable working system and kept it running for years. All the modernizing team should need to do is simply reshape it using better technology, better architecture, the benefit of hindsight, and improved tooling. It should be simple. But, because people do not see the hidden technical challenges they are about to uncover, they also assume the work will be boring. There\\u2019s little glory to be had re-implementing a solved problem.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:193,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Modernization projects are also typically the ones organizations just want to get out of the way, so they launch into them unprepared for the time and resource commitments they require. Modernization projects take months, if not years of work. Keeping a team of engineers focused, inspired, and motivated from beginning to end is difficult. Keeping their senior leadership prepared to invest in what is, in effect, something they already have is a huge challenge. Creating momentum and sustaining it are where most modernization projects fail.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:195,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:'The hard part about legacy modernization is the \"system around the system\". The organization, its communication structures, its politics, and its incentives are all intertwined with the technical product in such a way that to improve the product, you must do it by turning the gears of this other, complex, undocumented system. Pay attention to politics and culture. Technology is at most only 50% of the legacy problem, ways of working, organization structure and leadership/sponsorship are just as important to success.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:197,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:['To do this, you need to overcome people\\u2019s natural skepticism and get them to buy in. The important word in the phrase \"proof of concept\" is ',(0,t.jsxDEV)(e.em,{children:\"proof\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:199,columnNumber:141},this),\". You need to prove to people that success is possible and worth doing. It can't be just an MVP, because \",(0,t.jsxDEV)(e.a,{href:\"/posts/2021-12-27-dangerous-mvps\",children:\"MVPs are dangerous.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:199,columnNumber:253},this),\". A red flag is raised when companies talk about the phases of their modernization plans in terms of which technologies they are going to use \",(0,t.jsxDEV)(e.em,{children:\"rather than what value they will add\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:199,columnNumber:450},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:199,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"For all that people talk about COBOL dying off, it is good at certain tasks. The problem with most old COBOL systems is that they were designed at a time when COBOL was the \",(0,t.jsxDEV)(e.em,{children:\"only option\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:201,columnNumber:174},this),\". Start by sorting which parts of the system are in COBOL because COBOL is good at performing that task, and which parts are in COBOL because there were no other technologies available. Once you have that mapping, start by pulling the latter off into separate services that are written and designed using the technology we would choose for that task today.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:201,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Going through the exercise of understanding what functionality is fit for use for specific languages/technologies not only gives engineers a way to keep building their skillsets but also is an opportunity to pair with other engineers who have different/complimentary skills. This exchange also has the benefit of diffusing the understanding of the system to a broader group of people without needing to solely rely on documentation (which never exists).\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:203,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:'Counterintuitively, SLAs/SLOs are valuable because they provide a \"failure budget\". When organizations stop aiming for perfection and accept that all systems will occasionally fail, they stop letting their technology rot for fear of change. In most cases, mean time to recovery (MTTR) is a more useful statistic to push than reliability. MTTR tracks how long it takes the organization to recover from failure. Resilience in engineering is all about recovering stronger from failure. That means better monitoring, better documentation, and better processes for restoring services, but you can\\u2019t improve any of that if you don\\u2019t occasionally fail.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:205,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"Although a system that constantly breaks, or that breaks in unexpected ways without warning, will lose its users\\u2019 trust, the reverse isn\\u2019t necessarily true. A system that never breaks doesn\\u2019t necessarily inspire high degrees of trust - and its maintenance budget \",(0,t.jsxDEV)(e.em,{children:\"is even easier to cut\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:207,columnNumber:264},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:207,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"People take systems that are too reliable for granted. Italian researchers Cristiano Castelfranchi and Rino Falcone have been advancing a general model of trust that postulates trust naturally degrades over time, regardless of whether any action has been taken to violate that trust. Under Castelfranchi and Falcone\\u2019s model, maintaining trust doesn\\u2019t mean establishing a perfect record; it means continuing to rack up observations of resilience. If a piece of technology is so reliable it has been completely forgotten, it is not creating those regular observations. Through no fault of the technology, the user\\u2019s trust in it slowly deteriorates.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:209,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"When both observability and testing are lacking on your legacy system, observability comes first. Tests tell you only what shouldn\\u2019t fail; monitoring tells you what \",(0,t.jsxDEV)(e.em,{children:\"is failing\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:211,columnNumber:166},this),\". Don\\u2019t forget: a perfect record will always be broken, but resilience is an accomplishment that lasts. Modern engineering teams use stats like service level objectives, error budgets, and mean time to recovery to move the emphasis away from avoiding failure and toward recovering quickly.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:211,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h2,{id:\"summary\",children:\"Summary\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:213,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:\"Maintenance mostly happens out of sight, mysteriously. If we notice it, it\\u2019s a nuisance. When road crews block off sections of highway to fix cracks or potholes, we treat it as an obstruction, not a vital and necessary process. This is especially true in the public sector: it\\u2019s almost impossible to get governmental action on, or voter interest in, spending on preventive maintenance, yet governments make seemly unlimited funds available once we have a disaster. We are okay spending a massive amount of money to fix a problem, but consistently resist spending a much smaller amount of money to prevent it; as a business strategy this makes no sense.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:215,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"The \",(0,t.jsxDEV)(e.a,{href:\"https://www.openmainframeproject.org\",children:\"Open Mainframe Project\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:217,columnNumber:5},this),\" estimates that there about 250 billion lines of COBOL code running today in the world economy, and nearly all COBOL code contains critical business logic. Companies should maintain that software and make it last as long as possible.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:217,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.h3,{id:\"references\",children:\"References\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:219,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.ul,{children:[`\n`,(0,t.jsxDEV)(e.li,{children:(0,t.jsxDEV)(e.a,{href:\"https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/\",children:\"Things You Should Never Do, Part I\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:221,columnNumber:3},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:221,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:(0,t.jsxDEV)(e.a,{href:\"https://martinfowler.com/articles/patterns-legacy-displacement/\",children:\"Patterns of Legacy Displacement\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:222,columnNumber:3},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:222,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:(0,t.jsxDEV)(e.a,{href:\"https://www.amazon.com/Kill-Fire-Manage-Computer-Systems/dp/1718501188\",children:\"Kill It with Fire: Manage Aging Computer Systems (and Future Proof Modern Ones)\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:223,columnNumber:3},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:223,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:(0,t.jsxDEV)(e.a,{href:\"https://herman.bearblog.dev/building-software-to-last-forever/\",children:\"Building software to last forever\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:224,columnNumber:3},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:224,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:(0,t.jsxDEV)(e.a,{href:\"https://www.noemamag.com/the-disappearing-art-of-maintenance/\",children:\"The Disappearing Art Of Maintenance\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:225,columnNumber:3},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:225,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:(0,t.jsxDEV)(e.a,{href:\"https://en.wikipedia.org/wiki/Inca_rope_bridge\",children:\"Inca rope bridge\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:226,columnNumber:3},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:226,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:(0,t.jsxDEV)(e.a,{href:\"https://monroeaerospace.com/blog/how-often-do-commercial-airplanes-need-maintenance/#:~:text=Commercial%20airplanes%20require%20frequent%20maintenance,inspection%20once%20every%20few%20years.\",children:\"How Often Do Commercial Airplanes Need Maintenance?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:227,columnNumber:3},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:227,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:(0,t.jsxDEV)(e.a,{href:\"https://web.mit.edu/nelsonr/www/Repenning=Sterman_CMR_su01_.pdf\",children:\"Nobody Ever Gets Credit for Fixing Problems that Never Happened\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:228,columnNumber:3},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:228,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:(0,t.jsxDEV)(e.a,{href:\"https://boringtechnology.club/\",children:\"Boring Technology Club\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:229,columnNumber:3},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:229,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:(0,t.jsxDEV)(e.a,{href:\"https://www.openmainframeproject.org/wp-content/uploads/sites/11/2022/04/OMP_Annual_Report_2021_040622.pdf\",children:\"Open Mainframe Project 2021 Annual Report\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:230,columnNumber:3},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:230,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.li,{children:(0,t.jsxDEV)(e.a,{href:\"https://news.ycombinator.com/item?id=33999718\",children:\"How Popular is COBOL?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:231,columnNumber:3},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:231,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:221,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.hr,{},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:233,columnNumber:1},this),`\n`,(0,t.jsxDEV)(e.p,{children:[\"Image Credit: \",(0,t.jsxDEV)(e.strong,{children:\"Bill Gates, CEO of Microsoft, holds Windows 1.0 floppy discs.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:235,columnNumber:15},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:235,columnNumber:1},this),`\n`,(0,t.jsxDEV)(\"span\",{className:\"text-sm\",children:(0,t.jsxDEV)(e.p,{children:\"(Photo by Deborah Feingold/Corbis via Getty Images) This was the release of Windows 1.0. The beginning. Computers evolve. The underlying hardware, CPU, memory, and storage evolves. The operating system evolves. Of course, the software we use must evolve as well.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:238,columnNumber:3},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:237,columnNumber:1},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\",lineNumber:1,columnNumber:1},this)}function _n(u={}){let{wrapper:e}=u.components||{};return e?(0,t.jsxDEV)(e,Object.assign({},u,{children:(0,t.jsxDEV)(ke,u,void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\"},this)}),void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-fbe4b4da-4660-4f80-a4aa-f9d89be770fe.mdx\"},this):ke(u)}var yn=_n;return pn(xn);})();\n/*! Bundled license information:\n\nreact/cjs/react-jsx-dev-runtime.development.js:\n  (**\n   * @license React\n   * react-jsx-dev-runtime.development.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n;return Component;"
  },
  "_id": "posts/2023-05-25-making_software_last_forever.mdx",
  "_raw": {
    "sourceFilePath": "posts/2023-05-25-making_software_last_forever.mdx",
    "sourceFileName": "2023-05-25-making_software_last_forever.mdx",
    "sourceFileDir": "posts",
    "contentType": "mdx",
    "flattenedPath": "posts/2023-05-25-making_software_last_forever"
  },
  "type": "Post",
  "slug": "/posts/2023-05-25-making_software_last_forever",
  "slugAsParams": "2023-05-25-making_software_last_forever",
  "stats": {
    "text": "27 min read",
    "minutes": 26.7,
    "time": 1602000,
    "words": 5340
  }
}