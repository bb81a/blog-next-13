{
  "title": "Leadership Exercises",
  "excerpt": "A similar but inverse brainstorming exercise to the critical factors exercise is asking your team to play saboteur. If you wanted to guarantee that the project fails, what would you do? How can you achieve the worst possible outcome? Once this list is generated, you know what to look out for.",
  "coverImage": "/assets/blog/img/billg.jpeg",
  "date": "2023-01-05T00:00:00.000Z",
  "published": false,
  "author": {
    "name": "Dan Stroot",
    "picture": "/assets/blog/authors/dan.jpeg",
    "type": "Author",
    "_raw": {}
  },
  "ogImage": {
    "url": "/assets/blog/img/billg.jpeg",
    "type": "OGImage",
    "_raw": {}
  },
  "seoURL": null,
  "body": {
    "raw": "\n- **Saboteur** A similar but inverse brainstorming exercise to the critical factors exercise is asking your team to play saboteur. If you wanted to guarantee that the project fails, what would you do? How can you achieve the worst possible outcome? Once this list is generated, you know what to look out for. The team discusses if there are any behaviors either internally or from external partners that are close to items on the saboteur list. \n\n- **How far can you go?** I have talked about the value of making something 5 percent, 10 percent, or 20 percent better. This exercise asks team members to map out how much they can do on their own to move the project toward achieving its goals. What are they empowered to do? What blockers do they foresee, and when do they think they become relevant? How far can they go without approval, and who needs to grant that approval when the time comes? \n\n- **Betting** Probabilistic outcome-based decision-making is better known as betting. It’s a great technique for decisions that are hard to undo, have potentially serious impacts, and are vulnerable to confirmation bias. I tend to use it a lot to run hiring committees, for example. Firing people is difficult; making a wrong hire can destroy a team’s productivity, and people often see what they want to see in potential candidates. This is how it works: as a group, we make a list of potential outcomes from the decision that needs to be made. Outcomes like “We’re able to scale 2× by doing this” or “We will implement this new feature by this date.” You can mix both positive and negative outcomes if you like, but I find the conversation usually goes better if the list of outcomes is either all positive or all negative. Then team members place bets as to whether the outcome will come true. Traditionally, this exercise is run with imaginary money. Depending on the specific decision to be made, I sometimes ask them to bet with hours of their time instead of money.\n\n- **Slam dunk or guaranteed to fail?** We must be clear whether we are trying to ensure success or avoid failure. Counterintuitively, When success seems certain, we gravitate toward more conservative, risk-averse solutions. When failure seems more likely, we switch mentalities completely. We go bold, take more risks. We try the hail mary pass. If we are judging odds correctly, this behavior makes sense. We rarely judge odds correctly.\n \n- **In-Group/Out-Group** Who needs to communicate with whom may not be clear when you get started. This is an exercise I use to help reveal where the communication pathways are or should be. I give everyone a piece of paper with a circle drawn on it. The instructions are to write down the names of the people whose work they are dependent on inside the circle (in other words, “If this person fell behind schedule, would you be blocked?”) and the names of people who give them advice outside the circle. If there’s no one specific person, they can write a group or team name or a specific role, like frontend engineer, instead. Then I compare the results across each team. In theory, those inside the circle are people with whom the engineer needs to collaborate closely. Each result should resemble that engineer’s actual team with perhaps a few additions or deletions based on current issues playing out. Outside the circle should be all the other teams. Experts not on the team should be seen as interchangeable with other experts in the same field. Small variations will exist from person to person, but if the visualizations that people produce don’t look like their current teams, you know your existing structure does not meet your communication needs. \n\n- To summarize, people’s perception of risk is not static, and it’s often not connected to the probability of failure so much as it is the potential feeling of rejection and condemnation from their peers. Since social pressures and rewards are better incentives than money and promotions, you can improve your odds of success by learning how to manipulate an organization’s perception of risk. The first task is to understand what behaviors get individuals within an organization acknowledged. Those are the activities that people will ultimately prioritize. \n\n-\n- In terms of defining success, success criteria and diagnosis-policy-actions have different strengths and weaknesses. Success criteria connects modernization activities more directly to the value add they can demonstrate. It affords more flexibility in exactly what the team does by not prescribing a specific approach or set of tasks. It is an excellent exercise to run with bosses and any other oversight forces that might be inclined to micromanage a team. How to do something should be the decision of the people actually entrusted to do it. ([Location 3430](https://readwise.io/to_kindle?action=open&asin=B08CTFY4JP&location=3430))\n\n- Just as humans are terrible judges of probability, we’re also terrible judges of time. What feels like ages might only be a few days. By marking time, we can realign our emotional perception of how things are going. Find some way to record what you worked on and when so the team can easily go back and get a full picture of how far they’ve come. ([Location 3454](https://readwise.io/to_kindle?action=open&asin=B08CTFY4JP&location=3454))\n\n\n- **failure as bad luck and success as skill** Remember that we tend to think of failure as bad luck and success as skill. We do postmortems on failure because we’re likely to see them as complex scenarios with a variety of contributing factors. We assume that success happens for simple, straightforward reasons. In reality, success is no more or less complex than failure. You should use the same methodology to learn from success that you use to learn from failure. Your timeline in a postmortem for success should be built around these questions: How did the organization execute on the original strategy, how did the strategy change, when did those changes happen, and what triggered them? Now for the key questions. What went well? What could have gone better? Where did you get lucky? \n\n\n- Although this visual model might just look like an illustration, we can actually program it for real and use it to explore how our team manages its work in various conditions. Two tools popular with system thinkers for these kinds of models are Loopy (https://ncase.me/loopy/). and InsightMaker (https://insightmaker.com/). Both are free and open source, and both allow you to experiment with different configurations and interactions. ([Location 3868](https://readwise.io/to_kindle?action=open&asin=B08CTFY4JP&location=3868))\n- \n\n\n\n- Organizations choose to keep the bus moving as fast as possible because they can’t see all the feedback loops. Shipping new code gets attention, while technical debt accrues silently and without fanfare. It’s not the age of a system that causes it to fail, but the pressure of what the organization has forgotten about it slowly building toward an explosion. \n\n\n\n### References\n\n- [Enterprise modernization for insurers](https://www.thoughtworks.com/en-au/insights/blog/legacy-modernization/enterprise-modernization-insurers)\n- [For insurance companies - the day of digital reckoning](https://media.bain.com/Images/BAIN_BRIEF_For_insurance_companies_the_day_of_digital_reckoning.pdf)\n- [Things You Should Never Do, Part I](https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/)\n- [Patterns of Legacy Displacement](https://martinfowler.com/articles/patterns-legacy-displacement/)\n- [Kill It with Fire: Manage Aging Computer Systems (and Future Proof Modern Ones)](https://www.amazon.com/Kill-Fire-Manage-Computer-Systems/dp/1718501188) by Marianne Bellotti\n",
    "code": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var f=(o,e)=>()=>(e||o((e={exports:{}}).exports,e),e.exports),w=(o,e)=>{for(var i in e)a(o,i,{get:e[i],enumerable:!0})},r=(o,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let n of m(e))!g.call(o,n)&&n!==i&&a(o,n,{get:()=>e[n],enumerable:!(s=u(e,n))||s.enumerable});return o};var y=(o,e,i)=>(i=o!=null?d(p(o)):{},r(e||!o||!o.__esModule?a(i,\"default\",{value:o,enumerable:!0}):i,o)),b=o=>r(a({},\"__esModule\",{value:!0}),o);var h=f((_,l)=>{l.exports=_jsx_runtime});var I={};w(I,{default:()=>x,frontmatter:()=>k});var t=y(h()),k={title:\"Leadership Exercises\",excerpt:\"A similar but inverse brainstorming exercise to the critical factors exercise is asking your team to play saboteur. If you wanted to guarantee that the project fails, what would you do? How can you achieve the worst possible outcome? Once this list is generated, you know what to look out for.\",coverImage:\"/assets/blog/img/billg.jpeg\",date:\"2023-01-05\",published:!1,author:{name:\"Dan Stroot\",picture:\"/assets/blog/authors/dan.jpeg\"},ogImage:{url:\"/assets/blog/img/billg.jpeg\"},seoURL:null};function c(o){let e=Object.assign({ul:\"ul\",li:\"li\",p:\"p\",strong:\"strong\",a:\"a\",h3:\"h3\"},o.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Saboteur\"}),\" A similar but inverse brainstorming exercise to the critical factors exercise is asking your team to play saboteur. If you wanted to guarantee that the project fails, what would you do? How can you achieve the worst possible outcome? Once this list is generated, you know what to look out for. The team discusses if there are any behaviors either internally or from external partners that are close to items on the saboteur list.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"How far can you go?\"}),\" I have talked about the value of making something 5 percent, 10 percent, or 20 percent better. This exercise asks team members to map out how much they can do on their own to move the project toward achieving its goals. What are they empowered to do? What blockers do they foresee, and when do they think they become relevant? How far can they go without approval, and who needs to grant that approval when the time comes?\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Betting\"}),\" Probabilistic outcome-based decision-making is better known as betting. It\\u2019s a great technique for decisions that are hard to undo, have potentially serious impacts, and are vulnerable to confirmation bias. I tend to use it a lot to run hiring committees, for example. Firing people is difficult; making a wrong hire can destroy a team\\u2019s productivity, and people often see what they want to see in potential candidates. This is how it works: as a group, we make a list of potential outcomes from the decision that needs to be made. Outcomes like \\u201CWe\\u2019re able to scale 2\\xD7 by doing this\\u201D or \\u201CWe will implement this new feature by this date.\\u201D You can mix both positive and negative outcomes if you like, but I find the conversation usually goes better if the list of outcomes is either all positive or all negative. Then team members place bets as to whether the outcome will come true. Traditionally, this exercise is run with imaginary money. Depending on the specific decision to be made, I sometimes ask them to bet with hours of their time instead of money.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"Slam dunk or guaranteed to fail?\"}),\" We must be clear whether we are trying to ensure success or avoid failure. Counterintuitively, When success seems certain, we gravitate toward more conservative, risk-averse solutions. When failure seems more likely, we switch mentalities completely. We go bold, take more risks. We try the hail mary pass. If we are judging odds correctly, this behavior makes sense. We rarely judge odds correctly.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"In-Group/Out-Group\"}),\" Who needs to communicate with whom may not be clear when you get started. This is an exercise I use to help reveal where the communication pathways are or should be. I give everyone a piece of paper with a circle drawn on it. The instructions are to write down the names of the people whose work they are dependent on inside the circle (in other words, \\u201CIf this person fell behind schedule, would you be blocked?\\u201D) and the names of people who give them advice outside the circle. If there\\u2019s no one specific person, they can write a group or team name or a specific role, like frontend engineer, instead. Then I compare the results across each team. In theory, those inside the circle are people with whom the engineer needs to collaborate closely. Each result should resemble that engineer\\u2019s actual team with perhaps a few additions or deletions based on current issues playing out. Outside the circle should be all the other teams. Experts not on the team should be seen as interchangeable with other experts in the same field. Small variations will exist from person to person, but if the visualizations that people produce don\\u2019t look like their current teams, you know your existing structure does not meet your communication needs.\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"To summarize, people\\u2019s perception of risk is not static, and it\\u2019s often not connected to the probability of failure so much as it is the potential feeling of rejection and condemnation from their peers. Since social pressures and rewards are better incentives than money and promotions, you can improve your odds of success by learning how to manipulate an organization\\u2019s perception of risk. The first task is to understand what behaviors get individuals within an organization acknowledged. Those are the activities that people will ultimately prioritize.\"}),`\n`]}),`\n`,(0,t.jsx)(e.li,{}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:[\"In terms of defining success, success criteria and diagnosis-policy-actions have different strengths and weaknesses. Success criteria connects modernization activities more directly to the value add they can demonstrate. It affords more flexibility in exactly what the team does by not prescribing a specific approach or set of tasks. It is an excellent exercise to run with bosses and any other oversight forces that might be inclined to micromanage a team. How to do something should be the decision of the people actually entrusted to do it. (\",(0,t.jsx)(e.a,{href:\"https://readwise.io/to_kindle?action=open&asin=B08CTFY4JP&location=3430\",children:\"Location\\xA03430\"}),\")\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:[\"Just as humans are terrible judges of probability, we\\u2019re also terrible judges of time. What feels like ages might only be a few days. By marking time, we can realign our emotional perception of how things are going. Find some way to record what you worked on and when so the team can easily go back and get a full picture of how far they\\u2019ve come. (\",(0,t.jsx)(e.a,{href:\"https://readwise.io/to_kindle?action=open&asin=B08CTFY4JP&location=3454\",children:\"Location\\xA03454\"}),\")\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:\"failure as bad luck and success as skill\"}),\" Remember that we tend to think of failure as bad luck and success as skill. We do postmortems on failure because we\\u2019re likely to see them as complex scenarios with a variety of contributing factors. We assume that success happens for simple, straightforward reasons. In reality, success is no more or less complex than failure. You should use the same methodology to learn from success that you use to learn from failure. Your timeline in a postmortem for success should be built around these questions: How did the organization execute on the original strategy, how did the strategy change, when did those changes happen, and what triggered them? Now for the key questions. What went well? What could have gone better? Where did you get lucky?\"]}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsxs)(e.p,{children:[\"Although this visual model might just look like an illustration, we can actually program it for real and use it to explore how our team manages its work in various conditions. Two tools popular with system thinkers for these kinds of models are Loopy (\",(0,t.jsx)(e.a,{href:\"https://ncase.me/loopy/\",children:\"https://ncase.me/loopy/\"}),\"). and InsightMaker (\",(0,t.jsx)(e.a,{href:\"https://insightmaker.com/\",children:\"https://insightmaker.com/\"}),\"). Both are free and open source, and both allow you to experiment with different configurations and interactions. (\",(0,t.jsx)(e.a,{href:\"https://readwise.io/to_kindle?action=open&asin=B08CTFY4JP&location=3868\",children:\"Location\\xA03868\"}),\")\"]}),`\n`]}),`\n`,(0,t.jsx)(e.li,{}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"Organizations choose to keep the bus moving as fast as possible because they can\\u2019t see all the feedback loops. Shipping new code gets attention, while technical debt accrues silently and without fanfare. It\\u2019s not the age of a system that causes it to fail, but the pressure of what the organization has forgotten about it slowly building toward an explosion.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{id:\"references\",children:\"References\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://www.thoughtworks.com/en-au/insights/blog/legacy-modernization/enterprise-modernization-insurers\",children:\"Enterprise modernization for insurers\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://media.bain.com/Images/BAIN_BRIEF_For_insurance_companies_the_day_of_digital_reckoning.pdf\",children:\"For insurance companies - the day of digital reckoning\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/\",children:\"Things You Should Never Do, Part I\"})}),`\n`,(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:\"https://martinfowler.com/articles/patterns-legacy-displacement/\",children:\"Patterns of Legacy Displacement\"})}),`\n`,(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.a,{href:\"https://www.amazon.com/Kill-Fire-Manage-Computer-Systems/dp/1718501188\",children:\"Kill It with Fire: Manage Aging Computer Systems (and Future Proof Modern Ones)\"}),\" by Marianne Bellotti\"]}),`\n`]})]})}function v(o={}){let{wrapper:e}=o.components||{};return e?(0,t.jsx)(e,Object.assign({},o,{children:(0,t.jsx)(c,o)})):c(o)}var x=v;return b(I);})();\n;return Component;"
  },
  "_id": "posts/2023-01-12-leadership-exercises.mdx",
  "_raw": {
    "sourceFilePath": "posts/2023-01-12-leadership-exercises.mdx",
    "sourceFileName": "2023-01-12-leadership-exercises.mdx",
    "sourceFileDir": "posts",
    "contentType": "mdx",
    "flattenedPath": "posts/2023-01-12-leadership-exercises"
  },
  "type": "Post",
  "slug": "/posts/2023-01-12-leadership-exercises",
  "slugAsParams": "2023-01-12-leadership-exercises",
  "stats": {
    "text": "6 min read",
    "minutes": 5.93,
    "time": 355800,
    "words": 1186
  }
}