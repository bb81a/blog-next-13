{
  "title": "Virtual Machines vs Containers",
  "excerpt": "Personally I think the next wave of infrastructure efficiency will be driven by Linux container technology (LinuX Containers = LXC). The LXC container approach does not require a hypervisor - instead you run isolated \"containers\" on a Linux host. LXC provides operating system-level virtualization, but instead of creating a full-fledged virtual machine LXC containers leverage cgroups (control groups) to completely isolate the operating environment, including process trees, network, user ids and mounted file systems. This work was started by engineers at Google and in late 2007 it was merged into kernel version 2.6.24.",
  "coverImage": "/assets/blog/img/docker.png",
  "date": "2014-05-05T00:00:00.000Z",
  "published": true,
  "author": {
    "name": "Dan Stroot",
    "picture": "/assets/blog/authors/dan.jpeg",
    "type": "Author",
    "_raw": {}
  },
  "ogImage": {
    "url": "/assets/blog/img/docker.png",
    "type": "OGImage",
    "_raw": {}
  },
  "seoURL": "https://danstroot.com/2014/05/04/virtual-machines-vs-containers/",
  "body": {
    "raw": "\nThree driving forces of infrastructure efficiency in a large, distributed environment were:\n\n- **Data center consolidation** _(KPI: How many DCs do you have?)_\n- **Host virtualization** _(KPI: what percentage of your servers are virtual?)_\n- **\"Cloud\" in its various forms** _(KPI: How many servers are you still running?)_\n\nAssuming you have been aggressive you may not have any data centers left. You may be buying services rather than servers, and/or all of your remaining machines might be virtualized and hosted in someone else's data center. Now what?\n\n### Where is future infrastructure efficiency going to come from?\n\nPersonally I think the next wave of infrastructure efficiency will be driven by Linux container technology (LinuX Containers = LXC). The LXC container approach does **not** require a hypervisor - instead you run isolated \"containers\" on a Linux host.\n\nLXC provides operating system-level virtualization, but instead of creating a full-fledged virtual machine LXC containers leverage cgroups (control groups) to completely isolate application's view of the operating environment, including process trees, network, user ids and mounted file systems. Cgroups are a Linux kernel feature to limit, account, and isolate resource usage (CPU, memory, disk I/O, etc.) of process groups.\n\nThis work was started by engineers at Google and in late 2007 it was merged into kernel version 2.6.24. LXC also relies on other kinds of namespace-isolation functionality, which have been developed and integrated into the mainline Linux kernel since then. It looks something like this:\n\n![Docker](https://danstroot.imgix.net/assets/blog/img/dockervsvm.png)\n\n### Is LXC Technology Really Better?\n\nHere are some of the major benefits of Linux Containers from my perspective:\n\n#### Fast\n\n- Runtime performance at near bare metal speeds (typically 97+ percent of bare metal).\n- Management operations (boot, stop, start, reboot, etc.) in seconds or milliseconds.\n\n#### Agile\n\n- VM-like agility -- it's still \"virtualization\".\n- With VMs we often touted our ability to ship a machine \"over the wire\" since a virtual machine is basically just a large file. It also allows better business recovery scenarios where I can have a snapshot of my production machine(s) copied to a different datacenter at regular intervals. Guess what? LXC containers are an order of magnitude smaller!\n- Developers can essentially use the exact same containers as those deployed into production.\n\n#### Lightweight\n\n- Just enough Operating System (JeOS); include only what you need reducing image and container bloat.\n- Minimal per container penalty which equates to greater density and hence greater returns on existing assets -- imagine packing 100s or 1000s of containers on a single host node!\n\n#### Inexpensive\n\n- Open source -- free -- lower TCO.\n- Supported with out-of-the-box modern Linux kernels.\n- LXC hosting likely to drive the next wave of cloud products.\n\n#### Ecosystem\n\n- Growing in popularity -- just checkout the google trends for docker or LXC.\n- Vibrant community and numerous 3rd party applications (1000s of prebuilt images on docker index and 100s of open source apps on GitHub or other public sources).\n\n#### Benchmarks\n\n- Average boot time: LXC 1.5x faster\n- Average reboot time: LXC 18.9x faster\n- LXC CPU growth 26x lower than VM (per machine)\n- LXC Memory group 3x lower than VM (per machine)\n- LXC images 3.2x smaller than VM\n\n### Summary\n\nThe next wave of server density is likely to be driven by LXC technology instead of traditional VM technology. This technology may also increase further an organizations agility, developer productivity and even business continuity. However, LXC technology is not yet as mature or \"manageable\" as VM technology, but tools like Docker are developing quickly.\n\n_Sources:_\n\n- [KVM and Docker LXC Benchmarking with OpenStack](http://bodenr.blogspot.com/2014/05/kvm-and-docker-lxc-benchmarking-with.html)\n",
    "code": "var Component=(()=>{var un=Object.create;var L=Object.defineProperty;var dn=Object.getOwnPropertyDescriptor;var cn=Object.getOwnPropertyNames;var fn=Object.getPrototypeOf,mn=Object.prototype.hasOwnProperty;var B=(d,r)=>()=>(r||d((r={exports:{}}).exports,r),r.exports),bn=(d,r)=>{for(var h in r)L(d,h,{get:r[h],enumerable:!0})},ye=(d,r,h,x)=>{if(r&&typeof r==\"object\"||typeof r==\"function\")for(let v of cn(r))!mn.call(d,v)&&v!==h&&L(d,v,{get:()=>r[v],enumerable:!(x=dn(r,v))||x.enumerable});return d};var pn=(d,r,h)=>(h=d!=null?un(fn(d)):{},ye(r||!d||!d.__esModule?L(h,\"default\",{value:d,enumerable:!0}):h,d)),hn=d=>ye(L({},\"__esModule\",{value:!0}),d);var Ce=B((Nn,Ne)=>{Ne.exports=React});var Te=B(G=>{\"use strict\";(function(){\"use strict\";var d=Ce(),r=Symbol.for(\"react.element\"),h=Symbol.for(\"react.portal\"),x=Symbol.for(\"react.fragment\"),v=Symbol.for(\"react.strict_mode\"),q=Symbol.for(\"react.profiler\"),H=Symbol.for(\"react.provider\"),K=Symbol.for(\"react.context\"),R=Symbol.for(\"react.forward_ref\"),D=Symbol.for(\"react.suspense\"),F=Symbol.for(\"react.suspense_list\"),V=Symbol.for(\"react.memo\"),I=Symbol.for(\"react.lazy\"),Ve=Symbol.for(\"react.offscreen\"),J=Symbol.iterator,ke=\"@@iterator\";function Oe(e){if(e===null||typeof e!=\"object\")return null;var n=J&&e[J]||e[ke];return typeof n==\"function\"?n:null}var N=d.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function m(e){{for(var n=arguments.length,t=new Array(n>1?n-1:0),i=1;i<n;i++)t[i-1]=arguments[i];Pe(\"error\",e,t)}}function Pe(e,n,t){{var i=N.ReactDebugCurrentFrame,s=i.getStackAddendum();s!==\"\"&&(n+=\"%s\",t=t.concat([s]));var u=t.map(function(l){return String(l)});u.unshift(\"Warning: \"+n),Function.prototype.apply.call(console[e],console,u)}}var Se=!1,je=!1,Le=!1,De=!1,Fe=!1,Z;Z=Symbol.for(\"react.module.reference\");function Ie(e){return!!(typeof e==\"string\"||typeof e==\"function\"||e===x||e===q||Fe||e===v||e===D||e===F||De||e===Ve||Se||je||Le||typeof e==\"object\"&&e!==null&&(e.$$typeof===I||e.$$typeof===V||e.$$typeof===H||e.$$typeof===K||e.$$typeof===R||e.$$typeof===Z||e.getModuleId!==void 0))}function Ae(e,n,t){var i=e.displayName;if(i)return i;var s=n.displayName||n.name||\"\";return s!==\"\"?t+\"(\"+s+\")\":t}function Q(e){return e.displayName||\"Context\"}function _(e){if(e==null)return null;if(typeof e.tag==\"number\"&&m(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"),typeof e==\"function\")return e.displayName||e.name||null;if(typeof e==\"string\")return e;switch(e){case x:return\"Fragment\";case h:return\"Portal\";case q:return\"Profiler\";case v:return\"StrictMode\";case D:return\"Suspense\";case F:return\"SuspenseList\"}if(typeof e==\"object\")switch(e.$$typeof){case K:var n=e;return Q(n)+\".Consumer\";case H:var t=e;return Q(t._context)+\".Provider\";case R:return Ae(e,e.render,\"ForwardRef\");case V:var i=e.displayName||null;return i!==null?i:_(e.type)||\"Memo\";case I:{var s=e,u=s._payload,l=s._init;try{return _(l(u))}catch{return null}}}return null}var y=Object.assign,E=0,ee,ne,re,te,oe,ie,ae;function le(){}le.__reactDisabledLog=!0;function Me(){{if(E===0){ee=console.log,ne=console.info,re=console.warn,te=console.error,oe=console.group,ie=console.groupCollapsed,ae=console.groupEnd;var e={configurable:!0,enumerable:!0,value:le,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}E++}}function Xe(){{if(E--,E===0){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:y({},e,{value:ee}),info:y({},e,{value:ne}),warn:y({},e,{value:re}),error:y({},e,{value:te}),group:y({},e,{value:oe}),groupCollapsed:y({},e,{value:ie}),groupEnd:y({},e,{value:ae})})}E<0&&m(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\")}}var A=N.ReactCurrentDispatcher,M;function k(e,n,t){{if(M===void 0)try{throw Error()}catch(s){var i=s.stack.trim().match(/\\n( *(at )?)/);M=i&&i[1]||\"\"}return`\n`+M+e}}var X=!1,O;{var We=typeof WeakMap==\"function\"?WeakMap:Map;O=new We}function se(e,n){if(!e||X)return\"\";{var t=O.get(e);if(t!==void 0)return t}var i;X=!0;var s=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var u;u=A.current,A.current=null,Me();try{if(n){var l=function(){throw Error()};if(Object.defineProperty(l.prototype,\"props\",{set:function(){throw Error()}}),typeof Reflect==\"object\"&&Reflect.construct){try{Reflect.construct(l,[])}catch(g){i=g}Reflect.construct(e,[],l)}else{try{l.call()}catch(g){i=g}e.call(l.prototype)}}else{try{throw Error()}catch(g){i=g}e()}}catch(g){if(g&&i&&typeof g.stack==\"string\"){for(var a=g.stack.split(`\n`),b=i.stack.split(`\n`),c=a.length-1,f=b.length-1;c>=1&&f>=0&&a[c]!==b[f];)f--;for(;c>=1&&f>=0;c--,f--)if(a[c]!==b[f]){if(c!==1||f!==1)do if(c--,f--,f<0||a[c]!==b[f]){var p=`\n`+a[c].replace(\" at new \",\" at \");return e.displayName&&p.includes(\"<anonymous>\")&&(p=p.replace(\"<anonymous>\",e.displayName)),typeof e==\"function\"&&O.set(e,p),p}while(c>=1&&f>=0);break}}}finally{X=!1,A.current=u,Xe(),Error.prepareStackTrace=s}var T=e?e.displayName||e.name:\"\",xe=T?k(T):\"\";return typeof e==\"function\"&&O.set(e,xe),xe}function Ye(e,n,t){return se(e,!1)}function $e(e){var n=e.prototype;return!!(n&&n.isReactComponent)}function P(e,n,t){if(e==null)return\"\";if(typeof e==\"function\")return se(e,$e(e));if(typeof e==\"string\")return k(e);switch(e){case D:return k(\"Suspense\");case F:return k(\"SuspenseList\")}if(typeof e==\"object\")switch(e.$$typeof){case R:return Ye(e.render);case V:return P(e.type,n,t);case I:{var i=e,s=i._payload,u=i._init;try{return P(u(s),n,t)}catch{}}}return\"\"}var S=Object.prototype.hasOwnProperty,ue={},de=N.ReactDebugCurrentFrame;function j(e){if(e){var n=e._owner,t=P(e.type,e._source,n?n.type:null);de.setExtraStackFrame(t)}else de.setExtraStackFrame(null)}function Ue(e,n,t,i,s){{var u=Function.call.bind(S);for(var l in e)if(u(e,l)){var a=void 0;try{if(typeof e[l]!=\"function\"){var b=Error((i||\"React class\")+\": \"+t+\" type `\"+l+\"` is invalid; it must be a function, usually from the `prop-types` package, but received `\"+typeof e[l]+\"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");throw b.name=\"Invariant Violation\",b}a=e[l](n,l,i,t,null,\"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\")}catch(c){a=c}a&&!(a instanceof Error)&&(j(s),m(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\",i||\"React class\",t,l,typeof a),j(null)),a instanceof Error&&!(a.message in ue)&&(ue[a.message]=!0,j(s),m(\"Failed %s type: %s\",t,a.message),j(null))}}}var ze=Array.isArray;function W(e){return ze(e)}function Be(e){{var n=typeof Symbol==\"function\"&&Symbol.toStringTag,t=n&&e[Symbol.toStringTag]||e.constructor.name||\"Object\";return t}}function Ge(e){try{return ce(e),!1}catch{return!0}}function ce(e){return\"\"+e}function fe(e){if(Ge(e))return m(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\",Be(e)),ce(e)}var w=N.ReactCurrentOwner,qe={key:!0,ref:!0,__self:!0,__source:!0},me,be,Y;Y={};function He(e){if(S.call(e,\"ref\")){var n=Object.getOwnPropertyDescriptor(e,\"ref\").get;if(n&&n.isReactWarning)return!1}return e.ref!==void 0}function Ke(e){if(S.call(e,\"key\")){var n=Object.getOwnPropertyDescriptor(e,\"key\").get;if(n&&n.isReactWarning)return!1}return e.key!==void 0}function Je(e,n){if(typeof e.ref==\"string\"&&w.current&&n&&w.current.stateNode!==n){var t=_(w.current.type);Y[t]||(m('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',_(w.current.type),e.ref),Y[t]=!0)}}function Ze(e,n){{var t=function(){me||(me=!0,m(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",n))};t.isReactWarning=!0,Object.defineProperty(e,\"key\",{get:t,configurable:!0})}}function Qe(e,n){{var t=function(){be||(be=!0,m(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",n))};t.isReactWarning=!0,Object.defineProperty(e,\"ref\",{get:t,configurable:!0})}}var en=function(e,n,t,i,s,u,l){var a={$$typeof:r,type:e,key:n,ref:t,props:l,_owner:u};return a._store={},Object.defineProperty(a._store,\"validated\",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(a,\"_self\",{configurable:!1,enumerable:!1,writable:!1,value:i}),Object.defineProperty(a,\"_source\",{configurable:!1,enumerable:!1,writable:!1,value:s}),Object.freeze&&(Object.freeze(a.props),Object.freeze(a)),a};function nn(e,n,t,i,s){{var u,l={},a=null,b=null;t!==void 0&&(fe(t),a=\"\"+t),Ke(n)&&(fe(n.key),a=\"\"+n.key),He(n)&&(b=n.ref,Je(n,s));for(u in n)S.call(n,u)&&!qe.hasOwnProperty(u)&&(l[u]=n[u]);if(e&&e.defaultProps){var c=e.defaultProps;for(u in c)l[u]===void 0&&(l[u]=c[u])}if(a||b){var f=typeof e==\"function\"?e.displayName||e.name||\"Unknown\":e;a&&Ze(l,f),b&&Qe(l,f)}return en(e,a,b,s,i,w.current,l)}}var $=N.ReactCurrentOwner,pe=N.ReactDebugCurrentFrame;function C(e){if(e){var n=e._owner,t=P(e.type,e._source,n?n.type:null);pe.setExtraStackFrame(t)}else pe.setExtraStackFrame(null)}var U;U=!1;function z(e){return typeof e==\"object\"&&e!==null&&e.$$typeof===r}function he(){{if($.current){var e=_($.current.type);if(e)return`\n\nCheck the render method of \\``+e+\"`.\"}return\"\"}}function rn(e){{if(e!==void 0){var n=e.fileName.replace(/^.*[\\\\\\/]/,\"\"),t=e.lineNumber;return`\n\nCheck your code at `+n+\":\"+t+\".\"}return\"\"}}var _e={};function tn(e){{var n=he();if(!n){var t=typeof e==\"string\"?e:e.displayName||e.name;t&&(n=`\n\nCheck the top-level render call using <`+t+\">.\")}return n}}function ge(e,n){{if(!e._store||e._store.validated||e.key!=null)return;e._store.validated=!0;var t=tn(n);if(_e[t])return;_e[t]=!0;var i=\"\";e&&e._owner&&e._owner!==$.current&&(i=\" It was passed a child from \"+_(e._owner.type)+\".\"),C(e),m('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',t,i),C(null)}}function ve(e,n){{if(typeof e!=\"object\")return;if(W(e))for(var t=0;t<e.length;t++){var i=e[t];z(i)&&ge(i,n)}else if(z(e))e._store&&(e._store.validated=!0);else if(e){var s=Oe(e);if(typeof s==\"function\"&&s!==e.entries)for(var u=s.call(e),l;!(l=u.next()).done;)z(l.value)&&ge(l.value,n)}}}function on(e){{var n=e.type;if(n==null||typeof n==\"string\")return;var t;if(typeof n==\"function\")t=n.propTypes;else if(typeof n==\"object\"&&(n.$$typeof===R||n.$$typeof===V))t=n.propTypes;else return;if(t){var i=_(n);Ue(t,e.props,\"prop\",i,e)}else if(n.PropTypes!==void 0&&!U){U=!0;var s=_(n);m(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\",s||\"Unknown\")}typeof n.getDefaultProps==\"function\"&&!n.getDefaultProps.isReactClassApproved&&m(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\")}}function an(e){{for(var n=Object.keys(e.props),t=0;t<n.length;t++){var i=n[t];if(i!==\"children\"&&i!==\"key\"){C(e),m(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\",i),C(null);break}}e.ref!==null&&(C(e),m(\"Invalid attribute `ref` supplied to `React.Fragment`.\"),C(null))}}function ln(e,n,t,i,s,u){{var l=Ie(e);if(!l){var a=\"\";(e===void 0||typeof e==\"object\"&&e!==null&&Object.keys(e).length===0)&&(a+=\" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");var b=rn(s);b?a+=b:a+=he();var c;e===null?c=\"null\":W(e)?c=\"array\":e!==void 0&&e.$$typeof===r?(c=\"<\"+(_(e.type)||\"Unknown\")+\" />\",a=\" Did you accidentally export a JSX literal instead of a component?\"):c=typeof e,m(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\",c,a)}var f=nn(e,n,t,s,u);if(f==null)return f;if(l){var p=n.children;if(p!==void 0)if(i)if(W(p)){for(var T=0;T<p.length;T++)ve(p[T],e);Object.freeze&&Object.freeze(p)}else m(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");else ve(p,e)}return e===x?an(f):on(f),f}}var sn=ln;G.Fragment=x,G.jsxDEV=sn})()});var we=B((Tn,Ee)=>{\"use strict\";Ee.exports=Te()});var xn={};bn(xn,{default:()=>vn,frontmatter:()=>_n});var o=pn(we()),_n={title:\"Virtual Machines vs Containers\",excerpt:'Personally I think the next wave of infrastructure efficiency will be driven by Linux container technology (LinuX Containers = LXC). The LXC container approach does not require a hypervisor - instead you run isolated \"containers\" on a Linux host. LXC provides operating system-level virtualization, but instead of creating a full-fledged virtual machine LXC containers leverage cgroups (control groups) to completely isolate the operating environment, including process trees, network, user ids and mounted file systems. This work was started by engineers at Google and in late 2007 it was merged into kernel version 2.6.24.',coverImage:\"/assets/blog/img/docker.png\",date:\"2014-05-05\",published:!0,author:{name:\"Dan Stroot\",picture:\"/assets/blog/authors/dan.jpeg\"},ogImage:{url:\"/assets/blog/img/docker.png\"},seoURL:\"https://danstroot.com/2014/05/04/virtual-machines-vs-containers/\"};function Re(d){let r=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",strong:\"strong\",em:\"em\",h3:\"h3\",img:\"img\",h4:\"h4\",a:\"a\"},d.components);return(0,o.jsxDEV)(o.Fragment,{children:[(0,o.jsxDEV)(r.p,{children:\"Three driving forces of infrastructure efficiency in a large, distributed environment were:\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:23,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.ul,{children:[`\n`,(0,o.jsxDEV)(r.li,{children:[(0,o.jsxDEV)(r.strong,{children:\"Data center consolidation\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:25,columnNumber:3},this),\" \",(0,o.jsxDEV)(r.em,{children:\"(KPI: How many DCs do you have?)\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:25,columnNumber:33},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:25,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:[(0,o.jsxDEV)(r.strong,{children:\"Host virtualization\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:26,columnNumber:3},this),\" \",(0,o.jsxDEV)(r.em,{children:\"(KPI: what percentage of your servers are virtual?)\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:26,columnNumber:27},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:26,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:[(0,o.jsxDEV)(r.strong,{children:'\"Cloud\" in its various forms'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:27,columnNumber:3},this),\" \",(0,o.jsxDEV)(r.em,{children:\"(KPI: How many servers are you still running?)\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:27,columnNumber:36},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:27,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:25,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:\"Assuming you have been aggressive you may not have any data centers left. You may be buying services rather than servers, and/or all of your remaining machines might be virtualized and hosted in someone else's data center. Now what?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:29,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.h3,{id:\"where-is-future-infrastructure-efficiency-going-to-come-from\",children:\"Where is future infrastructure efficiency going to come from?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:31,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:[\"Personally I think the next wave of infrastructure efficiency will be driven by Linux container technology (LinuX Containers = LXC). The LXC container approach does \",(0,o.jsxDEV)(r.strong,{children:\"not\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:33,columnNumber:166},this),' require a hypervisor - instead you run isolated \"containers\" on a Linux host.']},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:33,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:\"LXC provides operating system-level virtualization, but instead of creating a full-fledged virtual machine LXC containers leverage cgroups (control groups) to completely isolate application's view of the operating environment, including process trees, network, user ids and mounted file systems. Cgroups are a Linux kernel feature to limit, account, and isolate resource usage (CPU, memory, disk I/O, etc.) of process groups.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:35,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:\"This work was started by engineers at Google and in late 2007 it was merged into kernel version 2.6.24. LXC also relies on other kinds of namespace-isolation functionality, which have been developed and integrated into the mainline Linux kernel since then. It looks something like this:\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:37,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:(0,o.jsxDEV)(r.img,{src:\"https://danstroot.imgix.net/assets/blog/img/dockervsvm.png\",alt:\"Docker\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:39,columnNumber:1},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:39,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.h3,{id:\"is-lxc-technology-really-better\",children:\"Is LXC Technology Really Better?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:41,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:\"Here are some of the major benefits of Linux Containers from my perspective:\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:43,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.h4,{id:\"fast\",children:\"Fast\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:45,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.ul,{children:[`\n`,(0,o.jsxDEV)(r.li,{children:\"Runtime performance at near bare metal speeds (typically 97+ percent of bare metal).\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:47,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:\"Management operations (boot, stop, start, reboot, etc.) in seconds or milliseconds.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:48,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:47,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.h4,{id:\"agile\",children:\"Agile\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:50,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.ul,{children:[`\n`,(0,o.jsxDEV)(r.li,{children:`VM-like agility -- it's still \"virtualization\".`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:52,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:'With VMs we often touted our ability to ship a machine \"over the wire\" since a virtual machine is basically just a large file. It also allows better business recovery scenarios where I can have a snapshot of my production machine(s) copied to a different datacenter at regular intervals. Guess what? LXC containers are an order of magnitude smaller!'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:53,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:\"Developers can essentially use the exact same containers as those deployed into production.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:54,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:52,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.h4,{id:\"lightweight\",children:\"Lightweight\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:56,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.ul,{children:[`\n`,(0,o.jsxDEV)(r.li,{children:\"Just enough Operating System (JeOS); include only what you need reducing image and container bloat.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:58,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:\"Minimal per container penalty which equates to greater density and hence greater returns on existing assets -- imagine packing 100s or 1000s of containers on a single host node!\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:59,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:58,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.h4,{id:\"inexpensive\",children:\"Inexpensive\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:61,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.ul,{children:[`\n`,(0,o.jsxDEV)(r.li,{children:\"Open source -- free -- lower TCO.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:63,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:\"Supported with out-of-the-box modern Linux kernels.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:64,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:\"LXC hosting likely to drive the next wave of cloud products.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:65,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:63,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.h4,{id:\"ecosystem\",children:\"Ecosystem\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:67,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.ul,{children:[`\n`,(0,o.jsxDEV)(r.li,{children:\"Growing in popularity -- just checkout the google trends for docker or LXC.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:69,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:\"Vibrant community and numerous 3rd party applications (1000s of prebuilt images on docker index and 100s of open source apps on GitHub or other public sources).\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:70,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:69,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.h4,{id:\"benchmarks\",children:\"Benchmarks\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:72,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.ul,{children:[`\n`,(0,o.jsxDEV)(r.li,{children:\"Average boot time: LXC 1.5x faster\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:74,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:\"Average reboot time: LXC 18.9x faster\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:75,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:\"LXC CPU growth 26x lower than VM (per machine)\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:76,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:\"LXC Memory group 3x lower than VM (per machine)\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:77,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.li,{children:\"LXC images 3.2x smaller than VM\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:78,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:74,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.h3,{id:\"summary\",children:\"Summary\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:80,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:'The next wave of server density is likely to be driven by LXC technology instead of traditional VM technology. This technology may also increase further an organizations agility, developer productivity and even business continuity. However, LXC technology is not yet as mature or \"manageable\" as VM technology, but tools like Docker are developing quickly.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:82,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.p,{children:(0,o.jsxDEV)(r.em,{children:\"Sources:\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:84,columnNumber:1},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:84,columnNumber:1},this),`\n`,(0,o.jsxDEV)(r.ul,{children:[`\n`,(0,o.jsxDEV)(r.li,{children:(0,o.jsxDEV)(r.a,{href:\"http://bodenr.blogspot.com/2014/05/kvm-and-docker-lxc-benchmarking-with.html\",children:\"KVM and Docker LXC Benchmarking with OpenStack\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:86,columnNumber:3},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:86,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:86,columnNumber:1},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\",lineNumber:1,columnNumber:1},this)}function gn(d={}){let{wrapper:r}=d.components||{};return r?(0,o.jsxDEV)(r,Object.assign({},d,{children:(0,o.jsxDEV)(Re,d,void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\"},this)}),void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9718c69f-67bf-4b62-b280-2197a50d2e5d.mdx\"},this):Re(d)}var vn=gn;return hn(xn);})();\n/*! Bundled license information:\n\nreact/cjs/react-jsx-dev-runtime.development.js:\n  (**\n   * @license React\n   * react-jsx-dev-runtime.development.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n;return Component;"
  },
  "_id": "posts/2014-05-05-virtual-machines-vs-containers.mdx",
  "_raw": {
    "sourceFilePath": "posts/2014-05-05-virtual-machines-vs-containers.mdx",
    "sourceFileName": "2014-05-05-virtual-machines-vs-containers.mdx",
    "sourceFileDir": "posts",
    "contentType": "mdx",
    "flattenedPath": "posts/2014-05-05-virtual-machines-vs-containers"
  },
  "type": "Post",
  "slug": "/posts/2014-05-05-virtual-machines-vs-containers",
  "slugAsParams": "2014-05-05-virtual-machines-vs-containers",
  "stats": {
    "text": "3 min read",
    "minutes": 3,
    "time": 180000,
    "words": 600
  }
}