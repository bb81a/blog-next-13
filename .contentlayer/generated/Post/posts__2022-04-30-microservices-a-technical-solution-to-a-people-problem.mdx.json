{
  "title": "Microservices: A Technical Solution to a People Problem?",
  "excerpt": "Microservices exist because teams want to make their own choices, dislike code review or overbearing ‘architects’ above them, and to a lesser extent want to try different and newer languages. This feels good, but...",
  "coverImage": "/assets/blog/img/switchboard.jpg",
  "date": "2022-04-30T00:00:00.000Z",
  "published": true,
  "author": {
    "name": "Dan Stroot",
    "picture": "/assets/blog/authors/dan.jpeg",
    "type": "Author",
    "_raw": {}
  },
  "ogImage": {
    "url": "/assets/blog/img/switchboard.png",
    "type": "OGImage",
    "_raw": {}
  },
  "seoURL": null,
  "body": {
    "raw": "\n### A Simple Microservice Definition\n\nA microservice is generally defined as a small, loosely coupled, distributed service. Each service is part of a broader microservices ecosystem/architecture, comprising a set of microservices that operate together to solve a common goal. A collection of microservices can be regarded as a system.\n\n### Why use Microservices?\n\nMicroservices architectures were adopted for very specific reasons/needs such as scalability, modularity, or separation of concerns. It shifted the complexity \"up the stack\" by making the services themselves [potentially] simpler and easier to maintain and scale for the price of more complexity overall.\n\nTeams were given the freedom [in some cases] to choose their own micro-architecture for each microservice. Teams wanted the freedom to be able to pick whatever language, database, and library they desired. For some, this kind of autonomy was energizing. It led to more innovation, faster development time, and shorter release cycles - for a while.\n\nAnother principle of microservices is that the team that built the service supports the service. That is a win early on as the service is being built, because support is non-existent. The team can \"move fast and break things\". As the service goes into production and matures, the team eventually slows down because now they must support the service and maintain it.\n\n### Challenges with Microservices\n\nSome organizations say microservices allow them to release inter-team friction and break inertia by letting each team operate independently and keep their microservices small and elegant. This is true, but the _overall_ architecture is quite the opposite.\n\nSometimes microservices exist because teams dislike code review, or overbearing ‘architects’ above them telling them what to do. While some people may realize there is nothing smart about this architecture choice for the whole system, many developers are content to care only about their team -- and not the company or application stack as a whole. For them autonomy is more important.\n\n\"Doing microservices\" became validation for organizations that lack conviction, or a thesis, about how their architecture _should_ be. This ecology of interacting parties, each acting in their own interest for the common good not only sounds utopian, but speaks to an underlying, tacit belief that the emergent mesh of services will approximate the latent natural architecture of the domain. The backlash against microservices is partly because that simply isn't true - instead microservices approximate the natural contours of the technology organization's **organizational model**, not the domain. This is known as \"[Conway's law](https://en.m.wikipedia.org/wiki/Conway's_law)\":\n\n> Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.\n>\n> <cite>&mdash; Melvin E. Conway</cite>\n\nClearly one of the reasons why we got here as an industry is we didn’t want to (or couldn't) communicate well across teams and organizational structures. Transitioning our computer architectures from well-architected, simpler things into a complex spider web of services is not something we would do intentionally, right?\n\nThe extra complexity to operate microservices requires additional infrastructure. Kubernetes is a popular choice to orchestrate and operate all the various microservices in a system. To complete a task like booking a ride on Uber, one service must request data from potentially dozens of other services — a complex and often problem-prone process, especially as microservices scale. A service mesh becomes necessary for service discovery and securely routing requests from one service to the next. It acts like a switchboard -- it routes requests to the right service.\n\nThe service mesh is a dedicated, configurable infrastructure layer that can document how different parts of a microservices-base system interact. There are a couple of ways of implementing a service mesh, but most often, a sidecar proxy is applied to each microservice as a contact point. (The interactions among the sidecars put the mesh in the service mesh term.) It tends to look like this:\n\n![Mesh](https://danstroot.imgix.net/assets/blog/img/service-mesh-1680.png)\n\n### The Problems in More Detail\n\nIn addition to being harder to operate, microservices are more dfficult to debug. It is a lot easier to debug the interactions between components of a system when they communicate within the same process, especially when one component simply calls a method on another. This is usually just a matter of attaching a debugger to the process, stepping through the method calls and watching variables. There is no straightforward equivalent of this in microservices. Service communications are notoriously difficult to trace and piece together, requiring additional tooling, infrastructure, and complexity.\n\n<YouTube link='https://youtu.be/y8OnoxKotPQ' />\n\nMicroservices add complexity and leave us with inefficient communications, less error detection in development, easier ways to introduce errors, a worse debugging experience (e.g., relying on searching further through distributed log analysis tools), and require more and more management software to deploy.\n\nInternal web services/APIs are often doubly inefficient by using REST (and having to convert to JSON and back) rather than binary transmissions. If multiple microservices hops are used, this all adds up and slows down the system. A conversion to JSON and back is a wasted effort, more so if done dozens of times.\n\n> “We adopted microservices so every outage could be like a murder mystery.”\n\nFrankly, centralized architecture and standards, when put in the hands of the _wrong_ few could be very counterproductive and feel unfair to everyone else that enjoys software design and doesn’t get to play in the sandbox. This is undeniable. However, isn’t this an argument for smaller teams and less engineering bloat, and better hiring instead?\n\nGood architects and technical leaders can keep code maintainable and ensure it remains modular, enabling efficient future developments. These are **not** things we want to give up.\n\n- If we think about resilient systems, the most resilient systems are the ones with the least number of moving parts. The same is true for the fastest systems.\n\n- If we think about deployment and management and upgrades, the simplest systems to deploy and maintain also have the least number of moving parts.\n\n### Elegant Architecture Recommendations for a More Civilized Age\n\n> “Finding service boundaries is really damn hard…”\n>\n> <cite>&mdash; All microservices architects, ever</cite>\n\nHence, it is safer to start with larger/wider boundaries - probably the boundaries of proper bounded contexts. This is especially relevant to services encompassing core business domains. Design your architecture layers properly. Organize your teams into the way you want your architectural boundaries to be. Allow for both transactions and events.\n\n- Web requests can be managed by one type of instance, that results in one EC2 image or whatever. Anything that can be handled within the lifecycle of one request can be handled there, and these instances are horizontally scaled behind a load balancer.\n\n- Asynchronous tasks are managed by a service tier, often connected to an event bus. There may be one of these for each programming language, or maybe a few more, and that would be ok. But because these are horizontally scaled and only ask for new jobs when they have free compute resources, one type of instance can contain code for any manner of asynchronous jobs.\n\n- Code that needs to be shared between the asynchronous services and the web tier should be kept in libraries used by both and is not a service call.\n\n- Don't use JSON for internal API's - consider something like Google's protobuf or Apache Thrift to serialize and deserialize data. It's fast, it's efficient, and enables much better debugging.\n\n#### Benefits\n\n1. Errors are eliminated because they can be caught better at compile time and with unit tests.\n\n2. When changes are made, they can be made in a library, and if the API of a function changes, it is impossible to build/deploy the code until it is fixed.\n\n3. We do not need to keep up to date with the latest in container wrangling software, and using various service discovery, ingress solutions, service meshes, or otherwise. These are problems created by complicated architectures. The service tiers can communicate over an event bus and there is no need to know the address of any server.\n\n---\n\nImage Credit: **Long Distance Operators, Omaha, 1959**\n\n<span className='text-sm'>\n  Switchboard operators were expected to be courteous, quick-thinking, and patient under pressure.\n  They handled all kinds of requests, from providing the time of day to more delicate matters.\n  Reliability engineers who manage microservices are a bit like switchboard operators -- they have\n  to be able to understand all the connections across all the services and what happens if a\n  connection goes down.\n</span>\n",
    "code": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var u=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,g=Object.prototype.hasOwnProperty;var b=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),f=(n,e)=>{for(var i in e)o(n,i,{get:e[i],enumerable:!0})},a=(n,e,i,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let r of u(e))!g.call(n,r)&&r!==i&&o(n,r,{get:()=>e[r],enumerable:!(s=m(e,r))||s.enumerable});return n};var y=(n,e,i)=>(i=n!=null?d(p(n)):{},a(e||!n||!n.__esModule?o(i,\"default\",{value:n,enumerable:!0}):i,n)),v=n=>a(o({},\"__esModule\",{value:!0}),n);var l=b((q,c)=>{c.exports=_jsx_runtime});var z={};f(z,{default:()=>x,frontmatter:()=>w});var t=y(l()),w={title:\"Microservices: A Technical Solution to a People Problem?\",excerpt:\"Microservices exist because teams want to make their own choices, dislike code review or overbearing \\u2018architects\\u2019 above them, and to a lesser extent want to try different and newer languages. This feels good, but...\",coverImage:\"/assets/blog/img/switchboard.jpg\",date:\"2022-04-30\",published:!0,author:{name:\"Dan Stroot\",picture:\"/assets/blog/authors/dan.jpeg\"},ogImage:{url:\"/assets/blog/img/switchboard.png\"},seoURL:null};function h(n){let e=Object.assign({h3:\"h3\",p:\"p\",em:\"em\",strong:\"strong\",a:\"a\",blockquote:\"blockquote\",img:\"img\",ul:\"ul\",li:\"li\",h4:\"h4\",ol:\"ol\",hr:\"hr\"},n.components),{YouTube:i}=e;return i||T(\"YouTube\",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h3,{id:\"a-simple-microservice-definition\",children:\"A Simple Microservice Definition\"}),`\n`,(0,t.jsx)(e.p,{children:\"A microservice is generally defined as a small, loosely coupled, distributed service. Each service is part of a broader microservices ecosystem/architecture, comprising a set of microservices that operate together to solve a common goal. A collection of microservices can be regarded as a system.\"}),`\n`,(0,t.jsx)(e.h3,{id:\"why-use-microservices\",children:\"Why use Microservices?\"}),`\n`,(0,t.jsx)(e.p,{children:'Microservices architectures were adopted for very specific reasons/needs such as scalability, modularity, or separation of concerns. It shifted the complexity \"up the stack\" by making the services themselves [potentially] simpler and easier to maintain and scale for the price of more complexity overall.'}),`\n`,(0,t.jsx)(e.p,{children:\"Teams were given the freedom [in some cases] to choose their own micro-architecture for each microservice. Teams wanted the freedom to be able to pick whatever language, database, and library they desired. For some, this kind of autonomy was energizing. It led to more innovation, faster development time, and shorter release cycles - for a while.\"}),`\n`,(0,t.jsx)(e.p,{children:'Another principle of microservices is that the team that built the service supports the service. That is a win early on as the service is being built, because support is non-existent. The team can \"move fast and break things\". As the service goes into production and matures, the team eventually slows down because now they must support the service and maintain it.'}),`\n`,(0,t.jsx)(e.h3,{id:\"challenges-with-microservices\",children:\"Challenges with Microservices\"}),`\n`,(0,t.jsxs)(e.p,{children:[\"Some organizations say microservices allow them to release inter-team friction and break inertia by letting each team operate independently and keep their microservices small and elegant. This is true, but the \",(0,t.jsx)(e.em,{children:\"overall\"}),\" architecture is quite the opposite.\"]}),`\n`,(0,t.jsx)(e.p,{children:\"Sometimes microservices exist because teams dislike code review, or overbearing \\u2018architects\\u2019 above them telling them what to do. While some people may realize there is nothing smart about this architecture choice for the whole system, many developers are content to care only about their team -- and not the company or application stack as a whole. For them autonomy is more important.\"}),`\n`,(0,t.jsxs)(e.p,{children:['\"Doing microservices\" became validation for organizations that lack conviction, or a thesis, about how their architecture ',(0,t.jsx)(e.em,{children:\"should\"}),\" be. This ecology of interacting parties, each acting in their own interest for the common good not only sounds utopian, but speaks to an underlying, tacit belief that the emergent mesh of services will approximate the latent natural architecture of the domain. The backlash against microservices is partly because that simply isn't true - instead microservices approximate the natural contours of the technology organization's \",(0,t.jsx)(e.strong,{children:\"organizational model\"}),', not the domain. This is known as \"',(0,t.jsx)(e.a,{href:\"https://en.m.wikipedia.org/wiki/Conway's_law\",children:\"Conway's law\"}),'\":']}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsx)(e.p,{children:\"Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization's communication structure.\"}),`\n`,(0,t.jsx)(\"cite\",{children:\"\\u2014\\u2009Melvin E. Conway\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Clearly one of the reasons why we got here as an industry is we didn\\u2019t want to (or couldn't) communicate well across teams and organizational structures. Transitioning our computer architectures from well-architected, simpler things into a complex spider web of services is not something we would do intentionally, right?\"}),`\n`,(0,t.jsx)(e.p,{children:\"The extra complexity to operate microservices requires additional infrastructure. Kubernetes is a popular choice to orchestrate and operate all the various microservices in a system. To complete a task like booking a ride on Uber, one service must request data from potentially dozens of other services \\u2014 a complex and often problem-prone process, especially as microservices scale. A service mesh becomes necessary for service discovery and securely routing requests from one service to the next. It acts like a switchboard -- it routes requests to the right service.\"}),`\n`,(0,t.jsx)(e.p,{children:\"The service mesh is a dedicated, configurable infrastructure layer that can document how different parts of a microservices-base system interact. There are a couple of ways of implementing a service mesh, but most often, a sidecar proxy is applied to each microservice as a contact point. (The interactions among the sidecars put the mesh in the service mesh term.) It tends to look like this:\"}),`\n`,(0,t.jsx)(e.p,{children:(0,t.jsx)(e.img,{src:\"https://danstroot.imgix.net/assets/blog/img/service-mesh-1680.png\",alt:\"Mesh\"})}),`\n`,(0,t.jsx)(e.h3,{id:\"the-problems-in-more-detail\",children:\"The Problems in More Detail\"}),`\n`,(0,t.jsx)(e.p,{children:\"In addition to being harder to operate, microservices are more dfficult to debug. It is a lot easier to debug the interactions between components of a system when they communicate within the same process, especially when one component simply calls a method on another. This is usually just a matter of attaching a debugger to the process, stepping through the method calls and watching variables. There is no straightforward equivalent of this in microservices. Service communications are notoriously difficult to trace and piece together, requiring additional tooling, infrastructure, and complexity.\"}),`\n`,(0,t.jsx)(i,{link:\"https://youtu.be/y8OnoxKotPQ\"}),`\n`,(0,t.jsx)(e.p,{children:\"Microservices add complexity and leave us with inefficient communications, less error detection in development, easier ways to introduce errors, a worse debugging experience (e.g., relying on searching further through distributed log analysis tools), and require more and more management software to deploy.\"}),`\n`,(0,t.jsx)(e.p,{children:\"Internal web services/APIs are often doubly inefficient by using REST (and having to convert to JSON and back) rather than binary transmissions. If multiple microservices hops are used, this all adds up and slows down the system. A conversion to JSON and back is a wasted effort, more so if done dozens of times.\"}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsx)(e.p,{children:\"\\u201CWe adopted microservices so every outage could be like a murder mystery.\\u201D\"}),`\n`]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Frankly, centralized architecture and standards, when put in the hands of the \",(0,t.jsx)(e.em,{children:\"wrong\"}),\" few could be very counterproductive and feel unfair to everyone else that enjoys software design and doesn\\u2019t get to play in the sandbox. This is undeniable. However, isn\\u2019t this an argument for smaller teams and less engineering bloat, and better hiring instead?\"]}),`\n`,(0,t.jsxs)(e.p,{children:[\"Good architects and technical leaders can keep code maintainable and ensure it remains modular, enabling efficient future developments. These are \",(0,t.jsx)(e.strong,{children:\"not\"}),\" things we want to give up.\"]}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"If we think about resilient systems, the most resilient systems are the ones with the least number of moving parts. The same is true for the fastest systems.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"If we think about deployment and management and upgrades, the simplest systems to deploy and maintain also have the least number of moving parts.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.h3,{id:\"elegant-architecture-recommendations-for-a-more-civilized-age\",children:\"Elegant Architecture Recommendations for a More Civilized Age\"}),`\n`,(0,t.jsxs)(e.blockquote,{children:[`\n`,(0,t.jsx)(e.p,{children:\"\\u201CFinding service boundaries is really damn hard\\u2026\\u201D\"}),`\n`,(0,t.jsx)(\"cite\",{children:\"\\u2014 All microservices architects, ever\"}),`\n`]}),`\n`,(0,t.jsx)(e.p,{children:\"Hence, it is safer to start with larger/wider boundaries - probably the boundaries of proper bounded contexts. This is especially relevant to services encompassing core business domains. Design your architecture layers properly. Organize your teams into the way you want your architectural boundaries to be. Allow for both transactions and events.\"}),`\n`,(0,t.jsxs)(e.ul,{children:[`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"Web requests can be managed by one type of instance, that results in one EC2 image or whatever. Anything that can be handled within the lifecycle of one request can be handled there, and these instances are horizontally scaled behind a load balancer.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"Asynchronous tasks are managed by a service tier, often connected to an event bus. There may be one of these for each programming language, or maybe a few more, and that would be ok. But because these are horizontally scaled and only ask for new jobs when they have free compute resources, one type of instance can contain code for any manner of asynchronous jobs.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"Code that needs to be shared between the asynchronous services and the web tier should be kept in libraries used by both and is not a service call.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"Don't use JSON for internal API's - consider something like Google's protobuf or Apache Thrift to serialize and deserialize data. It's fast, it's efficient, and enables much better debugging.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.h4,{id:\"benefits\",children:\"Benefits\"}),`\n`,(0,t.jsxs)(e.ol,{children:[`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"Errors are eliminated because they can be caught better at compile time and with unit tests.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"When changes are made, they can be made in a library, and if the API of a function changes, it is impossible to build/deploy the code until it is fixed.\"}),`\n`]}),`\n`,(0,t.jsxs)(e.li,{children:[`\n`,(0,t.jsx)(e.p,{children:\"We do not need to keep up to date with the latest in container wrangling software, and using various service discovery, ingress solutions, service meshes, or otherwise. These are problems created by complicated architectures. The service tiers can communicate over an event bus and there is no need to know the address of any server.\"}),`\n`]}),`\n`]}),`\n`,(0,t.jsx)(e.hr,{}),`\n`,(0,t.jsxs)(e.p,{children:[\"Image Credit: \",(0,t.jsx)(e.strong,{children:\"Long Distance Operators, Omaha, 1959\"})]}),`\n`,(0,t.jsx)(\"span\",{className:\"text-sm\",children:(0,t.jsx)(e.p,{children:`Switchboard operators were expected to be courteous, quick-thinking, and patient under pressure.\nThey handled all kinds of requests, from providing the time of day to more delicate matters.\nReliability engineers who manage microservices are a bit like switchboard operators -- they have\nto be able to understand all the connections across all the services and what happens if a\nconnection goes down.`})})]})}function k(n={}){let{wrapper:e}=n.components||{};return e?(0,t.jsx)(e,Object.assign({},n,{children:(0,t.jsx)(h,n)})):h(n)}var x=k;function T(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return v(z);})();\n;return Component;"
  },
  "_id": "posts/2022-04-30-microservices-a-technical-solution-to-a-people-problem.mdx",
  "_raw": {
    "sourceFilePath": "posts/2022-04-30-microservices-a-technical-solution-to-a-people-problem.mdx",
    "sourceFileName": "2022-04-30-microservices-a-technical-solution-to-a-people-problem.mdx",
    "sourceFileDir": "posts",
    "contentType": "mdx",
    "flattenedPath": "posts/2022-04-30-microservices-a-technical-solution-to-a-people-problem"
  },
  "type": "Post",
  "slug": "/posts/2022-04-30-microservices-a-technical-solution-to-a-people-problem",
  "slugAsParams": "2022-04-30-microservices-a-technical-solution-to-a-people-problem",
  "stats": {
    "text": "8 min read",
    "minutes": 7.035,
    "time": 422100,
    "words": 1407
  }
}