{
  "title": "Big Ball of Mud",
  "excerpt": "I wrotes these principles down in 2015. At the time they felt \"visionary\". Looking back now I love these principles even more, but they seem obvious and ordinary now.",
  "coverImage": "/assets/blog/img/arch_principles.jpg",
  "date": "2023-04-20T00:00:00.000Z",
  "published": false,
  "author": {
    "name": "Dan Stroot",
    "picture": "/assets/blog/authors/dan.jpeg",
    "type": "Author",
    "_raw": {}
  },
  "ogImage": {
    "url": "/assets/blog/img/arch_principles.jpg",
    "type": "OGImage",
    "_raw": {}
  },
  "seoURL": null,
  "body": {
    "raw": "\n# Big Ball of Mud\n\nBrian Foote and Joseph Yoder\n\nDepartment of Computer Science\nUniversity of Illinois at Urbana-Champaign\n1304 W. Springfield\nUrbana, IL 61801 USA\n\nfoote@cs.uiuc.edu (217) 328-3523\nyoder@cs.uiuc.edu (217) 244-4695\n\nSaturday, June 26, 1999\nFourth Conference on Patterns Languages of Programs (PLoP '97/EuroPLoP '97)\nMonticello, Illinois, September 1997\nTechnical Report #WUCS-97-34 (PLoP '97/EuroPLoP '97), September 1997\nDepartment of Computer Science, Washington University\nChapter 29\nPattern Languages of Program Design 4\nedited by Neil Harrison, Brian Foote, and Hans Rohnert\nAddison-Wesley, 2000\nThis volume is part of the Addison-Wesley Software Patterns Series.\n\n[Big Ball of Mud](http://www.laputan.org/mud/mud.html#BigBallOfMud)\nThis paper is also available in the following formats: [PDF] [Word] [RTF] [PostScript]\n\nAlso by Brian Foote and Joseph Yoder\nArchitecture, Evolution, and Metamorphosis\nThe Selfish Class\n\nThis paper was twice featured in Slashdot\n\nBadge\n\n## Contents\n\n* Abstract\n* Introduction\n* Forces\n* Big Ball of Mud\n* Throwaway Code\n* Piecemeal Growth\n* Keep It Working\n* Shearing Layers\n* Sweeping It Under The Rug\n* Reconstruction\n* Conclusion\n* Acknowledgments\n* References\n\n## Abstract\n\nWhile much attention has been focused on high-level software architectural patterns, what is, in effect, the de-facto standard software architecture is seldom discussed. This paper examines this most frequently deployed of software architectures: the **Big Ball of Mud**. A **Big Ball of Mud** is a casually, even haphazardly, structured system. Its organization, if one can call it that, is dictated more by expediency than design. Yet, its enduring popularity cannot merely be indicative of a general disregard for architecture.\n\nThese patterns explore the forces that encourage the emergence of a **Big Ball of Mud**, and the undeniable effectiveness of this approach to software architecture. What are the people who build them doing right? If more high-minded architectural approaches are to compete, we must understand what the forces that lead to a **Big Ball of Mud** are, and examine alternative ways to resolve them.\n\nA number of additional patterns emerge out of the **Big Ball of Mud**. We discuss them in turn. Two principal questions underlie these patterns: Why are so many existing systems architecturally undistinguished, and what can we do to improve them?\n\n## Introduction\n\nOver the last several years, a number of authors [Garlan & Shaw 1993] [Shaw 1996] [Buschmann et. al. 1996] [Meszaros 1997] have presented patterns that characterize high-level software architectures, such as PIPELINE and LAYERED ARCHITECTURE. In an ideal world, every system would be an exemplar of one or more such high-level patterns. Yet, this is not so. The architecture that actually predominates in practice has yet to be discussed: the **Big Ball of Mud**.\n\nLennon Serves Too Much Spaghetti\n\nA **Big Ball of Mud** is haphazardly structured, sprawling, sloppy, duct-tape and bailing wire, spaghetti code jungle. We’ve all seen them. These systems show unmistakable signs of unregulated growth, and repeated, expedient repair. Information is shared promiscuously among distant elements of the system, often to the point where nearly all the important information becomes global or duplicated. The overall structure of the system may never have been well defined. If it was, it may have eroded beyond recognition. Programmers with a shred of architectural sensibility shun these quagmires. Only those who are unconcerned about architecture, and, perhaps, are comfortable with the inertia of the day-to-day chore of patching the holes in these failing dikes, are content to work on such systems.\n\nStill, this approach endures and thrives. Why is this architecture so popular? Is it as bad as it seems, or might it serve as a way-station on the road to more enduring, elegant artifacts? What forces drive good programmers to build ugly systems? Can we avoid this? Should we? How can we make such systems better?\n\nWe present the following seven patterns:\n\n1. BIG BALL OF MUD \n2. THROWAWAY CODE\n3. PIECEMEAL GROWTH\n4. KEEP IT WORKING\n5. SHEARING LAYERS\n6. SWEEPING IT UNDER THE RUG\n7. RECONSTRUCTION\n\nWhy does a system become a **Big Ball of Mud**? Sometimes, big, ugly systems emerge from THROWAWAY CODE. THROWAWAY CODE is quick-and-dirty code that was intended to be used only once and then discarded. However, such code often takes on a life of its own, despite casual structure and poor or non-existent documentation. It works, so why fix it? When a related problem arises, the quickest way to address it might be to expediently modify this working code, rather than design a proper, general program from the ground up. Over time, a simple throwaway program begets a **Big Ball of Mud**.\n\nEven systems with well-defined architectures are prone to structural erosion. The relentless onslaught of changing requirements that any successful system attracts can gradually undermine its structure. Systems that were once tidy become overgrown as PIECEMEAL GROWTH gradually allows elements of the system to sprawl in an uncontrolled fashion.\n\nIf such sprawl continues unabated, the structure of the system can become so badly compromised that it must be abandoned. As with a decaying neighborhood, a downward spiral ensues. Since the system becomes harder and harder to understand, maintenance becomes more expensive, and more difficult. Good programmers refuse to work there. Investors withdraw their capital. And yet, as with neighborhoods, there are ways to avoid, and even reverse, this sort of decline. As with anything else in the universe, counteracting entropic forces requires an investment of energy. Software gentrification is no exception. The way to arrest entropy in software is to refactor it. A sustained commitment to refactoring can keep a system from subsiding into a **Big Ball of Mud**.\n\nA major flood, fire, or war may require that a city be evacuated and rebuilt from the ground up. More often, change takes place a building or block at a time, while the city as a whole continues to function. Once established, a strategy of KEEPING IT WORKING preserves a municipality’s vitality as it grows.\n\nSystems and their constituent elements evolve at different rates. As they do, things that change quickly tend to become distinct from things that change more slowly. The SHEARING LAYERS that develop between them are like fault lines or facets that help foster the emergence of enduring abstractions.\n\nA simple way to begin to control decline is to cordon off the blighted areas, and put an attractive façade around them. We call this strategy SWEEPING IT UNDER THE RUG. In more advanced cases, there may be no alternative but to tear everything down and start over. When total RECONSTRUCTION becomes necessary, all that is left to salvage is the patterns that underlie the experience.\n\nSome of these patterns might appear at first to be antipatterns [Brown et al. 1998] or straw men, but they are not, at least in the customary sense. Instead, they seek to examine the gap between what we preach and what we practice.\n\nStill, some of them may strike some readers as having a schizoid quality about them. So, for the record, let us put our cards on the table. We are in favor of good architecture.\n\nOur ultimate agenda is to help drain these swamps. Where possible, architectural decline should be prevented, arrested, or reversed. We discuss ways of doing this. In severe cases, architectural abominations may even need to be demolished.\n\nAt the same time, we seek not to cast blame upon those who must wallow in these mires. In part, our attitude is to \"hate the sin, but love the sinner\". But, it goes beyond this. Not every backyard storage shack needs marble columns. There are significant forces that can conspire to compel architecture to take a back seat to functionality, particularly early in the evolution of a software artifact. Opportunities and insights that can allow for architectural progress often are present later rather than earlier in the lifecycle.\n\nA certain amount of controlled chaos is natural during construction, and can be tolerated, as long as you clean up after yourself eventually. Even beyond this though, a complex system may be an accurate reflection of our immature understanding of a complex problem. The class of systems that we can build at all may be larger than the class of systems we can build elegantly, at least at first. A somewhat ramshackle rat's nest might be a state-of-the-art architecture for a poorly understood domain. This should not be the end of the story, though. As we gain more experience in such domains, we should increasingly direct our energies to gleaning more enduring architectural abstractions from them.\n\nThe patterns described herein are not intended to stand alone. They are instead set in a context that includes a number of other patterns that we and others have described. In particular, they are set in contrast to the lifecycle patterns, PROTOTYPE PHASE, EXPANSIONARY PHASE, and CONSOLIDATION PHASE, presented in [Foote & Opdyke 1995] and [Coplien 1995], the SOFTWARE TECTONICS pattern in [Foote & Yoder 1996], and the framework development patterns in [Roberts & Johnson 1998].\n\nIndeed, to a substantial extent, much of this chapter describes the disease, while the patterns above describe what we believe can be the cure: a flexible, adaptive, feedback-driven development process in which design and refactoring pervade the lifecycle of each artifact, component, and framework, within and beyond the applications that incubate them.\n\n## Forces\n\nA number of forces can conspire to drive even the most architecturally conscientious organizations to produce BIG BALLS OF MUD. These pervasive, \"global\" forces are at work in all the patterns presented. Among these forces:\n\nTime: There may not be enough time to consider the long-term architectural implications of one’s design and implementation decisions. Even when systems have been well designed, architectural concerns often must yield to more pragmatic ones as a deadline starts to loom.\n\nOne reason that software architectures are so often mediocre is that architecture frequently takes a back seat to more mundane concerns such as cost, time-to-market, and programmer skill. Architecture is often seen as a luxury or a frill, or the indulgent pursuit of lily-gilding compulsives who have no concern for the bottom line. Architecture is often treated with neglect, and even disdain. While such attitudes are unfortunate, they are not hard to understand. Architecture is a long-term concern. The concerns above have to be addressed if a product is not to be stillborn in the marketplace, while the benefits of good architecture are realized later in the lifecycle, as frameworks mature, and reusable black-box components emerge [Foote & Opdyke 1995].\n\nArchitecture can be looked upon as a Risk, that will consume resources better directed at meeting a fleeting market window, or as an Opportunity to lay the groundwork for a commanding advantage down the road.\n\nIndeed, an immature architecture can be an advantage in a growing system because data and functionality can migrate to their natural places in the system unencumbered by artificial architectural constraints. Premature architecture can be more dangerous than none at all, as unproved architectural hypotheses turn into straightjackets that discourage evolution and experimentation.\n\n**Cost**: Architecture is expensive, especially when a new domain is being explored. Getting the system right seems like a pointless luxury once the system is limping well enough to ship. An investment in architecture usually does not pay off immediately. Indeed, if architectural concerns delay a product’s market entry for too long, then long-term concerns may be moot. Who benefits from an investment in architecture, and when is a return on this investment seen? Money spent on a quick-and-dirty project that allows an immediate entry into the market may be better spent than money spent on elaborate, speculative architectural fishing expedition. It’s hard to recover the value of your architectural assets if you’ve long since gone bankrupt.\n\nProgrammers with the ability to discern and design quality architectures are reputed to command a premium. These expenses must be weighed against those of allowing an expensive system to slip into premature decline and obsolescence. If you think good architecture is expensive, try bad architecture.\n\n**Experience**: Even when one has the time and inclination to take architectural concerns into account, one’s experience, or lack thereof, with the domain can limit the degree of architectural sophistication that can be brought to a system, particularly early in its evolution. Some programmers flourish in environments where they can discover and develop new abstractions, while others are more comfortable in more constrained environments (for instance, Smalltalk vs. Visual Basic programmers.) Often, initial versions of a system are vehicles whereby programmers learn what pieces must be brought into play to solve a particular problem. Only after these are identified do the architectural boundaries among parts of the system start to emerge.\n\nInexperience can take a number of guises. There is absolute, fresh out of school inexperience. A good architect may lack domain experience, or a domain expert who knows the code cold may not have architectural experience.\n\nEmployee turnover can wreak havoc on an organization’s institutional memory, with the perhaps dubious consolation of bringing fresh blood aboard.\n\n**Skill**: Programmers differ in their levels of skill, as well as in expertise, predisposition and temperament. Some programmers have a passion for finding good abstractions, while some are skilled at navigating the swamps of complex code left to them by others. Programmers differ tremendously in their degrees of experience with particular domains, and their capacities for adapting to new ones. Programmers differ in their language and tool preferences and experience as well.\n\n**Visibility**: Buildings are tangible, physical structures. You can look at a building. You can watch it being built. You can walk inside it, and admire and critique its design.\n\nA program’s user interface presents the public face of a program, much as a building’s exterior manifests its architecture. However, unlike buildings, only the people who build a program see how it looks inside.\n\nPrograms are made of bits. The manner in which we present these bits greatly affects our sense of how they are put together. Some designers prefer to see systems depicted using modeling languages or PowerPoint pictures. Others prefer prose descriptions. Still others prefer to see code. The fashion in which we present our architectures affects our perceptions of whether they are good or bad, clear or muddled, and elegant or muddy.\n\nIndeed, one of the reasons that architecture is neglected is that much of it is \"under the hood\", where nobody can see it. If the system works, and it can be shipped, who cares what it looks like on the inside?\n\n**Complexity**: One reason for a muddled architecture is that software often reflects the inherent complexity of the application domain. This is what Brooks called \"essential complexity\" [Brooks 1995]. In other words, the software is ugly because the problem is ugly, or at least not well understood. Frequently, the organization of the system reflects the sprawl and history of the organization that built it (as per CONWAY’S LAW [Coplien 1995]) and the compromises that were made along the way. Renegotiating these relationships is often difficult once the basic boundaries among system elements are drawn. These relationships can take on the immutable character of \"site\" boundaries that Brand [Brand 1994] observed in real cities. Big problems can arises when the needs of the applications force unrestrained communication across these boundaries. The system becomes a tangled mess, and what little structure is there can erode further.\n\n**Change**: Architecture is a hypothesis about the future that holds that subsequent change will be confined to that part of the design space encompassed by that architecture. Of course, the world has a way of mocking our attempts to make such predictions by tossing us the totally unexpected. A problem we might have been told was definitely ruled out of consideration for all time may turn out to be dear to the heart of a new client we never thought we’d have. Such changes may cut directly across the grain of fundamental architectural decisions made in the light of the certainty that these new contingencies could never arise. The \"right\" thing to do might be to redesign the system. The more likely result is that the architecture of the system will be expediently perturbed to address the new requirements, with only passing regard for the effect of these radical changes on the structure of the system.\n\nScale: Managing a large project is a qualitatively different problem from managing a small one, just as leading a division of infantry into battle is different from commanding a small special forces team. Obviously, \"divide and conquer\" is, in general, an insufficient answer to the problems posed by scale. Alan Kay, during an invited talk at OOPSLA '86 observed that \"good ideas don't always scale.\" That observation prompted Henry Lieberman to inquire \"so what do we do, just scale the bad ones?\"\n\n## Big Ball of Mud \n\nalias: SHANTYTOWN, SPAGHETTI CODE\n\nimage: Shantytown\n\nShantytowns are squalid, sprawling slums. Everyone seems to agree they are a bad idea, but forces conspire to promote their emergence anyway. What is it that they are doing right?\n\nShantytowns are usually built from common, inexpensive materials and simple tools. Shantytowns can be built using relatively unskilled labor. Even though the labor force is \"unskilled\" in the customary sense, the construction and maintenance of this sort of housing can be quite labor intensive. There is little specialization. Each housing unit is constructed and maintained primarily by its inhabitants, and each inhabitant must be a jack of all the necessary trades. There is little concern for infrastructure, since infrastructure requires coordination and capital, and specialized resources, equipment, and skills. There is little overall planning or regulation of growth. Shantytowns emerge where there is a need for housing, a surplus of unskilled labor, and a dearth of capital investment. Shantytowns fulfill an immediate, local need for housing by bringing available resources to bear on the problem. Loftier architectural goals are a luxury that has to wait.\n\nMaintaining a shantytown is labor-intensive and requires a broad range of skills. One must be able to improvise repairs with the materials on-hand, and master tasks from roof repair to ad hoc sanitation. However, there is little of the sort of skilled specialization that one sees in a mature economy.\n\nAll too many of our software systems are, architecturally, little more than shantytowns. Investment in tools and infrastructure is too often inadequate. Tools are usually primitive, and infrastructure such as libraries and frameworks, is undercapitalized. Individual portions of the system grow unchecked, and the lack of infrastructure and architecture allows problems in one part of the system to erode and pollute adjacent portions. Deadlines loom like monsoons, and architectural elegance seems unattainable.\n\nv v v\n\nAs a system nears completion, its actual users may begin to work with it for the first time. This experience may inspire changes to data formats and the user interface that undermine architectural decisions that had been thought to be settled. Also, as Brooks [Brooks 1995] has noted, because software is so flexible, it is often asked to bear the burden of architectural compromises late in the development cycle of hardware/software deliverables precisely because of its flexibility.\n\nThis phenomenon is not unique to software. Stewart Brand [Brand 1994] has observed that the period just prior to a building’s initial occupancy can be a stressful period for both architects and their clients. The money is running out, and the finishing touches are being put on just those parts of the space that will interact the most with its occupants. During this period, it can become evident that certain wish-list items are not going to make it, and that exotic experiments are not going to work. Compromise becomes the \"order of the day\".\n\nThe time and money to chase perfection are seldom available, nor should they be. To survive, we must do what it takes to get our software working and out the door on time. Indeed, if a team completes a project with time to spare, today’s managers are likely to take that as a sign to provide less time and money or fewer people the next time around.\n\nYou need to deliver quality software on time, and under budget.\nCost: Architecture is a long-term investment. It is easy for the people who are paying the bills to dismiss it, unless there is some tangible immediate benefit, such a tax write-off, or unless surplus money and time happens to be available. Such is seldom the case. More often, the customer needs something working by tomorrow. Often, the people who control and manage the development process simply do not regard architecture as a pressing concern. If programmers know that workmanship is invisible, and managers don't want to pay for it anyway, a vicious circle is born.\n\nSkill: Ralph Johnson is fond of observing that is inevitable that \"on average, average organizations will have average people\". One reason for the popularity and success of **Big Ball of Mud** approaches might be that this appoach doesn't require a hyperproductive virtuoso architect at every keyboard.\n\nOrganization: With larger projects, cultural, process, organizational and resource allocation issues can overwhelm technical concerns such as tools, languages, and architecture.\n\nIt may seem to a programmer that whether to don hip boots and wade into a swamp is a major quality-of-life matter, but programmer comfort is but one concern to a manager, which can conflict with many others. Architecture and code quality may strike management as frills that have only an indirect impact on their bottom lines.\n\nTherefore, focus first on features and functionality, then focus on architecture and performance.\nThe case made here resembles Gabriel’s \"Worse is Better\" arguments [Gabriel 1991] in a number of respects. Why does so much software, despite the best intentions and efforts of developers, turn into BIG BALLS OF MUD? Why do slash-and-burn tactics drive out elegance? Does bad architecture drive out good architecture?\n\nWhat does this muddy code look like to the programmers in the trenches who must confront it? Data structures may be haphazardly constructed, or even next to non-existent. Everything talks to everything else. Every shred of important state data may be global. There are those who might construe this as a sort of blackboard approach [Buschmann 1996], but it more closely resembles a grab bag of undifferentiated state. Where state information is compartmentalized, it may be passed promiscuously about though Byzantine back channels that circumvent the system's original structure.\n\nVariable and function names might be uninformative, or even misleading. Functions themselves may make extensive use of global variables, as well as long lists of poorly defined parameters. The function themselves are lengthy and convoluted, and perform several unrelated tasks. Code is duplicated. The flow of control is hard to understand, and difficult to follow. The programmer’s intent is next to impossible to discern. The code is simply unreadable, and borders on indecipherable. The code exhibits the unmistakable signs of patch after patch at the hands of multiple maintainers, each of whom barely understood the consequences of what he or she was doing. Did we mention documentation? What documentation?\n\n**Big Ball of Mud** might be thought of as an anti-pattern, since our intention is to show how passivity in the face of forces that undermine architecture can lead to a quagmire. However, its undeniable popularity leads to the inexorable conclusion that it is a pattern in its own right. It is certainly a pervasive, recurring solution to the problem of producing a working system in the context of software development. It would seem to be the path of least resistance when one confronts the sorts of forces discussed above. Only by understanding the logic of its appeal can we channel or counteract the forces that lead to a **Big Ball of Mud**.\n\nOne thing that isn’t the answer is rigid, totalitarian, top-down design. Some analysts, designers, and architects have an exaggerated sense of their ability to get things right up-front, before moving into implementation. This approach leads to inefficient resources utilization, analysis paralysis, and design straightjackets and cul-de-sacs.\n\nKent Beck has observed that the way to build software is to: Make it work. Make it right. Make it fast [Beck 1997]. \"Make it work\" means that we should focus on functionality up-front, and get something running. \"Make it right\" means that we should concern ourselves with how to structure the system only after we’ve figured out the pieces we need to solve the problem in the first place. \"Make it fast\" means that we should be concerned about optimizing performance only after we’ve learned how to solve the problem, and after we’ve discerned an architecture to elegantly encompass this functionality. Once all this has been done, one can consider how to make it cheap.\n\nWhen it comes to software architecture, form follows function. Here we mean \"follows\" not in the traditional sense of dictating function. Instead, we mean that the distinct identities of the system’s architectural elements often don’t start to emerge until after the code is working.\n\nDomain experience is an essential ingredient in any framework design effort. It is hard to try to follow a front-loaded, top-down design process under the best of circumstances. Without knowing the architectural demands of the domain, such an attempt is premature, if not foolhardy. Often, the only way to get domain experience early in the lifecycle is to hire someone who has worked in a domain before from someone else.\n\nThe quality of one’s tools can influence a system’s architecture. If a system’s architectural goals are inadequately communicated among members of a team, they will be harder to take into account as the system is designed and constructed.\n\nFinally, engineers will differ in their levels of skill and commitment to architecture. Sadly, architecture has been undervalued for so long that many engineers regard life with a **Big Ball of Mud** as normal. Indeed some engineers are particularly skilled at learning to navigate these quagmires, and guiding others through them. Over time, this symbiosis between architecture and skills can change the character of the organization itself, as swamp guides become more valuable than architects. As per CONWAY’S LAW [Coplien 1995], architects depart in futility, while engineers who have mastered the muddy details of the system they have built in their images prevail. [Foote & Yoder 1998a] went so far as to observe that inscrutable code might, in fact, have a survival advantage over good code, by virtue of being difficult to comprehend and change. This advantage can extend to those programmers who can find their ways around such code. In a land devoid of landmarks, such guides may become indispensable.\n\nThe incentives that drive the evolution of such systems can, at times, operate perversely. Just as it is easier to be verbose than concise, it is easier to build complex systems than it is to build simple ones. Skilled programmers may be able to create complexity more quickly than their peers, and more quickly than they can document and explain it. Like an army outrunning its logistics train, complexity increases until it reaches the point where such programmers can no longer reliably cope with it.\n\nThis is akin to a phenonmenon dubbed the PeterPrinciple of Programming by authors on the Wiki-Wiki web [Cunninghan 1999a]. Complexity increases rapidly until the it reaches a level of complexity just beyond that with which programmers can comfortably cope. At this point, complexity and our abilities to contain it reach an uneasy equilibrium. The blitzkrieg bogs down into a siege. We built the most complicated system that can possible work [Cunningham 1999b].\n\n\nSuch code can become a personal fiefdom, since the author care barely understand it anymore, and no one else can come close. Once simple repairs become all day affairs, as the code turns to mud. It becomes increasingly difficult for management to tell how long such repairs ought to take. Simple objectives turn into trench warfare. Everyone becomes resigned to a turgid pace. Some even come to prefer it, hiding in their cozy foxholes, and making their two line-per-day repairs.\n\nIt is interesting to ask whether some of the differences in productivity seen between hyper-productive organizations and typical shops are due not to differences in talent, but differences in terrain. Mud is hard to march through. The hacker in the trenches must engage complexity in hand-to-hand combat every day. Sometimes, complexity wins.\n\nStatus in the programmer's primate pecking order is often earned through ritual displays of cleverness, rather than through workman-like displays of simplicity and clarity. That which a culture glorifies will flourish.\n\nYet, a case can be made that the casual, undifferentiated structure of a **Big Ball of Mud** is one of its secret advantages, since forces acting between two parts of the system can be directly addressed without having to worry about undermining the system’s grander architectural aspirations. These aspirations are modest ones at best in the typical **Big Ball of Mud**. Indeed, a casual approach to architecture is emblematic of the early phases of a system’s evolution, as programmers, architects and users learn their way around the domain [Foote & Opdyke 1995]. During the PROTOTYPE and EXPANSIONARY PHASES of a systems evolution, expedient, white-box inheritance-based code borrowing, and a relaxed approach to encapsulation are common. Later, as experience with the system accrues, the grain of the architectural domain becomes discernable, and more durable black-box components begin to emerge. In other words, it’s okay if the system looks at first like a **Big Ball of Mud**, at least until you know better.\n\nMud-based Architecture\n\nv v v\n\nBrian Marick first suggested the name \"**Big Ball of Mud**\" as a name for these sort of architectures, and the observation that this was, perhaps, the dominant architecture currently deployed, during a meeting of the University of Illinois Software Architecture Group several years ago. We have been using the term ever since. The term itself, in turn, appears to have arisen during the '70s as a characterization of Lisp.\n\n**Big Ball of Mud** architectures often emerge from throw-away prototypes, or THROWAWAY CODE, because the prototype is kept, or the disposable code is never disposed of. (One might call these \"little balls of mud\".)\n\nThey also can emerge as gradual maintenance and PIECEMEAL GROWTH impinges upon the structure of a mature system. Once a system is working, a good way to encourage its growth is to KEEP IT WORKING. When the SHEARING LAYERS that emerge as change drives the system's evolution run against the existing grain of the system, its structure can be undermined, and the result can be a **Big Ball of Mud**.\n\nThe PROTOTYPE PHASE and EXPANSION PHASE patterns in [Foote & Opdyke 1995] both emphasize that a period of exploration and experimentation is often beneficial before making enduring architectural commitments.\n\nHowever, these activities, which can undermine a system's structure should be interspersed with CONSOLIDATION PHASES [Foote & Opdyke 1995], during which opportunities to refactor the system to enhance its structure are exploited. Proponents of Extreme Programming [Beck 2000] also emphasize continuous coding and refactoring.\n\n[Brand 1994] observes that buildings with large spaces punctuated with regular columns had the paradoxical effect of encouraging the innovative reuse of space precisely because they constrained the design space. Grandiose flights of architectural fancy weren’t possible, which reduced the number of design alternatives that could be put on the table. Sometimes FREEDOM FROM CHOICE [Foote 1988] is what we really want.\n\nOne of mud's most effective enemies is sunshine. Subjecting convoluted code to scrutiny can set the stage for its refactoring, repair, and rehabilitation. Code reviews are one mechanism one can use to expose code to daylight.\n\nAnother is the Extreme Programming practice of pair programming [Beck 2000]. A pure pair programming approach requires that every line of code written be added to the system with two programmers present. One types, or \"drives\", while the other \"rides shotgun\" and looks on. In contrast to traditional solitary software production practices, pair programming subjects code to immediate scrutiny, and provides a means by which knowledge about the system is rapidly disseminated.\n\nIndeed, reviews and pair programming provide programmers with something their work would not otherwise have: an audience. Sunlight, it is said is a powerful disinfectant. Pair-practices add an element of performance to programming. An immediate audience of one's peers provides immediate incentives to programmers to keep their code clear and comprehensible, as well as functional.\n\nAn additional benefit of pairing is that accumulated wisdom and best practices can be rapidly disseminated throughout an organization through successive pairings. This is, incidentally, the same benefit that sexual reproduction brought to the genome.\n\nBy contrast, if no one ever looks at code, everyone is free to think they are better than average at producing it. Programmers will, instead, respond to those relatively perverse incentives that do exist. Line of code metrics, design documents, and other indirect measurements of progress and quality can become central concerns.\n\nThere are three ways to deal with BIG BALLS OF MUD. The first is to keep the system healthy. Conscientiously alternating periods of EXPANSION with periods of CONSOLIDATION, refactoring and repair can maintain, and even enhance a system's structure as it evolves. The second is to throw the system away and start over. The RECONSTRUCTION pattern explores this drastic, but frequently necessary alternative. The third is to simply surrender to entropy, and wallow in the mire.\n\nSince the time of Roman architect Marcus Vitruvius, [Vitruvius 20 B.C.] architects have focused on his trinity of desirables: Firmitas (strength), Utilitas (utility), and Venustas (beauty). A **Big Ball of Mud** usually represents a triumph of utility over aesthetics, because workmanship is sacrificed for functionality. Structure and durability can be sacrificed as well, because an incomprehensible program defies attempts at maintenance. The frenzied, feature-driven \"bloatware\" phenomenon seen in many large consumer software products can be seen as evidence of designers having allowed purely utilitarian concerns to dominate software design.\n\n \n\n## THROWAWAY CODE\n\nalias: QUICK HACK, KLEENEX CODE, DISPOSABLE CODE, SCRIPTING, KILLER DEMO, PERMANENT PROTOTYPE, BOOMTOWN\n \n\nv v v\n\nA homeowner might erect a temporary storage shed or car port, with every intention of quickly tearing it down and replacing it with something more permanent. Such structures have a way of enduring indefinitely. The money expected to replace them might not become available. Or, once the new structure is constructed, the temptation to continue to use the old one for \"a while\" might be hard to resist.\n\nLikewise, when you are prototyping a system, you are not usually concerned with how elegant or efficient your code is. You know that you will only use it to prove a concept. Once the prototype is done, the code will be thrown away and written properly. As the time nears to demonstrate the prototype, the temptation to load it with impressive but utterly inefficient realizations of the system’s expected eventual functionality can be hard to resist. Sometimes, this strategy can be a bit too successful. The client, rather than funding the next phase of the project, may slate the prototype itself for release.\n\nYou need an immediate fix for a small problem, or a quick prototype or proof of concept.\nTime, or a lack thereof, is frequently the decisive force that drives programmers to write THROWAWAY CODE. Taking the time to write a proper, well thought out, well documented program might take more time that is available to solve a problem, or more time that the problem merits. Often, the programmer will make a frantic dash to construct a minimally functional program, while all the while promising him or herself that a better factored, more elegant version will follow thereafter. They may know full well that building a reusable system will make it easier to solve similar problems in the future, and that a more polished architecture would result in a system that was easier to maintain and extend.\n\nQuick-and-dirty coding is often rationalized as being a stopgap measure. All too often, time is never found for this follow up work. The code languishes, while the program flourishes.\n\nTherefore, produce, by any means available, simple, expedient, disposable code that adequately addresses just the problem at-hand.\nTHROWAWAY CODE is often written as an alternative to reusing someone else’s more complex code. When the deadline looms, the certainty that you can produce a sloppy program that works yourself can outweigh the unknown cost of learning and mastering someone else’s library or framework.\n\nProgrammers are usually not domain experts, especially at first. Use cases or CRC cards [Beck & Cunningham 1989] can help them to discover domain objects. However, nothing beats building a prototype to help a team learn its way around a domain.\n\nWhen you build a prototype, there is always the risk that someone will say \"that's good enough, ship it\". One way to minimize the risk of a prototype being put into production is to write the prototype in using a language or tool that you couldn't possibly use for a production version of your product. Proponents of\n\nExtreme Programming [Beck 2000] often construct quick, disposable prototypes called \"spike solutions\". Prototypes help us learn our way around the problem space, but should never be mistaken for good designs [Johnson & Foote 1988].\n\nNot every program need be a palace. A simple throwaway program is like a tent city or a mining boomtown, and often has no need for fifty year solutions to its problems, given that it will give way to a ghost town in five.\nThe real problem with\nTHROWAWAY CODE comes when it isn't thrown away.\n\nv v v\n\nThe production of THROWAWAY CODE is a nearly universal practice. Any software developer, at any skill or experience level, can be expected to have had at least occasional first-hand experience with this approach to software development. For example, in the patterns community, two examples of quick-and-dirty code that have endured are the PLoP online registration code, and the Wiki-Wiki Web pages.\n\nThe EuroPLoP/PLoP/UP online registration code was, in effect, a distributed web-based application that ran on four different machines on two continents. Conference information was maintained on a machine in St. Louis, while registration records were kept on machines in Illinois and Germany. The system could generate web-based reports of registration activity, and now even instantaneously maintaineed an online attendees list. It began life in 1995 as a quick-and-dirty collection of HTML, scavenged C demonstration code, and csh scripts. It was undertaken largely as an experiment in web-based form processing prior to PLoP ‘95, and, like so many things on the Web, succeeded considerably beyond the expectations of its authors. Today, it is still essentially the same collection of HTML, scavenged C demonstration code, and csh scripts. As such, it showcases how quick-and-dirty code can, when successful, take on a life of its own.\n\nThe original C code and scripts probably contained fewer than three dozen original lines of code. Many lines were cut-and-paste jobs that differed only in the specific text they generate, or fields that they check.\n\nHere’s an example of one of the scripts that generates the attendance report:\n\n```sh\necho \"<H2>Registrations: <B>\" `ls | wc -l` \"</B></H2>\"\necho \"<CODE>\"\necho \"Authors: <B>\" `grep 'Author = Yes' * | wc -l` \"</B>\"\necho \"<BR>\"\necho \"Non-Authors: <B>\" `grep 'Author = No' * | wc -l` \"</B>\"\necho \"<BR><BR>\"\n```\n\nThis script is slow and inefficient, particularly as the number of registrations increases, but not least among its virtues is the fact that it works. Were the number of attendees to exceed more than around one hundred, this script would start to perform so badly as to be unusable. However, since hundreds of attendees would exceed the physical capacity of the conference site, we knew the number of registrations would have been limited long before the performance of this script became a significant problem. So while this approach is, in general, a lousy way to address this problem, it is perfectly satisfactory within the confines of the particular purpose for which the script has ever actually been used. Such practical constraints are typical of THROWAWAY CODE, and are more often than not undocumented. For that matter, everything about THROWAWAY CODE is more often than not undocumented. When documentation exists, it is frequently not current, and often not accurate.\n\nThe Wiki-Web code at www.c2.com also started as a CGI experiment undertaken by Ward Cunningham also succeeded beyond the author’s expectations. The name \"wiki\" is one of Ward’s personal jokes, having been taken from a Hawaiian word for \"quick\" that the author had seen on an airport van on a vacation in Hawaii. Ward has subsequently used the name for a number of quick-and-dirty projects. The Wiki Web is unusual in that any visitor may change anything that anyone else has written indiscriminately. This would seem like a recipe for vandalism, but in practice, it has worked out well. In light of the system’s success, the author has subsequently undertaken additional work to polish it up, but the same quick-and-dirty Perl CGI core remains at the heart of the system.\n\nBoth systems might be thought of as being on the verge of graduating from little balls of mud to BIG BALLS OF MUD. The registration system’s C code metastasized from one of the NCSA HTTPD server demos, and still contains zombie code that testifies to this heritage. At each step, KEEPING IT WORKING is a premiere consideration in deciding whether to extend or enhance the system. Both systems might be good candidates for RECONSTRUCTION, were the resources, interest, and audience present to justify such an undertaking. In the mean time, these systems, which are still sufficiently well suited to the particular tasks for which they were built, remain in service. Keeping them on the air takes far less energy than rewriting them. They continue to evolve, in a PIECEMEAL fashion, a little at a time.\n\nYou can ameloriate the architectural erosion that can be caused by quick-and-dirty code by isolating it from other parts of your system, in its own objects, packages, or modules. To the extent that such code can be quarantined, its ability to affect the integrity of healthy parts of a system is reduced.\n\nOnce it becomes evident that a purportedly disposable artifact is going to be around for a while, one can turn one's attention to improving its structure, either through an iterative process of PIECEMEAL GROWTH, or via a fresh draft, as discussed in the RECONSTRUCTION pattern.\n\nRhyolite\n\nFrom boomtown to ghost town:\nThe mining town of Rhyolite, in Death Valley, was briefly the third largest city in Nevada.\nThen the ore ran out.\n\n \n\n## PIECEMEAL GROWTH\n\nalias: URBAN SPRAWL, ITERATIVE-INCREMENTAL DEVELOPMENT\n \n\nMir Complex\n\nThe Russian Mir (\"Peace\") Space Station Complex was designed for reconfiguration and modular growth. The Core module was launched in 1986, and the Kvant (\"Quantum\") and Kvant-2 modules joined the complex in 1987 and 1989. The Kristall (\"Crystal\") module was added in 1990. The Spektr (\"Spectrum\") and shuttle Docking modules were added in 1995, the latter surely a development not anticipated in 1986. The station’s final module, Priroda (\"Nature\"), was launched in 1996. The common core and independent maneuvering capabilities of several of the modules have allowed the complex to be rearranged several times as it has grown.\n\nUrban Sprawl in Colorado\nUrban planning has an uneven history of success. For instance, Washington D.C. was laid out according to a master plan designed by the French architect L’Enfant. The capitals of Brazil (Brasilia) and Nigeria (Abuja) started as paper cities as well. Other cities, such as Houston, have grown without any overarching plan to guide them. Each approach has its problems. For instance, the radial street plans in L’Enftant’s master plan become awkward past a certain distance from the center. The lack of any plan at all, on the other hand, leads to a patchwork of residential, commercial, and industrial areas that is dictated by the capricious interaction of local forces such as land ownership, capital, and zoning. Since concerns such as recreation, shopping close to homes, and noise and pollution away from homes are not brought directly into the mix, they are not adequately addressed.\n\nMost cities are more like Houston than Abuja. They may begin as settlements, subdivisions, docks, or railway stops. Maybe people were drawn by gold, or lumber, access to transportation, or empty land. As time goes on, certain settlements achieve a critical mass, and a positive feedback cycle ensues. The city’s success draws tradesmen, merchants, doctors, and clergymen. The growing population is able to support infrastructure, governmental institutions, and police protection. These, in turn, draw more people. Different sections of town develop distinct identities. With few exceptions, (Salt Lake City comes to mind) the founders of these settlements never stopped to think that they were founding major cities. Their ambitions were usually more modest, and immediate.\n\nBrasilia\n\nv v v\n\nIt has become fashionable over the last several years to take pot shots at the \"traditional\" waterfall process model. It may seem to the reader that attacking it is tantamount to flogging a dead horse. However, if it be a dead horse, it is a tenacious one. While the approach itself is seen by many as having been long since discredited, it has spawned a legacy of rigid, top-down, front-loaded processes and methodologies that endure, in various guises, to this day. We can do worse that examine the forces that led to its original development.\n\nIn the days before waterfall development, programming pioneers employed a simple, casual, relatively undisciplined \"code-and-fix\" approach to software development. Given the primitive nature of the problems of the day, this approach was frequently effective. However, the result of this lack of discipline was, all too often, a **Big Ball of Mud**.\n\nThe waterfall approach arose in response to this muddy morass. While the code-and-fix approach might have been suitable for small jobs, it did not scale well. As software became more complex, it would not do to simply gather a room full of programmers together and tell them to go forth and code. Larger projects demanded better planning and coordination. Why, it was asked, can't software be engineered like cars and bridges, with a careful analysis of the problem, and a detailed up-front design prior to implementation? Indeed, an examination of software development costs showed that problems were many times more expensive to fix during maintenance than during design. Surely it was best to mobilize resources and talent up-front, so as to avoid maintenance expenses down the road. It's surely wiser to route the plumbing correctly now, before the walls are up, than to tear holes in them later. Measure twice, cut once.\n\nOne of the reasons that the waterfall approach was able to flourish a generation ago was that computers and business requirements changed at a more leisurely pace. Hardware was very expensive, often dwarfing the salaries of the programmers hired to tend it. User interfaces were primitive by today's standards. You could have any user interface you wanted, as long as it was an alphanumeric \"green screen\". Another reason for the popularity of the waterfall approach was that it exhibited a comfortable similarity to practices in more mature engineering and manufacturing disciplines.\n\nToday's designers are confronted with a broad onslaught of changing requirements. It arises in part from the rapid growth of technology itself, and partially from rapid changes in the business climate (some of which is driven by technology). Customers are used to more sophisticated software these days, and demand more choice and flexibility. Products that were once built from the ground up by in-house programmers must now be integrated with third-party code and applications. User interfaces are complex, both externally and internally. Indeed, we often dedicate an entire tier of our system to their care and feeding. Change threatens to outpace our ability to cope with it.\n\nMaster plans are often rigid, misguided and out of date. Users’ needs change with time.\nChange: The fundamental problem with top-down design is that real world requirement are inevitably moving targets. You can't simply aspire to solve the problem at hand once and for all, because, by the time you're done, the problem will have changed out from underneath you. You can't simply do what the customer wants, for quite often, they don't know what they want. You can't simply plan, you have to plan to be able to adapt. If you can't fully anticipate what is going to happen, you must be prepared to be nimble.\n\nAesthetics: The goal of up-front design is to be able to discern and specify the significant architectural elements of a system before ground is broken for it. A superior design, given this mindset, is one that elegantly and completely specifies the system's structure before a single line of code has been written. Mismatches between these blueprints and reality are considered aberrations, and are treated as mistakes on the part of the designer. A better design would have anticipated these oversights. In the presence of volatile requirements, aspirations towards such design perfection are as vain as the desire for a hole-in-one on every hole.\n\nTo avoid such embarrassment, the designer may attempt to cover him or herself by specifying a more complicated, and more general solution to certain problems, secure in the knowledge that others will bear the burden of constructing these artifacts. When such predictions about where complexity is needed are correct, they can indeed be a source of power and satisfaction. This is part of their allure of Venustas. However, sometime the anticipated contingencies never arise, and the designer and implementers wind up having wasted effort solving a problem that no one has ever actually had. Other times, not only is the anticipated problem never encountered, its solution introduces complexity in a part of the system that turns out to need to evolve in another direction. In such cases, speculative complexity can be an unnecessary obstacle to subsequent adaptation. It is ironic that the impulse towards elegance can be an unintended source of complexity and clutter instead.\n\nIn its most virulent form, the desire to anticipate and head off change can lead to \"analysis paralysis\", as the thickening web of imagined contingencies grows to the point where the design space seems irreconcilably constrained.\n\nTherefore, incrementally address forces that encourage change and growth. Allow opportunities for growth to be exploited locally, as they occur. Refactor unrelentingly.\nSuccessful software attracts a wider audience, which can, in turn, place a broader range of requirements on it. These new requirements can run against the grain of the original design. Nonetheless, they can frequently be addressed, but at the cost of cutting across the grain of existing architectural assumptions. [Foote 1988] called this architectural erosion midlife generality loss.\n\nWhen designers are faced with a choice between building something elegant from the ground up, or undermining the architecture of the existing system to quickly address a problem, architecture usually loses. Indeed, this is a natural phase in a system’s evolution [Foote & Opdyke 1995]. This might be thought of as messy kitchen phase, during which pieces of the system are scattered across the counter, awaiting an eventual cleanup. The danger is that the clean up is never done. With real kitchens, the board of health will eventually intervene. With software, alas, there is seldom any corresponding agency to police such squalor. Uncontrolled growth can ultimately be a malignant force. The result of neglecting to contain it can be a **Big Ball of Mud**.\n\nIn How Buildings Learn, Brand [Brand 1994] observed that what he called High Road architecture often resulted in buildings that were expensive and difficult to change, while vernacular, Low Road buildings like bungalows and warehouses were, paradoxically, much more adaptable. Brand noted that Function melts form, and low road buildings are more amenable to such change. Similarly, with software, you may be reluctant to desecrate another programmer’s cathedral. Expedient changes to a low road system that exhibits no discernable architectural pretensions to begin with are easier to rationalize.\n\nIn the Oregon Experiment [Brand 1994][Alexander 1988] Alexander noted:\n\nLarge-lump development is based on the idea of replacement. Piecemeal Growth is based on the idea of repair. … Large-lump development is based on the fallacy that it is possible to build perfect buildings. Piecemeal growth is based on the healthier and more realistic view that mistakes are inevitable. … Unless money is available for repairing these mistakes, every building, once built, is condemned to be, to some extent unworkable. … Piecemeal growth is based on the assumption that adaptation between buildings and their users is necessarily a slow and continuous business which cannot, under any circumstances, be achieve in a single leap.\nAlexander has noted that our mortgage and capital expenditure policies make large sums of money available up front, but do nothing to provide resources for maintenance, improvement, and evolution [Brand 1994][Alexander 1988]. In the software world, we deploy our most skilled, experienced people early in the lifecycle. Later on, maintenance is relegated to junior staff, when resources can be scarce. The so-called maintenance phase is the part of the lifecycle in which the price of the fiction of master planning is really paid. It is maintenance programmers who are called upon to bear the burden of coping with the ever widening divergence between fixed designs and a continuously changing world. If the hypothesis that architectural insight emerges late in the lifecycle is correct, then this practice should be reconsidered.\n\nBrand went on to observe Maintenance is learning. He distinguishes three levels of learning in the context of systems. This first is habit, where a system dutifully serves its function within the parameters for which it was designed. The second level comes into play when the system must adapt to change. Here, it usually must be modified, and its capacity to sustain such modification determines it’s degree of adaptability. The third level is the most interesting: learning to learn. With buildings, adding a raised floor is an example. Having had to sustain a major upheaval, the system adapts so that subsequent adaptations will be much less painful.\n\nPIECEMEAL GROWTH can be undertaken in an opportunistic fashion, starting with the existing, living, breathing system, and working outward, a step at a time, in such a way as to not undermine the system’s viability. You enhance the program as you use it. Broad advances on all fronts are avoided. Instead, change is broken down into small, manageable chunks.\n\nOne of the most striking things about PIECEMEAL GROWTH is the role played by Feedback. Herbert Simon [Simon 1969] has observed that few of the adaptive systems that have been forged by evolution or shaped by man depend on prediction as their main means of coping with the future. He notes that two complementary mechanisms, homeostasis, and retrospective feedback, are often far more effective. Homeostasis insulates the system from short-range fluctuations in its environment, while feedback mechanisms respond to long-term discrepancies between a system's actual and desired behavior, and adjust it accordingly. Alexander [Alexander 1964] has written extensively of the roles that homeostasis and feedback play in adaptation as well.\n\nIf you can adapt quickly to change, predicting it becomes far less crucial. Hindsight, as Brand observes [Brand 1994] is better than foresight. Such rapid adaptation is the basis of one of the mantras of Extreme Programming [Beck 2000]: You're not going to need it.\n\nProponents of XP (as it is called) say to pretend you are not a smart as you think you are, and wait until this clever idea of yours is actually required before you take the time to bring it into being. In the cases where you were right, hey, you saw it coming, and you know what to do. In the cases where you were wrong, you won't have wasted any effort solving a problem you've never had when the design heads in an unanticipated direction instead.\n\nExtreme Programming relies heavily on feedback to keep requirements in sync with code, by emphasizing short (three week) iterations, and extensive, continuous consultation with users regarding design and development priorities throughout the development process. Extreme Programmers do not engage in extensive up-front planning. Instead, they produce working code as quickly as possible, and steer these prototypes towards what the users are looking for based on feedback.\n\nFeedback also plays a role in determining coding assignments. Coders who miss a deadline are assigned a different task during the next iteration, regardless of how close they may have been to completing the task. This form of feedback resembles the stern justice meted out by the jungle to the fruit of uncompetitive pairings.\n\nExtreme Programming also emphasizes testing as an integral part of the development process. Tests are developed, ideally, before the code itself. Code is continuously tested as it is developed.\n\nThere is a \"back-to-the-future\" quality to Extreme Programming. In many respects, it resembles the blind Code and Fix approach. The thing that distinguishes it is the central role played by feedback in driving the system's evolution. This evolution is abetted, in turn, by modern object-oriented languages and powerful refactoring tools.\n\nProponents of extreme programming portray it as placing minimal emphasis on planning and up-front design. They rely instead on feedback and continuous integration. We believe that a certain amount of up-front planning and design is not only important, but inevitable. No one really goes into any project blindly. The groundwork must be laid, the infrastructure must be decided upon, tools must be selected, and a general direction must be set. A focus on a shared architectural vision and strategy should be established early.\n\nUnbridled, change can undermine structure. Orderly change can enhance it. Change can engender malignant sprawl, or healthy, orderly growth.\n\nv v v\n\nA broad consensus that objects emerge from an iterative incremental evolutionary process has formed in the object-oriented community over the last decade. See for instance [Booch 1994]. The SOFTWARE TECTONICS pattern [Foote & Yoder 1996] examines how systems can incrementally cope with change.\n\nThe biggest risk associated with PIECEMEAL GROWTH is that it will gradually erode the overall structure of the system, and inexorably turn it into a **Big Ball of Mud**. A strategy of KEEPING IT WORKING goes hand in hand with PIECEMEAL GROWTH. Both patterns emphasize acute, local concerns at the expense of chronic, architectural ones.\n\nTo counteract these forces, a permanent commitment to CONSOLIDATION and refactoring must be made. It is through such a process that local and global forces are reconciled over time. This lifecyle perspective has been dubbed the fractal model [Foote & Opdyke 1995]. To quote Alexander [Brand 1994][Alexander 1988]:\n\nAn organic process of growth and repair must create a gradual sequence of changes, and these changes must be distributed evenly across all levels of scale. [In developing a college campus] there must be as much attention to the repair of details—rooms, wings of buildings, windows, paths—as to the creation of brand new buildings. Only then can the environment be balanced both as a whole, and in its parts, at every moment in its history.\n \n\n## KEEP IT WORKING\n\nalias: VITALITY, BABY STEPS, DAILY BUILD, FIRST, DO NO HARM\n\nProbably the greatest factor that keeps us moving forward is that we use the system all the time, and we keep trying to do new things with it. It is this \"living-with\" which drives us to root out failures, to clean up inconsistencies, and which inspires our occasional innovation.\n\nDaniel H. H. Ingalls [Ingalls 1983]\n\nFirst, Do No Harm\nOnce a city establishes its infrastructure, it is imperative that it be kept working. For example, if the sewers break, and aren’t quickly repaired, the consequences can escalate from merely unpleasant to genuinely life threatening. People come to expect that they can rely on their public utilities being available 24 hours per day. They (rightfully) expect to be able to demand that an outage be treated as an emergency.\n\nv v v\n\nSoftware can be like this. Often a business becomes dependent upon the data driving it. Businesses have become critically dependent on their software and computing infrastructures. There are numerous mission critical systems that must be on-the-air twenty-four hours a day/seven days per week. If these systems go down, inventories can not be checked, employees can not be paid, aircraft cannot be routed, and so on.\n\nThere may be times where taking a system down for a major overhaul can be justified, but usually, doing so is fraught with peril. However, once the system is brought back up, it is difficult to tell which from among a large collection of modifications might have caused a new problem. Every change is suspect. This is why deferring such integration is a recipe for misery. Capers Jones [Jones 1999] reported that the chance that a significant change might contain a new error--a phenomenon he ominously referred to as a Bad Fix Injection-- was about 7% in the United States. This may strike some readers as a low figure. Still, it's easy to see that compounding this possibility can lead to a situation where multiple upgrades are increasing likely to break a system.\n\nMaintenance needs have accumulated, but an overhaul is unwise, since you might break the system.\nWorkmanship: Architects who live in the house they are building have an obvious incentive to insure that things are done properly, since they will directly reap the consequences when they do not. The idea of the architect-builder is a central theme of Alexander's work. Who better to resolve the forces impinging upon each design issue as it arises as the person who is going to have to live with these decisions? The architect-builder will be the direct beneficiary of his or her own workmanship and care. Mistakes and shortcuts will merely foul his or her own nest.\n\nDependability: These days, people rely on our software artifacts for their very livelihoods, and even, at time, for their very safety. It is imperative that ill-advise changes to elements of a system do not drag the entire system down. Modern software systems are intricate, elaborate webs of interdependent elements. When an essential element is broken, everyone who depends on it will be affected. Deadlines can be missed, and tempers can flare. This problem is particularly acute in BIG BALLS OF MUD, since a single failure can bring the entire system down like a house of cards.\n\nTherefore, do what it takes to maintain the software and keep it going. Keep it working.\nWhen you are living in the system you’re building, you have an acute incentive not to break anything. A plumbing outage will be a direct inconvenience, and hence you have a powerful reason to keep it brief. You are, at times, working with live wires, and must exhibit particular care. A major benefit of working with a live system is that feedback is direct, and nearly immediate.\n\nOne of the strengths of this strategy is that modifications that break the system are rejected immediately. There are always a large number of paths forward from any point in a system’s evolution, and most of them lead nowhere. By immediately selecting only those that do not undermine the system’s viability, obvious dead-ends are avoided.\n\nOf course, this sort of reactive approach, that of kicking the nearest, meanest woolf from your door, is not necessarily globally optimal. Yet, by eliminating obvious wrong turns, only more insidiously incorrect paths remain. While these are always harder to identify and correct, they are, fortunately less numerous than those cases where the best immediate choice is also the best overall choice as well.\n\nIt may seem that this approach only accommodates minor modifications. This is not necessarily so. Large new subsystems might be constructed off to the side, perhaps by separate teams, and integrated with the running system in such a way as to minimize distruption.\n\nDesign space might be thought of as a vast, dark, largely unexplored forest. Useful potential paths through it might be thought of as encompassing working programs. The space off to the sides of these paths is much larger realm of non-working programs. From any given point, a few small steps in most directions take you from a working to a non-working program. From time to time, there are forks in the path, indicating a choice among working alternatives. In unexplored territory, the prudent strategy is never to stray too far from the path. Now, if one has a map, a shortcut through the trekless thicket that might save miles may be evident. Of course, pioneers, by definition, don’t have maps. By taking small steps in any direction, they know that it is never more than a few steps back to a working system.\n\nSome years ago, Harlan Mills proposed that any software system should be grown by incremental development. That is, the system first be made to run, even though it does nothing useful except call the proper set of dummy subprograms. Then, bit by bit, it is fleshed out, with the subprograms in turn being developed into actions or calls to empty stubs in the level below.\n\n…\n\nNothing in the past decade has so radically changed my own practice, and its effectiveness.\n\n…\n\nOne always has, at every stage, in the process, a working system. I find that teams can grow much more complex entities in four months than they can build.\n\n-- From \"No Silver Bullet\" [Brooks 1995]\n\nMicrosoft mandates that a DAILY BUILD of each product be performed at the end of each working day. Nortel adheres to the slightly less demanding requirement that a working build be generated at the end of each week [Brooks 1995][Cusumano & Shelby 1995]. Indeed, this approach, and keeping the last working version around, are nearly universal practices among successful maintenance programmers.\n\nAnother vital factor in ensuring a system's continued vitality is a commitment to rigorous testing [Marick 1995][Bach 1994]. It's hard to keep a system working if you don't have a way of making sure it works. Testing is one of pillars of Extreme Programming. XP practices call for the development of unit tests before a single line of code is written.\n\nv v v\n\nAlways beginning with a working system helps to encourage PIECEMEAL GROWTH. Refactoring is the primary means by which programmers maintain order from inside the systems in which they are working. The goal of refactoring is to leave a system working as well after a refactoring as it was before the refactoring. Aggressive unit and integration testing can help to guarantee that this goal is met.\n\n \n\n## SHEARING LAYERS\n\nHummingbird\n\nHummingbirds and flowers are quick, redwood trees are slow, and whole redwood forests are even slower. Most interaction is within the same pace level--hummingbirds and flowers pay attention to each other, oblivious to redwoods, who are oblivious to them.\n\nR. V. O'Neill , A Hierarchical Concept of Ecosystems\n\nThe notion of SHEARING LAYERS is one of the centerpieces of Brand's How Buildings Learn [Brand 1994]. Brand, in turn synthesized his ideas from a variety of sources, including British designer Frank Duffy, and ecologist R. V. O'Neill.\n\nBrand, Page 13\nBrand quotes Duffy as saying: \"Our basic argument is that there isn't any such thing as a building. A building properly conceived is several layers of longevity of built components\".\n\nBrand distilled Duffy's proposed layers into these six: Site, Structure, Skin, Services, Space Plan, and Stuff. Site is geographical setting. Structure is the load bearing elements, such as the foundation and skeleton. Skin is the exterior surface, such as siding and windows. Services are the circulatory and nervous systems of a building, such as its heating plant, wiring, and plumbing. The Space Plan includes walls, flooring, and ceilings. Stuff includes lamps, chairs, appliances, bulletin boards, and paintings.\n\nThese layers change at different rates. Site, they say, is eternal. Structure may last from 30 to 300 years. Skin lasts for around 20 years, as it responds to the elements, and to the whims of fashion. Services succumb to wear and technical obsolescence more quickly, in 7 to 15 years. Commercial Space Plans may turn over every 3 years. Stuff, is, of course, subject to unrelenting flux [Brand 1994].\n\nv v v\n\nSoftware systems cannot stand still. Software is often called upon to bear the brunt of changing requirements, because, being as that it is made of bits, it can change.\n\nDifferent artifacts change at different rates.\nAdaptability: A system that can cope readily with a wide range of requirements, will, all other things being equal, have an advantage over one that cannot. Such a system can allow unexpected requirements to be met with little or no reengineering, and allow its more skilled customers to rapidly address novel challenges.\n\nStability: Systems succeed by doing what they were designed to do as well as they can do it. They earn their niches, by bettering their competition along one or more dimensions such as cost, quality, features, and performance. See [Foote & Roberts 1998] for a discussion of the occasionally fickle nature of such completion. Once they have found their niche, for whatever reason, it is essential that short term concerns not be allowed to wash away the elements of the system that account for their mastery of their niche. Such victories are inevitably hard won, and fruits of such victories should not be squandered. Those parts of the system that do what the system does well must be protected from fads, whims, and other such spasms of poor judgement.\n\nAdaptability and Stability are forces that are in constant tension. On one hand, systems must be able to confront novelty without blinking. On the other, they should not squander their patrimony on spur of the moment misadventures.\n\nTherefore, factor your system so that artifacts that change at similar rates are together.\nMost interactions in a system tend to be within layers, or between adjacent layers. Individual layers tend to be about things that change at similar rates. Things that change at different rates diverge. Differential rates of change encourage layers to emerge. Brand notes as well that occupational specialties emerge along with these layers. The rate at which things change shapes our organizations as well. For instance, decorators and painters concern themselves with interiors, while architects dwell on site and skin. We expect to see things that evolve at different rates emerge as distinct concerns. This is \"separate that which changes from that which doesn't\" [Roberts & Johnson 1998] writ large.\n\nCan we identify such layers in software?\n\nWell, at the bottom, there are data. Things that change most quickly migrate into the data, since this is the aspect of software that is most amenable to change. Data, in turn, interact with users themselves, who produce and consume them.\n\nCode changes more slowly than data, and is the realm of programmers, analysts and designers. In object-oriented languages, things that will change quickly are cast as black-box polymorphic components. Elements that will change less often may employ white-box inheritance.\n\nThe abstract classes and components that constitute an object-oriented framework change more slowly than the applications that are built from them. Indeed, their role is to distill what is common, and enduring, from among the applications that seeded the framework.\n\nAs frameworks evolve, certain abstractions make their ways from individual applications into the frameworks and libraries that constitute the system's infrastructure [Foote 1988]. Not all elements will make this journey. Not all should. Those that do are among the most valuable legacies of the projects that spawn them. Objects help shearing layers to emerge, because they provide places where more fine-grained chunks of code and behavior that belong together can coalesce.\n\nThe Smalltalk programming language is built from a set of objects that have proven themselves to be of particular value to programmers. Languages change more slowly than frameworks. They are the purview of scholars and standards committees. One of the traditional functions of such bodies is to ensure that languages evolve at a suitably deliberate pace.\n\nArtifacts that evolve quickly provide a system with dynamism and flexibility. They allow a system to be fast on its feet in the face of change.\n\nSlowly evolving objects are bulwarks against change. They embody the wisdom that the system has accrued in its prior interactions with its environment. Like tenure, tradition, big corporations, and conservative politics, they maintain what has worked. They worked once, so they are kept around. They had a good idea once, so maybe they are a better than even bet to have another one.\n\nWide acceptance and deployment causes resistance to change. If changing something will break a lot of code, there is considerable incentive not to change it. For example, schema reorganization in large enterprise databases can be an expensive and time-consuming process. Database designers and administrators learn to resist change for this reason. Separate job descriptions, and separate hardware, together with distinct tiers, help to make these tiers distinct.\n\nThe phenomenon whereby distinct concerns emerge as distinct layers and tiers can be seen as well with graphical user interfaces.\n\nPart of the impetus behind using METADATA [Foote & Yoder 1998b] is the observation that pushing complexity and power into the data pushes that same power (and complexity) out of the realm of the programmer and into the realm of users themselves. Metadata are often used to model static facilities such as classes and schemas, in order to allow them to change dynamically. The effect is analogous to that seen with modular office furniture, which allows office workers to easily, quickly, and cheaply move partitions without having to enlist architects and contractors in the effort.\n\nOver time, our frameworks, abstract classes, and components come to embody what we've learned about the structure of the domains for which they are built. More enduring insights gravitate towards the primary structural elements of these systems. Things which find themselves in flux are spun out into the data, where users can interact with them. Software evolution becomes like a centrifuge spun by change. The layers that result, over time, can come to a much truer accommodation with the forces that shaped them than any top-down agenda could have devised.\n\nThings that are good have a certain kind of structure. You can’t get that structure except dynamically. Period. In nature you’ve got continuous very-small-feedback-loop adaptation going on, which is why things get to be harmonious. That’s why they have the qualities we value. If it wasn’t for the time dimension, it wouldn’t happen. Yet here we are playing the major role creating the world, and we haven’t figured this out. That is a very serious matter.\n\nChristopher Alexander -- [Brand 1994]\n\nRedwood\n\nv v v\n\nThis pattern has much in common with the HOT SPOTS pattern discussed in [Roberts & Johnson 1998]. Indeed, separating things that change from those that do not is what drives the emergence of SHEARING LAYERS. These layers are the result of such differential rates of change, while HOT SPOTS might be thought of as the rupture zones in the fault lines along which slippage between layers occurs. This tectonic slippage is suggestive as well of the SOFTWARE TECTONICS pattern [Foote & Yoder 1996], which recommends fine-grained iteration as a means of avoiding catastrophic upheaval. METADATA and ACTIVE OBJECT-MODELS [Foote & Yoder 1998b] allow systems to adapt more quickly to changing requirements by pushing power into the data, and out onto users.\n\n \n\n## SWEEPING IT UNDER THE RUG\n\nalias: POTEMKIN VILLAGE, HOUSECLEANING, PRETTY FACE, QUARANTINE, HIDING IT UNDER THE BED, REHABILITATION\n\nConcrete Sarcophagus\n\nOne of the most spectacular examples of sweeping a problem under the rug is the concrete sarcophagus that Soviet engineers constructed to put a 10,000 year lid on the infamous reactor number four at Chernobyl, in what is now Ukraine.\n\nIf you can’t make a mess go away, at least you can hide it. Urban renewal can begin by painting murals over graffiti and putting fences around abandoned property. Children often learn that a single heap in the closet is better than a scattered mess in the middle of the floor.\n\nv v v\n\nThere are reasons, other than aesthetic concerns, professional pride, and guilt for trying to clean up messy code. A deadline may be nearing, and a colleague may want to call a chunk of your code, if you could only come up with an interface through which it could be called. If you don’t come up with an easy to understand interface, they’ll just use someone else’s (perhaps inferior) code. You might be cowering during a code-review, as your peers trudge through a particularly undistinguished example of your work. You know that there are good ideas buried in there, but that if you don’t start to make them more evident, they may be lost.\n\nThere is a limit to how much chaos an individual can tolerate before being overwhelmed. At first glance, a **Big Ball of Mud** can inspire terror and despair in the hearts of those who would try to tame it. The first step on the road to architectural integrity can be to identify the disordered parts of the system, and isolate them from the rest of it. Once the problem areas are identified and hemmed in, they can be gentrified using a divide and conquer strategy.\n\nOvergrown, tangled, haphazard spaghetti code is hard to comprehend, repair, or extend, and tends to grow even worse if it is not somehow brought under control.\nThe Bondage of Gulliver\n\nComprehensibility: It should go without saying that comprehensible, attractive, well-engineered code will be easier to maintain and extend than complicated, convoluted code. However, it takes Time and money to overhaul sloppy code. Still, the Cost of allowing it to fester and continue to decline should not be underestimated.\n\nMorale: Indeed, the price of life with a **Big Ball of Mud** goes beyond the bottom line. Life in the muddy trenches can be a dispiriting fate. Making even minor modifications can lead to maintenance marathons. Programmers become timid, afraid that tugging at a loose thread may have unpredictable consequences. After a while, the myriad threads that couple every part of the system to every other come to tie the programmer down as surely as Gulliver among the Lilliputians [Swift 1726]. Talent may desert the project in the face of such bondage.\n\nIt should go without saying that comprehensible, attractive, well-engineered code will be easier to maintain and extend than complicated, convoluted code. However, it takes time and money to overhaul sloppy code. Still, the cost of allowing it to fester and continue to decline should not be underestimated.\n\nTherefore, if you can’t easily make a mess go away, at least cordon it off. This restricts the disorder to a fixed area, keeps it out of sight, and can set the stage for additional refactoring.\nBy getting the dirt into a single pile beneath the carpet, you at least know where it is, and can move it around. You’ve still got a pile of dirt on your hands, but it is localized, and your guests can’t see it. As the engineers who entombed reactor number four at Chernobly demonstrated, sometimes you've got to get a lid on a problem before you can get serious about cleaning things up. Once the problem area is contained, you can decontaminate at a more leisurely pace.\n\nUrban Decay\nTo begin to get a handle on spaghetti code, find those sections of it that seem less tightly coupled, and start to draw architectural boundaries there. Separate the global information into distinct data structures, and enforce communication between these enclaves using well-defined interfaces. Such steps can be the first ones on the road to re-establishing the system’s conceptual integrity, and discerning nascent architectural landmarks.\n\nPutting a fresh interface around a run down region of the system can be the first step on the way architectural rehabilitation. This is a long row to hoe, however. Distilling meaningful abstractions from a **Big Ball of Mud** is a difficult and demand task. It requires skill, insight, and persistence. At times, RECONSTRUCTION may seem like the less painful course. Still, it is not like unscrambling an egg. As with rehabilitation in the real world, restoring a system to architectural health requires resources, as well as a sustained commitment on the part of the people who live there.\n\nThe UIMX user interface builder for Unix and Motif, and the various Smalltalk GUI builders both provide a means for programmers to cordon off complexity in this fashion.\n\nv v v\n\nOne frequently constructs a FAÇADE [Gamma et. al. 1995] to put a congenial \"pretty face\" on the unpleasantness that is SWEPT UNDER THE RUG. Once these messy chunks of code have been quarantined, you can expose their functionality using INTENTION REVEALING SELECTORS [Beck 1997].\n\nThis can be the first step on the road to CONSOLIDATION too, since one can begin to hem in unregulated growth than may have occurred during PROTOTYPING or EXPANSION [Foote & Opdyke 1995]. [Foote & Yoder 1998a] explores how, ironically, inscrutable code can persist because it is difficult to comprehend.\n\nThis paper also examines how complexity can be hidden using suitable defaults (WORKS OUT OF THE BOX and PROGRAMMING-BY-DIFFERRENCE), and interfaces that gradually reveal additional capabilities as the client grows more sophisticated.\n\n \n\n## RECONSTRUCTION\n\nalias: TOTAL REWRITE, DEMOLITION, THROWAWAY THE FIRST ONE, START OVER\n\nFulton County Stadium Demolition\n\nAtlanta’s Fulton County Stadium was built in 1966 to serve as the home of baseball’s Atlanta Braves, and football’s Atlanta Falcons. In August of 1997, the stadium was demolished. Two factors contributed to its relatively rapid obsolescence. One was that the architecture of the original stadium was incapable of accommodating the addition of the \"sky-box\" suites that the spreadsheets of ‘90s sporting economics demanded. No conceivable retrofit could accommodate this requirement. Addressing it meant starting over, from the ground up. The second was that the stadium’s attempt to provide a cheap, general solution to the problem of providing a forum for both baseball and football audiences compromised the needs of both. In only thirty-one years, the balance among these forces had shifted decidedly. The facility is being replaced by two new single-purpose stadia.\n\nMight there be lessons for us about unexpected requirements and designing general components here?\n\nv v v\n\nPlan to Throw One Away (You Will Anyway) -- Brooks\n\nExtreme Programming [Beck 2000] had its genesis in the Chrysler Comprehensive Compensation project (C3). It began with a cry for help from a foundering project, and a decision to discard a year and a half's worth of work. The process they put in place after they started anew laid the foundation for XP, and the author's credit these approaches for the subsequent success of the C3 effort. However, less emphasis is given to value of the experience the team might have salvaged from their initial, unsuccessful draft. Could this first draft have been the unsung hero of this tale?\n\nYour code has declined to the point where it is beyond repair, or even comprehension.\nObsolescence: Of course, one reason to abandon a system is that it is in fact technically or economically obsolete. These are distinct situations. A system that is no longer state-of-the-art may still sell well, while a technically superior system may be overwhelmed by a more popular competitor for non-technical reasons.\n\nIn the realm of concrete and steel, blight is the symptom, and a withdrawal of capital is the cause. Of course, once this process begins, it can feed on itself. On the other hand, given a steady infusion of resources, buildings can last indefinitely. It's not merely entropy, but an unwillingness to counteract it, that allows buildings to decline. In Europe, neighborhoods have flourished for hundreds of years. They have avoided the boom/bust cycles that characterize some New World cities.\n\nChange: Even though software is a highly malleable medium, like Fulton County Stadium, new demands can, at times, cut across a system’s architectural assumptions in such a ways as to make accommodating them next to impossible. In such cases, a total rewrite might be the only answer.\n\nCost: Writing-off a system can be traumatic, both to those who have worked on it, and to those who have paid for it. Software is often treated as an asset by accountants, and can be an expensive asset at that. Rewriting a system, of course, does not discard its conceptual design, or its staff’s experience. If it is truly the case that the value of these assets is in the design experience they embody, then accounting practices must recognize this.\n\nOrganization: Rebuilding a system from scratch is a high-profile undertaking, that will demand considerable time and resources, which, in turn, will make high-level management support essential.\n\nTherefore, throw it away and start over.\nSometimes it’s just easier to throw a system away, and start over. Examples abound. Our shelves are littered with the discarded carcasses of obsolete software and its documentation. Starting over can be seen as a defeat at the hands of the old code, or a victory over it.\n\nPruitt-Igoe\nOne reason to start over might be that the previous system was written by people who are long gone. Doing a rewrite provides new personnel with a way to reestablish contact between the architecture and the implementation. Sometimes the only way to understand a system it is to write it yourself. Doing a fresh draft is a way to overcome neglect. Issues are revisited. A fresh draft adds vigor. You draw back to leap. The quagmire vanishes. The swamp is drained.\n\nAnother motivation for building a new system might be that you feel that you've got the experience you need to do the job properly. One way to have gotten this experience is to have participated at some level in the unsuccessful development of a previous version of the system.\n\nOf course, the new system is not designed in a vacuum. Brook’s famous tar pit is excavated, and the fossils are examined, to see what they can tell the living. It is essential that a thorough post-mortem review be done of the old system, to see what it did well, and why it failed. Bad code can bog down a good design. A good design can isolate and contain bad code.\n\nWhen a system becomes a **Big Ball of Mud**, its relative incomprehensibility may hasten its demise, by making it difficult for it to adapt. It can persist, since it resists change, but cannot evolve, for the same reason. Instead, its inscrutability, even when it is to its s hort-term benefit, sows the seeds of its ultimate demise.\n\nIf this makes muddiness a frequently terminal condition, is this really a bad thing? Or is it a blessing that these sclerotic systems yield the stage to more agile successors? Certainly, the departure of these ramshackle relics can be a cause for celebration as well as sadness.\n\nCheshire Cat\nDiscarding a system dispenses with its implementation, and leaves only its conceptual design behind. Only the patterns that underlie the system remain, grinning like a Cheshire cat. It is their spirits that help to shape the next implementation. With luck, these architectural insights will be reincarnated as genuine reusable artifacts in the new system, such as abstract classes and frameworks. It is by finding these architectural nuggets that the promise of objects and reuse can finally be fulfilled.\n\nThere are alternatives to throwning your system away and starting over. One is to embark on a regimen of incremental refactoring, to glean architectural elements and discernable abstractions from the mire. Indeed, you can begin by looking for coarse fissures along which to separate parts of the system, as was suggested in SWEEPING IT UNDER THE RUG. Of course, refactoring is more effective as a prophylactic measure that as a last-restort therapy. As with any edifice, it is a judgement call, whether to rehab or restort for the wrecking ball. Another alternative is to reassess whether new components and frameworks have come along that can replace all or part of the system. When you can reuse and retrofit other existing components, you can spare yourself the time and expense involved in rebuilding, repairing, and maintaining the one you have.\n\nThe United States Commerce Department defines durable goods as those that are designed to last for three years or more. This category traditionally applied to goods such as furniture, appliances, automobiles, and business machines. Ironically, as computer equipment is depreciating ever more quickly, it is increasingly our software artifacts, and not our hardware, that fulfill this criterion. Firmitas has come to the realm of bits and bytes.\n\nApple's Lisa Toolkit, and its successor, the Macintosh Toolbox, constitute one of the more intriguing examples of\nRECONSTRUCTION in the history of personal computing.\n\nAn architect's most useful tools are an eraser at the drafting board, and a wrecking bar at the site\n-- Frank Lloyd Wright\n\nv v v\n\nThe SOFTWARE TECTONICS pattern discussed in [Foote & Yoder 1996] observes that if incremental change is deferred indefinitely, major upheaval may be the only alternative. [Foote & Yoder 1998a] explores the WINNING TEAM phenomenon, whereby otherwise superior technical solutions are overwhelmed by non-technical exigencies.\n\nBrooks has eloquently observed that the most dangerous system an architect will ever design is his or her second system [Brooks 1995]. This is the notorious second-system effect. RECONSTRUCTION provides an opportunity for this misplaced hubris to exercise itself, so one must keep a wary eye open for it. Still, there are times when the best and only way to make a system better is to throw it away and start over. Indeed, one can do worse than to heed Brook's classic admonition that you should \"plan to throw one away, you will anyway\".\n\nMir over Fiji\n\nMir reenters the atmosphere over Fiji on 22 March, 2001\n\n## Conclusion\n\nIn the end, software architecture is about how we distill experience into wisdom, and disseminate it. We think the patterns herein stand alongside other work regarding software architecture and evolution that we cited as we went along. Still, we do not consider these patterns to be anti-patterns. There are good reasons that good programmers build BIG BALLS OF MUD. It may well be that the economics of the software world are such that the market moves so fast that long term architectural ambitions are foolhardy, and that expedient, slash-and-burn, disposable programming is, in fact, a state-of-the-art strategy. The success of these approaches, in any case, is undeniable, and seals their pattern-hood. People build\n\nBIG BALLS OF MUD because they work. In many domains, they are the only things that have been shown to work. Indeed, they work where loftier approaches have yet to demonstrate that they can compete.\n\nIt is not our purpose to condemn BIG BALLS OF MUD. Casual architecture is natural during the early stages of a system’s evolution. The reader must surely suspect, however, that our hope is that we can aspire to do better. By recognizing the forces and pressures that lead to architectural malaise, and how and when they might be confronted, we hope to set the stage for the emergence of truly durable artifacts that can put architects in dominant positions for years to come. The key is to ensure that the system, its programmers, and, indeed the entire organization, learn about the domain, and the architectural opportunities looming within it, as the system grows and matures.\n\nPeriods of moderate disorder are a part of the ebb and flow of software evolution. As a master chef tolerates a messy kitchen, developers must not be afraid to get a little mud on their shoes as they explore new territory for the first time. Architectural insight is not the product of master plans, but of hard won experience. The software architects of yesteryear had little choice other than to apply the lessons they learned in successive drafts of their systems, since RECONSTRUCTION was often the only practical means they had of supplanting a mediocre system with a better one. Objects, frameworks, components, and refactoring tools provide us with another alternative. Objects present a medium for expressing our architectural ideas at a level between coarse-grained applications and components and low level code. Refactoring tools and techniques finally give us the means to cultivate these artifacts as they evolve, and capture these insights.\n\nThe onion-domed Church of the Intercession of the Virgin on the Moat in Moscow is one of Russia's most famous landmarks. It was built by Tsar Ivan IV just outside of the Kremlin walls in 1552 to commemorate Russia's victory over the Tatars at Kazan. The church is better known by it's nickname, St. Basil's. Ivan too is better known by his nickname \"Ivan the Terrible\". Legend has it that once the cathedral was completed, Ivan, ever true to his reputation, had the architects blinded, so that they could never build anything more beautiful. Alas, the state of software architecture today is such that few of us need fear for our eyesight.\n\nSt. Basil's\n\n## Acknowledgments\n\nA lot of people have striven to help us avoid turning this paper into an unintentional example of its central theme. We are grateful first of all to the members of the University of Illinois Software Architecture Group, John Brant, Ian Chai, Ralph Johnson, Lewis Muir, Dragos Manolescu, Brian Marick, Eiji Nabika, John (Zhijiang) Han, Kevin Scheufele, Tim Ryan, Girish Maiya, Weerasak Wittawaskul, Alejandra Garrido, Peter Hatch, and Don Roberts, who commented on several drafts of this work over the last three years.\n\nWe’d like to also thank our tireless shepherd, Bobby Woolf, who trudged through the muck of several earlier versions of this paper.\n\nNaturally, we’d like to acknowledge the members of our PLoP ’97 Conference Writer’s Workshop, Norm Kerth, Hans Rohnert, Clark Evans, Shai Ben-Yehuda, Lorraine Boyd, Alejandra Garrido, Dragos Manolescu, Gerard Meszaros, Kyle Brown, Ralph Johnson, and Klaus Renzel.\n\nLorrie Boyd provided some particularly poignant observations on scale, and the human cost of projects that fail.\n\nUIUC Architecture professor Bill Rose provided some keen insights on the durability of housing stock, and history of the estrangement of architects from builders.\n\nThanks to Brad Appleton, Michael Beedle, Russ Hurlbut, and the rest of the people in the Chicago Patterns Group for their time, suggestions, and ruminations on reuse and reincarnation.\n\nThanks to Steve Berczuk and the members of the Boston Area Patterns Group for their review.\n\nThanks too to Joshua Kerievsky and the Design Patterns Study Group of New York City for their comments.\n\nWe'd like to express our gratitude as well to Paolo Cantoni, Chris Olufson, Sid Wright, John Liu, Martin Cohen, John Potter, Richard Helm, and James Noble of the Sydney Patterns Group, who workshopped this paper during the late winter, er, summer of early 1998.\n\nJohn Vlissides, Neil Harrison, Hans Rohnert, James Coplien, and Ralph Johnson provided some particularly candid, incisive and useful criticism of some of the later drafts of the paper.\n\nA number of readers have observed, over the years, that **Big Ball of Mud** has a certain dystopian, Dilbert-esque quality to it. We are grateful to United Features Syndicate, Inc. for not having, as of yet, asked us to remove the following cartoon from the web-based version of **Big Ball of Mud**.\n\nDilbert -- 6 April 1990\n\n## References\n\n\n[Alexander 1964]\nChristopher Alexander\nNotes on the Synthesis of Form\nHarvard University Press, Cambridge, MA, 1964\n\n[Alexander 1979]\nChristopher Alexander\nThe Timeless Way of Building\nOxford University Press, Oxford, UK, 1979\n\n[Alexander et. al 1977]\nC. Alexander, S. Ishikawa, and M. Silverstein\nA Pattern Language\nOxford University Press, Oxford, UK, 1977\n\n[Alexander 1988]\nChristopher Alexander\nThe Oregon Experiment\nOxford University Press, Oxford, UK, 1988\n\n[Bach 1997]\nJames Bach, Softwae Testing Labs\nGood Enough Software: Beyond the Buzzword\nIEEE Computer, August 1997\n\n[Beck 1997]\nKent Beck\nSmalltalk Best Practice Patterns\nPrentice Hall, Upper Saddle River, NJ, 1997\n\n[Beck & Cunningham 1989]\nKent Beck and Ward Cunningham\nA Laboratory for Teaching Object-Oriented Thinking\nOOPSLA '89 Proceedings\nNew Orleans, LA\nOctober 1-6 1989, pages 1-6\n\n[Beck 2000]\nKent Beck\nEmbracing Change: Extreme Programming Explained\nCambridge University Press, 2000\n\n[Booch 1994]\nGrady Booch\nObject-Oriented Analysis and Design with Applications\nBenjamin/Cummings, Redwood City, CA, 1994\n\n[Brand 1994]\nStewart Brand\nHow Buildings Learn: What Happens After They're Built\nViking Press, 1994\n\n[Brooks 1995]\nFrederick P. Brooks, Jr.\nThe Mythical Man-Month (Anniversary Edition)\nAddison-Wesley, Boston, MA, 1995\n\n[Brown et al. 1998]\nWilliam J. Brown, Raphael C. Malveau,\nHays W. \"Skip\" McCormick III, and Thomas J. Mobray\nAntipatterns: Refactoring, Software Architectures, and Projects in Crisis\nWiley Computer Publishing, John Wiley & Sons, Inc., 1998\n\n[Buschmann et al. 1996]\nFrank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, and Michael Stahl\nPattern-Oriented Software Architecture: A System of Patterns\nJohn Wiley and Sons, 1996\n\n[Coplien 1995]\nJames O. Coplien\nA Generative Development-Process Pattern Language\nFirst Conference on Pattern Languages of Programs (PLoP '94)\nMonticello, Illinois, August 1994\nPattern Languages of Program Design\nedited by James O. Coplien and Douglas C. Schmidt\nAddison-Wesley, 1995\n\n[Cunningham 1999a]\nWard Cunningham\nPeter Principle of Programming\nPortland Pattern Repository\n13 August 1999\nhttp://www.c2.com/cgi/wiki?PeterPrincipleProgramming\n\n[Cunningham 1999b]\nWard Cunningham\nThe Most Complicated Thing that Could Possible Work\nPortland Pattern Repository\n13 August 1999\nhttp://www.c2.com/cgi/wiki?TheMostComplexWhichCanBeMadeToWork\n\n[Cusumano & Shelby 1995]\nMichael A. Cusumano and Richard W. Shelby\nMicrosoft Secrets\nThe Free Press, New York, NY, 1995\n\n[Foote 1988]\nBrian Foote (Advisor: Ralph Johnson)\nDesigning to Facilitate Change with Object-Oriented Frameworks\nMasters Thesis, 1988\nDept. of Computer Science,\nUniversity of Illinois at Urbana-Champaign\n\n[Foote & Opdyke 1995]\nBrian Foote and William F. Opdyke\nLifecycle and Refactoring Patterns that Support Evolution and Reuse\nFirst Conference on Patterns Languages of Programs (PLoP '94)\nMonticello, Illinois, August 1994\nPattern Languages of Program Design\nedited by James O. Coplien and Douglas C. Schmidt\nAddison-Wesley, 1995\n\nThis volume is part of the Addison-Wesley Software Patterns Series.\n\n[Foote & Yoder 1996]\nBrian Foote and Joseph W. Yoder\nEvolution, Architecture, and Metamorphosis\nSecond Conference on Patterns Languages of Programs (PLoP '95)\nMonticello, Illinois, September 1995\nPattern Languages of Program Design 2\nedited by John M. Vlissides, James O. Coplien, and Norman L. Kerth\nAddison-Wesley, 1996\n\nThis volume is part of the Addison-Wesley Software Patterns Series.\n\n[Foote & Roberts 1998]\nBrian Foote and Don Roberts\nLingua Franca\nFifth Conference on Patterns Languages of Programs (PLoP '98)\nMonticello, Illinois, August 1998\nTechnical Report #WUCS-98-25 (PLoP '98/EuroPLoP '98), September 1998\nDepartment of Computer Science, Washington University\n\n[Foote & Yoder 1996]\nBrian Foote and Joseph W. Yoder\nEvolution, Architecture, and Metamorphosis\nSecond Conference on Patterns Languages of Programs (PLoP '95)\nMonticello, Illinois, September 1995\nPattern Languages of Program Design 2\nedited by John M. Vlissides, James O. Coplien, and Norman L. Kerth\nAddison-Wesley, 1996\n\nThis volume is part of the Addison-Wesley Software Patterns Series.\n\n[Foote & Yoder 1998a]\nBrian Foote and Joseph W. Yoder\nThe Selfish Class\nThird Conference on Patterns Languages of Programs (PLoP '96)\nMonticello, Illinois, September 1996\nTechnical Report #WUCS-97-07, September 1996\nDepartment of Computer Science, Washington University\nPattern Languages of Program Design 3\nedited by Robert Martin, Dirk Riehle, and Frank Buschmann \nAddison-Wesley, 1998\nhttp://www.laputan.org\n\nOrder from Amazon.com\n\nThis volume is part of the Addison-Wesley Software Patterns Series.\nBrian also wrote an introduction for this volume.\n\n[Foote & Yoder 1998b]\nBrian Foote and Joseph W. Yoder\nMetadata\nFifth Conference on Patterns Languages of Programs (PLoP '98)\nMonticello, Illinois, August 1998\nTechnical Report #WUCS-98-25 (PLoP '98/EuroPLoP '98), September 1998\nDepartment of Computer Science, Washington University\n\n[Fowler 1999]\nMartin Fowler\nRefactoring: Improving the Design of Existing Code\nAddison Wesley Longman, 1999\n\n[Gabriel 1991]\nRichard P. Gabriel \nLisp: Good News Bad News and How to Win Big\nhttp://www.laputan.org/gabriel/worse-is-better.html\n\n[Gabriel 1996]\nRichard P. Gabriel\nPatterns of Software: Tales from the Software Community\nOxford University Press, Oxford, UK, 1996\nhttp://www.oup-usa.org/\n\n[Gamma et al. 1995]\nEric Gamma, Richard Helm, Ralph Johnson, and John Vlissides\nDesign Patterns:  Elements of Reusable Object-Oriented Software\nAddison-Wesley Longman, Reading, MA, 1995\n\n[Garlan & Shaw 1993]\nDavid Garlan and Mary Shaw\nAn Introduction to Software Architecture\nV. Ambriola and G. Totora, editors\nAdvances in Software Engineering and Knowledge Engineering, Vol 2.\nSingapore: World Scientific Publishing, 1993, pp. 1-39\n\n[Ingalls 1983]\nDaniel H. H. Ingalls\nThe Evolution of the Smalltalk Virtual Machine\nSmalltalk-80: Bits of History, Words of Advice\nedited by Glenn Krasner\nAddison-Wesley, 1983\n\n[Johnson & Foote 1988]\nRalph Johnson and Brian Foote\nDesigning Reusable Classes\nJournal of Object-Oriented Programming\nVolume 1, Number 2, June/July 1988\n\n[Marick 1995]\nBrian Marick\nThe Craft of Software Testing\nPrentice-Hall, Upper Saddle River, NJ, 1995\n\n[Meszaros 1997]\nGerard Meszaros\nArchi-Patterns: A Process Pattern Language for Defining Architectures\nFourth Conference on Pattern Languages of Programs (PLoP '97)\nMonticello, Illinois, September 1997\n\n[Roberts & Johnson 1998]\nDon Roberts and Ralph E. Johnson\nEvolve Frameworks into Domain-Specific Languages\nThird Conference on Patterns Languages of Programs (PLoP '96)\nMonticello, Illinois, September 1996\nTechnical Report #WUCS-97-07, September 1996\nDepartment of Computer Science, Washington University\nPattern Languages of Program Design 3\nedited by Robert Martin, Dirk Riehle, and Frank Buschmann \nAddison-Wesley, 1998\n\n[Shaw 1996]\nMary Shaw\nSome Patterns for Software Architectures\nSecond Conference on Patterns Languages of Programs (PLoP '95)\nMonticello, Illinois, September 1995\nPattern Languages of Program Design 2\nedited by John M. Vlissides, James O. Coplien, and Norman L. Kerth\nAddison-Wesley, 1996\n\n[Simon 1969]\nHerbert A. Simon\nThe Sciences of the Artificial\nMIT Press, Cambridge, MA, 1969\n\n[Swift 1726]\nJohnathan Swift\nTravels Into Several Remote Nations Of The World. \nIn four parts. By Lemuel Gulliver, First a Surgeon, and then a Captain of several Ships.\nB. Motte, London, 1726.\n\n[Vitruvius 20 B.C.]\nMarcus Vitruvius Pollio (60 B.C-20 B.C.)\nDe Architectura\ntranslated by Joseph Gwilt\nPriestley and Weale, London, 1826",
    "code": "var Component=(()=>{var dn=Object.create;var R=Object.defineProperty;var cn=Object.getOwnPropertyDescriptor;var un=Object.getOwnPropertyNames;var mn=Object.getPrototypeOf,hn=Object.prototype.hasOwnProperty;var G=(c,e)=>()=>(e||c((e={exports:{}}).exports,e),e.exports),bn=(c,e)=>{for(var p in e)R(c,p,{get:e[p],enumerable:!0})},Ne=(c,e,p,x)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let _ of un(e))!hn.call(c,_)&&_!==p&&R(c,_,{get:()=>e[_],enumerable:!(x=cn(e,_))||x.enumerable});return c};var fn=(c,e,p)=>(p=c!=null?dn(mn(c)):{},Ne(e||!c||!c.__esModule?R(p,\"default\",{value:c,enumerable:!0}):p,c)),pn=c=>Ne(R({},\"__esModule\",{value:!0}),c);var ve=G((wn,we)=>{we.exports=React});var Te=G(z=>{\"use strict\";(function(){\"use strict\";var c=ve(),e=Symbol.for(\"react.element\"),p=Symbol.for(\"react.portal\"),x=Symbol.for(\"react.fragment\"),_=Symbol.for(\"react.strict_mode\"),J=Symbol.for(\"react.profiler\"),K=Symbol.for(\"react.provider\"),$=Symbol.for(\"react.context\"),V=Symbol.for(\"react.forward_ref\"),B=Symbol.for(\"react.suspense\"),W=Symbol.for(\"react.suspense_list\"),S=Symbol.for(\"react.memo\"),M=Symbol.for(\"react.lazy\"),Se=Symbol.for(\"react.offscreen\"),X=Symbol.iterator,Ae=\"@@iterator\";function Ee(t){if(t===null||typeof t!=\"object\")return null;var o=X&&t[X]||t[Ae];return typeof o==\"function\"?o:null}var w=c.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function h(t){{for(var o=arguments.length,a=new Array(o>1?o-1:0),i=1;i<o;i++)a[i-1]=arguments[i];Oe(\"error\",t,a)}}function Oe(t,o,a){{var i=w.ReactDebugCurrentFrame,l=i.getStackAddendum();l!==\"\"&&(o+=\"%s\",a=a.concat([l]));var d=a.map(function(s){return String(s)});d.unshift(\"Warning: \"+o),Function.prototype.apply.call(console[t],console,d)}}var Pe=!1,Ie=!1,Re=!1,Be=!1,We=!1,Q;Q=Symbol.for(\"react.module.reference\");function Me(t){return!!(typeof t==\"string\"||typeof t==\"function\"||t===x||t===J||We||t===_||t===B||t===W||Be||t===Se||Pe||Ie||Re||typeof t==\"object\"&&t!==null&&(t.$$typeof===M||t.$$typeof===S||t.$$typeof===K||t.$$typeof===$||t.$$typeof===V||t.$$typeof===Q||t.getModuleId!==void 0))}function Le(t,o,a){var i=t.displayName;if(i)return i;var l=o.displayName||o.name||\"\";return l!==\"\"?a+\"(\"+l+\")\":a}function Z(t){return t.displayName||\"Context\"}function g(t){if(t==null)return null;if(typeof t.tag==\"number\"&&h(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"),typeof t==\"function\")return t.displayName||t.name||null;if(typeof t==\"string\")return t;switch(t){case x:return\"Fragment\";case p:return\"Portal\";case J:return\"Profiler\";case _:return\"StrictMode\";case B:return\"Suspense\";case W:return\"SuspenseList\"}if(typeof t==\"object\")switch(t.$$typeof){case $:var o=t;return Z(o)+\".Consumer\";case K:var a=t;return Z(a._context)+\".Provider\";case V:return Le(t,t.render,\"ForwardRef\");case S:var i=t.displayName||null;return i!==null?i:g(t.type)||\"Memo\";case M:{var l=t,d=l._payload,s=l._init;try{return g(s(d))}catch{return null}}}return null}var N=Object.assign,C=0,ee,ne,te,oe,ae,ie,re;function se(){}se.__reactDisabledLog=!0;function De(){{if(C===0){ee=console.log,ne=console.info,te=console.warn,oe=console.error,ae=console.group,ie=console.groupCollapsed,re=console.groupEnd;var t={configurable:!0,enumerable:!0,value:se,writable:!0};Object.defineProperties(console,{info:t,log:t,warn:t,error:t,group:t,groupCollapsed:t,groupEnd:t})}C++}}function je(){{if(C--,C===0){var t={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:N({},t,{value:ee}),info:N({},t,{value:ne}),warn:N({},t,{value:te}),error:N({},t,{value:oe}),group:N({},t,{value:ae}),groupCollapsed:N({},t,{value:ie}),groupEnd:N({},t,{value:re})})}C<0&&h(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\")}}var L=w.ReactCurrentDispatcher,D;function A(t,o,a){{if(D===void 0)try{throw Error()}catch(l){var i=l.stack.trim().match(/\\n( *(at )?)/);D=i&&i[1]||\"\"}return`\n`+D+t}}var j=!1,E;{var Fe=typeof WeakMap==\"function\"?WeakMap:Map;E=new Fe}function le(t,o){if(!t||j)return\"\";{var a=E.get(t);if(a!==void 0)return a}var i;j=!0;var l=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var d;d=L.current,L.current=null,De();try{if(o){var s=function(){throw Error()};if(Object.defineProperty(s.prototype,\"props\",{set:function(){throw Error()}}),typeof Reflect==\"object\"&&Reflect.construct){try{Reflect.construct(s,[])}catch(y){i=y}Reflect.construct(t,[],s)}else{try{s.call()}catch(y){i=y}t.call(s.prototype)}}else{try{throw Error()}catch(y){i=y}t()}}catch(y){if(y&&i&&typeof y.stack==\"string\"){for(var r=y.stack.split(`\n`),b=i.stack.split(`\n`),u=r.length-1,m=b.length-1;u>=1&&m>=0&&r[u]!==b[m];)m--;for(;u>=1&&m>=0;u--,m--)if(r[u]!==b[m]){if(u!==1||m!==1)do if(u--,m--,m<0||r[u]!==b[m]){var f=`\n`+r[u].replace(\" at new \",\" at \");return t.displayName&&f.includes(\"<anonymous>\")&&(f=f.replace(\"<anonymous>\",t.displayName)),typeof t==\"function\"&&E.set(t,f),f}while(u>=1&&m>=0);break}}}finally{j=!1,L.current=d,je(),Error.prepareStackTrace=l}var T=t?t.displayName||t.name:\"\",xe=T?A(T):\"\";return typeof t==\"function\"&&E.set(t,xe),xe}function He(t,o,a){return le(t,!1)}function qe(t){var o=t.prototype;return!!(o&&o.isReactComponent)}function O(t,o,a){if(t==null)return\"\";if(typeof t==\"function\")return le(t,qe(t));if(typeof t==\"string\")return A(t);switch(t){case B:return A(\"Suspense\");case W:return A(\"SuspenseList\")}if(typeof t==\"object\")switch(t.$$typeof){case V:return He(t.render);case S:return O(t.type,o,a);case M:{var i=t,l=i._payload,d=i._init;try{return O(d(l),o,a)}catch{}}}return\"\"}var P=Object.prototype.hasOwnProperty,de={},ce=w.ReactDebugCurrentFrame;function I(t){if(t){var o=t._owner,a=O(t.type,t._source,o?o.type:null);ce.setExtraStackFrame(a)}else ce.setExtraStackFrame(null)}function Ue(t,o,a,i,l){{var d=Function.call.bind(P);for(var s in t)if(d(t,s)){var r=void 0;try{if(typeof t[s]!=\"function\"){var b=Error((i||\"React class\")+\": \"+a+\" type `\"+s+\"` is invalid; it must be a function, usually from the `prop-types` package, but received `\"+typeof t[s]+\"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");throw b.name=\"Invariant Violation\",b}r=t[s](o,s,i,a,null,\"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\")}catch(u){r=u}r&&!(r instanceof Error)&&(I(l),h(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\",i||\"React class\",a,s,typeof r),I(null)),r instanceof Error&&!(r.message in de)&&(de[r.message]=!0,I(l),h(\"Failed %s type: %s\",a,r.message),I(null))}}}var Ye=Array.isArray;function F(t){return Ye(t)}function Ge(t){{var o=typeof Symbol==\"function\"&&Symbol.toStringTag,a=o&&t[Symbol.toStringTag]||t.constructor.name||\"Object\";return a}}function ze(t){try{return ue(t),!1}catch{return!0}}function ue(t){return\"\"+t}function me(t){if(ze(t))return h(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\",Ge(t)),ue(t)}var k=w.ReactCurrentOwner,Je={key:!0,ref:!0,__self:!0,__source:!0},he,be,H;H={};function Ke(t){if(P.call(t,\"ref\")){var o=Object.getOwnPropertyDescriptor(t,\"ref\").get;if(o&&o.isReactWarning)return!1}return t.ref!==void 0}function $e(t){if(P.call(t,\"key\")){var o=Object.getOwnPropertyDescriptor(t,\"key\").get;if(o&&o.isReactWarning)return!1}return t.key!==void 0}function Xe(t,o){if(typeof t.ref==\"string\"&&k.current&&o&&k.current.stateNode!==o){var a=g(k.current.type);H[a]||(h('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',g(k.current.type),t.ref),H[a]=!0)}}function Qe(t,o){{var a=function(){he||(he=!0,h(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",o))};a.isReactWarning=!0,Object.defineProperty(t,\"key\",{get:a,configurable:!0})}}function Ze(t,o){{var a=function(){be||(be=!0,h(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",o))};a.isReactWarning=!0,Object.defineProperty(t,\"ref\",{get:a,configurable:!0})}}var en=function(t,o,a,i,l,d,s){var r={$$typeof:e,type:t,key:o,ref:a,props:s,_owner:d};return r._store={},Object.defineProperty(r._store,\"validated\",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(r,\"_self\",{configurable:!1,enumerable:!1,writable:!1,value:i}),Object.defineProperty(r,\"_source\",{configurable:!1,enumerable:!1,writable:!1,value:l}),Object.freeze&&(Object.freeze(r.props),Object.freeze(r)),r};function nn(t,o,a,i,l){{var d,s={},r=null,b=null;a!==void 0&&(me(a),r=\"\"+a),$e(o)&&(me(o.key),r=\"\"+o.key),Ke(o)&&(b=o.ref,Xe(o,l));for(d in o)P.call(o,d)&&!Je.hasOwnProperty(d)&&(s[d]=o[d]);if(t&&t.defaultProps){var u=t.defaultProps;for(d in u)s[d]===void 0&&(s[d]=u[d])}if(r||b){var m=typeof t==\"function\"?t.displayName||t.name||\"Unknown\":t;r&&Qe(s,m),b&&Ze(s,m)}return en(t,r,b,l,i,k.current,s)}}var q=w.ReactCurrentOwner,fe=w.ReactDebugCurrentFrame;function v(t){if(t){var o=t._owner,a=O(t.type,t._source,o?o.type:null);fe.setExtraStackFrame(a)}else fe.setExtraStackFrame(null)}var U;U=!1;function Y(t){return typeof t==\"object\"&&t!==null&&t.$$typeof===e}function pe(){{if(q.current){var t=g(q.current.type);if(t)return`\n\nCheck the render method of \\``+t+\"`.\"}return\"\"}}function tn(t){{if(t!==void 0){var o=t.fileName.replace(/^.*[\\\\\\/]/,\"\"),a=t.lineNumber;return`\n\nCheck your code at `+o+\":\"+a+\".\"}return\"\"}}var ge={};function on(t){{var o=pe();if(!o){var a=typeof t==\"string\"?t:t.displayName||t.name;a&&(o=`\n\nCheck the top-level render call using <`+a+\">.\")}return o}}function ye(t,o){{if(!t._store||t._store.validated||t.key!=null)return;t._store.validated=!0;var a=on(o);if(ge[a])return;ge[a]=!0;var i=\"\";t&&t._owner&&t._owner!==q.current&&(i=\" It was passed a child from \"+g(t._owner.type)+\".\"),v(t),h('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',a,i),v(null)}}function _e(t,o){{if(typeof t!=\"object\")return;if(F(t))for(var a=0;a<t.length;a++){var i=t[a];Y(i)&&ye(i,o)}else if(Y(t))t._store&&(t._store.validated=!0);else if(t){var l=Ee(t);if(typeof l==\"function\"&&l!==t.entries)for(var d=l.call(t),s;!(s=d.next()).done;)Y(s.value)&&ye(s.value,o)}}}function an(t){{var o=t.type;if(o==null||typeof o==\"string\")return;var a;if(typeof o==\"function\")a=o.propTypes;else if(typeof o==\"object\"&&(o.$$typeof===V||o.$$typeof===S))a=o.propTypes;else return;if(a){var i=g(o);Ue(a,t.props,\"prop\",i,t)}else if(o.PropTypes!==void 0&&!U){U=!0;var l=g(o);h(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\",l||\"Unknown\")}typeof o.getDefaultProps==\"function\"&&!o.getDefaultProps.isReactClassApproved&&h(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\")}}function rn(t){{for(var o=Object.keys(t.props),a=0;a<o.length;a++){var i=o[a];if(i!==\"children\"&&i!==\"key\"){v(t),h(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\",i),v(null);break}}t.ref!==null&&(v(t),h(\"Invalid attribute `ref` supplied to `React.Fragment`.\"),v(null))}}function sn(t,o,a,i,l,d){{var s=Me(t);if(!s){var r=\"\";(t===void 0||typeof t==\"object\"&&t!==null&&Object.keys(t).length===0)&&(r+=\" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");var b=tn(l);b?r+=b:r+=pe();var u;t===null?u=\"null\":F(t)?u=\"array\":t!==void 0&&t.$$typeof===e?(u=\"<\"+(g(t.type)||\"Unknown\")+\" />\",r=\" Did you accidentally export a JSX literal instead of a component?\"):u=typeof t,h(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\",u,r)}var m=nn(t,o,a,l,d);if(m==null)return m;if(s){var f=o.children;if(f!==void 0)if(i)if(F(f)){for(var T=0;T<f.length;T++)_e(f[T],t);Object.freeze&&Object.freeze(f)}else h(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");else _e(f,t)}return t===x?rn(m):an(m),m}}var ln=sn;z.Fragment=x,z.jsxDEV=ln})()});var ke=G((Tn,Ce)=>{\"use strict\";Ce.exports=Te()});var xn={};bn(xn,{default:()=>_n,frontmatter:()=>gn});var n=fn(ke()),gn={title:\"Big Ball of Mud\",excerpt:'I wrotes these principles down in 2015. At the time they felt \"visionary\". Looking back now I love these principles even more, but they seem obvious and ordinary now.',coverImage:\"/assets/blog/img/arch_principles.jpg\",date:\"2023-04-20\",published:!1,author:{name:\"Dan Stroot\",picture:\"/assets/blog/authors/dan.jpeg\"},ogImage:{url:\"/assets/blog/img/arch_principles.jpg\"},seoURL:null};function Ve(c){let e=Object.assign({h1:\"h1\",p:\"p\",a:\"a\",h2:\"h2\",ul:\"ul\",li:\"li\",strong:\"strong\",ol:\"ol\",pre:\"pre\",code:\"code\",span:\"span\"},c.components);return(0,n.jsxDEV)(n.Fragment,{children:[(0,n.jsxDEV)(e.h1,{id:\"big-ball-of-mud\",children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:15,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Brian Foote and Joseph Yoder\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:17,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Department of Computer Science\nUniversity of Illinois at Urbana-Champaign\n1304 W. Springfield\nUrbana, IL 61801 USA`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:19,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[(0,n.jsxDEV)(e.a,{href:\"mailto:foote@cs.uiuc.edu\",children:\"foote@cs.uiuc.edu\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:24,columnNumber:1},this),` (217) 328-3523\n`,(0,n.jsxDEV)(e.a,{href:\"mailto:yoder@cs.uiuc.edu\",children:\"yoder@cs.uiuc.edu\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:25,columnNumber:1},this),\" (217) 244-4695\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:24,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Saturday, June 26, 1999\nFourth Conference on Patterns Languages of Programs (PLoP '97/EuroPLoP '97)\nMonticello, Illinois, September 1997\nTechnical Report #WUCS-97-34 (PLoP '97/EuroPLoP '97), September 1997\nDepartment of Computer Science, Washington University\nChapter 29\nPattern Languages of Program Design 4\nedited by Neil Harrison, Brian Foote, and Hans Rohnert\nAddison-Wesley, 2000\nThis volume is part of the Addison-Wesley Software Patterns Series.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:27,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[(0,n.jsxDEV)(e.a,{href:\"http://www.laputan.org/mud/mud.html#BigBallOfMud\",children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:38,columnNumber:1},this),`\nThis paper is also available in the following formats: [PDF] [Word] [RTF] [PostScript]`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:38,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Also by Brian Foote and Joseph Yoder\nArchitecture, Evolution, and Metamorphosis\nThe Selfish Class`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:41,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"This paper was twice featured in Slashdot\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:45,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Badge\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:47,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"contents\",children:\"Contents\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:49,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.ul,{children:[`\n`,(0,n.jsxDEV)(e.li,{children:\"Abstract\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:51,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"Introduction\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:52,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"Forces\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:53,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:54,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"Throwaway Code\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:55,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"Piecemeal Growth\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:56,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"Keep It Working\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:57,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"Shearing Layers\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:58,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"Sweeping It Under The Rug\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:59,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"Reconstruction\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:60,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"Conclusion\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:61,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"Acknowledgments\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:62,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"References\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:63,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:51,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"abstract\",children:\"Abstract\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:65,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"While much attention has been focused on high-level software architectural patterns, what is, in effect, the de-facto standard software architecture is seldom discussed. This paper examines this most frequently deployed of software architectures: the \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:67,columnNumber:252},this),\". A \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:67,columnNumber:275},this),\" is a casually, even haphazardly, structured system. Its organization, if one can call it that, is dictated more by expediency than design. Yet, its enduring popularity cannot merely be indicative of a general disregard for architecture.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:67,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"These patterns explore the forces that encourage the emergence of a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:69,columnNumber:69},this),\", and the undeniable effectiveness of this approach to software architecture. What are the people who build them doing right? If more high-minded architectural approaches are to compete, we must understand what the forces that lead to a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:69,columnNumber:325},this),\" are, and examine alternative ways to resolve them.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:69,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"A number of additional patterns emerge out of the \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:71,columnNumber:51},this),\". We discuss them in turn. Two principal questions underlie these patterns: Why are so many existing systems architecturally undistinguished, and what can we do to improve them?\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:71,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"introduction\",children:\"Introduction\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:73,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Over the last several years, a number of authors [Garlan & Shaw 1993] [Shaw 1996] [Buschmann et. al. 1996] [Meszaros 1997] have presented patterns that characterize high-level software architectures, such as PIPELINE and LAYERED ARCHITECTURE. In an ideal world, every system would be an exemplar of one or more such high-level patterns. Yet, this is not so. The architecture that actually predominates in practice has yet to be discussed: the \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:75,columnNumber:444},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:75,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Lennon Serves Too Much Spaghetti\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:77,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"A \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:79,columnNumber:3},this),\" is haphazardly structured, sprawling, sloppy, duct-tape and bailing wire, spaghetti code jungle. We\\u2019ve all seen them. These systems show unmistakable signs of unregulated growth, and repeated, expedient repair. Information is shared promiscuously among distant elements of the system, often to the point where nearly all the important information becomes global or duplicated. The overall structure of the system may never have been well defined. If it was, it may have eroded beyond recognition. Programmers with a shred of architectural sensibility shun these quagmires. Only those who are unconcerned about architecture, and, perhaps, are comfortable with the inertia of the day-to-day chore of patching the holes in these failing dikes, are content to work on such systems.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:79,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Still, this approach endures and thrives. Why is this architecture so popular? Is it as bad as it seems, or might it serve as a way-station on the road to more enduring, elegant artifacts? What forces drive good programmers to build ugly systems? Can we avoid this? Should we? How can we make such systems better?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:81,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"We present the following seven patterns:\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:83,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.ol,{children:[`\n`,(0,n.jsxDEV)(e.li,{children:\"BIG BALL OF MUD\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:85,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"THROWAWAY CODE\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:86,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"PIECEMEAL GROWTH\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:87,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"KEEP IT WORKING\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:88,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"SHEARING LAYERS\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:89,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"SWEEPING IT UNDER THE RUG\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:90,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.li,{children:\"RECONSTRUCTION\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:91,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:85,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Why does a system become a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:93,columnNumber:28},this),\"? Sometimes, big, ugly systems emerge from THROWAWAY CODE. THROWAWAY CODE is quick-and-dirty code that was intended to be used only once and then discarded. However, such code often takes on a life of its own, despite casual structure and poor or non-existent documentation. It works, so why fix it? When a related problem arises, the quickest way to address it might be to expediently modify this working code, rather than design a proper, general program from the ground up. Over time, a simple throwaway program begets a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:93,columnNumber:571},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:93,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Even systems with well-defined architectures are prone to structural erosion. The relentless onslaught of changing requirements that any successful system attracts can gradually undermine its structure. Systems that were once tidy become overgrown as PIECEMEAL GROWTH gradually allows elements of the system to sprawl in an uncontrolled fashion.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:95,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"If such sprawl continues unabated, the structure of the system can become so badly compromised that it must be abandoned. As with a decaying neighborhood, a downward spiral ensues. Since the system becomes harder and harder to understand, maintenance becomes more expensive, and more difficult. Good programmers refuse to work there. Investors withdraw their capital. And yet, as with neighborhoods, there are ways to avoid, and even reverse, this sort of decline. As with anything else in the universe, counteracting entropic forces requires an investment of energy. Software gentrification is no exception. The way to arrest entropy in software is to refactor it. A sustained commitment to refactoring can keep a system from subsiding into a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:97,columnNumber:745},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:97,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"A major flood, fire, or war may require that a city be evacuated and rebuilt from the ground up. More often, change takes place a building or block at a time, while the city as a whole continues to function. Once established, a strategy of KEEPING IT WORKING preserves a municipality\\u2019s vitality as it grows.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:99,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Systems and their constituent elements evolve at different rates. As they do, things that change quickly tend to become distinct from things that change more slowly. The SHEARING LAYERS that develop between them are like fault lines or facets that help foster the emergence of enduring abstractions.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:101,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"A simple way to begin to control decline is to cordon off the blighted areas, and put an attractive fa\\xE7ade around them. We call this strategy SWEEPING IT UNDER THE RUG. In more advanced cases, there may be no alternative but to tear everything down and start over. When total RECONSTRUCTION becomes necessary, all that is left to salvage is the patterns that underlie the experience.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:103,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Some of these patterns might appear at first to be antipatterns [Brown et al. 1998] or straw men, but they are not, at least in the customary sense. Instead, they seek to examine the gap between what we preach and what we practice.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:105,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Still, some of them may strike some readers as having a schizoid quality about them. So, for the record, let us put our cards on the table. We are in favor of good architecture.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:107,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Our ultimate agenda is to help drain these swamps. Where possible, architectural decline should be prevented, arrested, or reversed. We discuss ways of doing this. In severe cases, architectural abominations may even need to be demolished.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:109,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'At the same time, we seek not to cast blame upon those who must wallow in these mires. In part, our attitude is to \"hate the sin, but love the sinner\". But, it goes beyond this. Not every backyard storage shack needs marble columns. There are significant forces that can conspire to compel architecture to take a back seat to functionality, particularly early in the evolution of a software artifact. Opportunities and insights that can allow for architectural progress often are present later rather than earlier in the lifecycle.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:111,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"A certain amount of controlled chaos is natural during construction, and can be tolerated, as long as you clean up after yourself eventually. Even beyond this though, a complex system may be an accurate reflection of our immature understanding of a complex problem. The class of systems that we can build at all may be larger than the class of systems we can build elegantly, at least at first. A somewhat ramshackle rat's nest might be a state-of-the-art architecture for a poorly understood domain. This should not be the end of the story, though. As we gain more experience in such domains, we should increasingly direct our energies to gleaning more enduring architectural abstractions from them.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:113,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The patterns described herein are not intended to stand alone. They are instead set in a context that includes a number of other patterns that we and others have described. In particular, they are set in contrast to the lifecycle patterns, PROTOTYPE PHASE, EXPANSIONARY PHASE, and CONSOLIDATION PHASE, presented in [Foote & Opdyke 1995] and [Coplien 1995], the SOFTWARE TECTONICS pattern in [Foote & Yoder 1996], and the framework development patterns in [Roberts & Johnson 1998].\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:115,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Indeed, to a substantial extent, much of this chapter describes the disease, while the patterns above describe what we believe can be the cure: a flexible, adaptive, feedback-driven development process in which design and refactoring pervade the lifecycle of each artifact, component, and framework, within and beyond the applications that incubate them.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:117,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"forces\",children:\"Forces\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:119,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'A number of forces can conspire to drive even the most architecturally conscientious organizations to produce BIG BALLS OF MUD. These pervasive, \"global\" forces are at work in all the patterns presented. Among these forces:'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:121,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Time: There may not be enough time to consider the long-term architectural implications of one\\u2019s design and implementation decisions. Even when systems have been well designed, architectural concerns often must yield to more pragmatic ones as a deadline starts to loom.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:123,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"One reason that software architectures are so often mediocre is that architecture frequently takes a back seat to more mundane concerns such as cost, time-to-market, and programmer skill. Architecture is often seen as a luxury or a frill, or the indulgent pursuit of lily-gilding compulsives who have no concern for the bottom line. Architecture is often treated with neglect, and even disdain. While such attitudes are unfortunate, they are not hard to understand. Architecture is a long-term concern. The concerns above have to be addressed if a product is not to be stillborn in the marketplace, while the benefits of good architecture are realized later in the lifecycle, as frameworks mature, and reusable black-box components emerge [Foote & Opdyke 1995].\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:125,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Architecture can be looked upon as a Risk, that will consume resources better directed at meeting a fleeting market window, or as an Opportunity to lay the groundwork for a commanding advantage down the road.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:127,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Indeed, an immature architecture can be an advantage in a growing system because data and functionality can migrate to their natural places in the system unencumbered by artificial architectural constraints. Premature architecture can be more dangerous than none at all, as unproved architectural hypotheses turn into straightjackets that discourage evolution and experimentation.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:129,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[(0,n.jsxDEV)(e.strong,{children:\"Cost\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:131,columnNumber:1},this),\": Architecture is expensive, especially when a new domain is being explored. Getting the system right seems like a pointless luxury once the system is limping well enough to ship. An investment in architecture usually does not pay off immediately. Indeed, if architectural concerns delay a product\\u2019s market entry for too long, then long-term concerns may be moot. Who benefits from an investment in architecture, and when is a return on this investment seen? Money spent on a quick-and-dirty project that allows an immediate entry into the market may be better spent than money spent on elaborate, speculative architectural fishing expedition. It\\u2019s hard to recover the value of your architectural assets if you\\u2019ve long since gone bankrupt.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:131,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Programmers with the ability to discern and design quality architectures are reputed to command a premium. These expenses must be weighed against those of allowing an expensive system to slip into premature decline and obsolescence. If you think good architecture is expensive, try bad architecture.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:133,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[(0,n.jsxDEV)(e.strong,{children:\"Experience\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:135,columnNumber:1},this),\": Even when one has the time and inclination to take architectural concerns into account, one\\u2019s experience, or lack thereof, with the domain can limit the degree of architectural sophistication that can be brought to a system, particularly early in its evolution. Some programmers flourish in environments where they can discover and develop new abstractions, while others are more comfortable in more constrained environments (for instance, Smalltalk vs. Visual Basic programmers.) Often, initial versions of a system are vehicles whereby programmers learn what pieces must be brought into play to solve a particular problem. Only after these are identified do the architectural boundaries among parts of the system start to emerge.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:135,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Inexperience can take a number of guises. There is absolute, fresh out of school inexperience. A good architect may lack domain experience, or a domain expert who knows the code cold may not have architectural experience.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:137,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Employee turnover can wreak havoc on an organization\\u2019s institutional memory, with the perhaps dubious consolation of bringing fresh blood aboard.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:139,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[(0,n.jsxDEV)(e.strong,{children:\"Skill\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:141,columnNumber:1},this),\": Programmers differ in their levels of skill, as well as in expertise, predisposition and temperament. Some programmers have a passion for finding good abstractions, while some are skilled at navigating the swamps of complex code left to them by others. Programmers differ tremendously in their degrees of experience with particular domains, and their capacities for adapting to new ones. Programmers differ in their language and tool preferences and experience as well.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:141,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[(0,n.jsxDEV)(e.strong,{children:\"Visibility\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:143,columnNumber:1},this),\": Buildings are tangible, physical structures. You can look at a building. You can watch it being built. You can walk inside it, and admire and critique its design.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:143,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"A program\\u2019s user interface presents the public face of a program, much as a building\\u2019s exterior manifests its architecture. However, unlike buildings, only the people who build a program see how it looks inside.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:145,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Programs are made of bits. The manner in which we present these bits greatly affects our sense of how they are put together. Some designers prefer to see systems depicted using modeling languages or PowerPoint pictures. Others prefer prose descriptions. Still others prefer to see code. The fashion in which we present our architectures affects our perceptions of whether they are good or bad, clear or muddled, and elegant or muddy.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:147,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'Indeed, one of the reasons that architecture is neglected is that much of it is \"under the hood\", where nobody can see it. If the system works, and it can be shipped, who cares what it looks like on the inside?'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:149,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[(0,n.jsxDEV)(e.strong,{children:\"Complexity\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:151,columnNumber:1},this),': One reason for a muddled architecture is that software often reflects the inherent complexity of the application domain. This is what Brooks called \"essential complexity\" [Brooks 1995]. In other words, the software is ugly because the problem is ugly, or at least not well understood. Frequently, the organization of the system reflects the sprawl and history of the organization that built it (as per CONWAY\\u2019S LAW [Coplien 1995]) and the compromises that were made along the way. Renegotiating these relationships is often difficult once the basic boundaries among system elements are drawn. These relationships can take on the immutable character of \"site\" boundaries that Brand [Brand 1994] observed in real cities. Big problems can arises when the needs of the applications force unrestrained communication across these boundaries. The system becomes a tangled mess, and what little structure is there can erode further.']},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:151,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[(0,n.jsxDEV)(e.strong,{children:\"Change\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:153,columnNumber:1},this),': Architecture is a hypothesis about the future that holds that subsequent change will be confined to that part of the design space encompassed by that architecture. Of course, the world has a way of mocking our attempts to make such predictions by tossing us the totally unexpected. A problem we might have been told was definitely ruled out of consideration for all time may turn out to be dear to the heart of a new client we never thought we\\u2019d have. Such changes may cut directly across the grain of fundamental architectural decisions made in the light of the certainty that these new contingencies could never arise. The \"right\" thing to do might be to redesign the system. The more likely result is that the architecture of the system will be expediently perturbed to address the new requirements, with only passing regard for the effect of these radical changes on the structure of the system.']},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:153,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Scale: Managing a large project is a qualitatively different problem from managing a small one, just as leading a division of infantry into battle is different from commanding a small special forces team. Obviously, \"divide and conquer\" is, in general, an insufficient answer to the problems posed by scale. Alan Kay, during an invited talk at OOPSLA '86 observed that \"good ideas don't always scale.\" That observation prompted Henry Lieberman to inquire \"so what do we do, just scale the bad ones?\"`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:155,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"big-ball-of-mud-1\",children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:157,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"alias: SHANTYTOWN, SPAGHETTI CODE\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:159,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"image: Shantytown\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:161,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Shantytowns are squalid, sprawling slums. Everyone seems to agree they are a bad idea, but forces conspire to promote their emergence anyway. What is it that they are doing right?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:163,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'Shantytowns are usually built from common, inexpensive materials and simple tools. Shantytowns can be built using relatively unskilled labor. Even though the labor force is \"unskilled\" in the customary sense, the construction and maintenance of this sort of housing can be quite labor intensive. There is little specialization. Each housing unit is constructed and maintained primarily by its inhabitants, and each inhabitant must be a jack of all the necessary trades. There is little concern for infrastructure, since infrastructure requires coordination and capital, and specialized resources, equipment, and skills. There is little overall planning or regulation of growth. Shantytowns emerge where there is a need for housing, a surplus of unskilled labor, and a dearth of capital investment. Shantytowns fulfill an immediate, local need for housing by bringing available resources to bear on the problem. Loftier architectural goals are a luxury that has to wait.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:165,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Maintaining a shantytown is labor-intensive and requires a broad range of skills. One must be able to improvise repairs with the materials on-hand, and master tasks from roof repair to ad hoc sanitation. However, there is little of the sort of skilled specialization that one sees in a mature economy.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:167,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"All too many of our software systems are, architecturally, little more than shantytowns. Investment in tools and infrastructure is too often inadequate. Tools are usually primitive, and infrastructure such as libraries and frameworks, is undercapitalized. Individual portions of the system grow unchecked, and the lack of infrastructure and architecture allows problems in one part of the system to erode and pollute adjacent portions. Deadlines loom like monsoons, and architectural elegance seems unattainable.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:169,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"v v v\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:171,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"As a system nears completion, its actual users may begin to work with it for the first time. This experience may inspire changes to data formats and the user interface that undermine architectural decisions that had been thought to be settled. Also, as Brooks [Brooks 1995] has noted, because software is so flexible, it is often asked to bear the burden of architectural compromises late in the development cycle of hardware/software deliverables precisely because of its flexibility.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:173,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'This phenomenon is not unique to software. Stewart Brand [Brand 1994] has observed that the period just prior to a building\\u2019s initial occupancy can be a stressful period for both architects and their clients. The money is running out, and the finishing touches are being put on just those parts of the space that will interact the most with its occupants. During this period, it can become evident that certain wish-list items are not going to make it, and that exotic experiments are not going to work. Compromise becomes the \"order of the day\".'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:175,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The time and money to chase perfection are seldom available, nor should they be. To survive, we must do what it takes to get our software working and out the door on time. Indeed, if a team completes a project with time to spare, today\\u2019s managers are likely to take that as a sign to provide less time and money or fewer people the next time around.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:177,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`You need to deliver quality software on time, and under budget.\nCost: Architecture is a long-term investment. It is easy for the people who are paying the bills to dismiss it, unless there is some tangible immediate benefit, such a tax write-off, or unless surplus money and time happens to be available. Such is seldom the case. More often, the customer needs something working by tomorrow. Often, the people who control and manage the development process simply do not regard architecture as a pressing concern. If programmers know that workmanship is invisible, and managers don't want to pay for it anyway, a vicious circle is born.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:179,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:['Skill: Ralph Johnson is fond of observing that is inevitable that \"on average, average organizations will have average people\". One reason for the popularity and success of ',(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:182,columnNumber:174},this),\" approaches might be that this appoach doesn't require a hyperproductive virtuoso architect at every keyboard.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:182,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Organization: With larger projects, cultural, process, organizational and resource allocation issues can overwhelm technical concerns such as tools, languages, and architecture.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:184,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"It may seem to a programmer that whether to don hip boots and wade into a swamp is a major quality-of-life matter, but programmer comfort is but one concern to a manager, which can conflict with many others. Architecture and code quality may strike management as frills that have only an indirect impact on their bottom lines.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:186,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Therefore, focus first on features and functionality, then focus on architecture and performance.\nThe case made here resembles Gabriel\\u2019s \"Worse is Better\" arguments [Gabriel 1991] in a number of respects. Why does so much software, despite the best intentions and efforts of developers, turn into BIG BALLS OF MUD? Why do slash-and-burn tactics drive out elegance? Does bad architecture drive out good architecture?`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:188,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"What does this muddy code look like to the programmers in the trenches who must confront it? Data structures may be haphazardly constructed, or even next to non-existent. Everything talks to everything else. Every shred of important state data may be global. There are those who might construe this as a sort of blackboard approach [Buschmann 1996], but it more closely resembles a grab bag of undifferentiated state. Where state information is compartmentalized, it may be passed promiscuously about though Byzantine back channels that circumvent the system's original structure.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:191,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Variable and function names might be uninformative, or even misleading. Functions themselves may make extensive use of global variables, as well as long lists of poorly defined parameters. The function themselves are lengthy and convoluted, and perform several unrelated tasks. Code is duplicated. The flow of control is hard to understand, and difficult to follow. The programmer\\u2019s intent is next to impossible to discern. The code is simply unreadable, and borders on indecipherable. The code exhibits the unmistakable signs of patch after patch at the hands of multiple maintainers, each of whom barely understood the consequences of what he or she was doing. Did we mention documentation? What documentation?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:193,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:195,columnNumber:1},this),\" might be thought of as an anti-pattern, since our intention is to show how passivity in the face of forces that undermine architecture can lead to a quagmire. However, its undeniable popularity leads to the inexorable conclusion that it is a pattern in its own right. It is certainly a pervasive, recurring solution to the problem of producing a working system in the context of software development. It would seem to be the path of least resistance when one confronts the sorts of forces discussed above. Only by understanding the logic of its appeal can we channel or counteract the forces that lead to a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:195,columnNumber:628},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:195,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"One thing that isn\\u2019t the answer is rigid, totalitarian, top-down design. Some analysts, designers, and architects have an exaggerated sense of their ability to get things right up-front, before moving into implementation. This approach leads to inefficient resources utilization, analysis paralysis, and design straightjackets and cul-de-sacs.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:197,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'Kent Beck has observed that the way to build software is to: Make it work. Make it right. Make it fast [Beck 1997]. \"Make it work\" means that we should focus on functionality up-front, and get something running. \"Make it right\" means that we should concern ourselves with how to structure the system only after we\\u2019ve figured out the pieces we need to solve the problem in the first place. \"Make it fast\" means that we should be concerned about optimizing performance only after we\\u2019ve learned how to solve the problem, and after we\\u2019ve discerned an architecture to elegantly encompass this functionality. Once all this has been done, one can consider how to make it cheap.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:199,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'When it comes to software architecture, form follows function. Here we mean \"follows\" not in the traditional sense of dictating function. Instead, we mean that the distinct identities of the system\\u2019s architectural elements often don\\u2019t start to emerge until after the code is working.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:201,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Domain experience is an essential ingredient in any framework design effort. It is hard to try to follow a front-loaded, top-down design process under the best of circumstances. Without knowing the architectural demands of the domain, such an attempt is premature, if not foolhardy. Often, the only way to get domain experience early in the lifecycle is to hire someone who has worked in a domain before from someone else.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:203,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The quality of one\\u2019s tools can influence a system\\u2019s architecture. If a system\\u2019s architectural goals are inadequately communicated among members of a team, they will be harder to take into account as the system is designed and constructed.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:205,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Finally, engineers will differ in their levels of skill and commitment to architecture. Sadly, architecture has been undervalued for so long that many engineers regard life with a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:207,columnNumber:181},this),\" as normal. Indeed some engineers are particularly skilled at learning to navigate these quagmires, and guiding others through them. Over time, this symbiosis between architecture and skills can change the character of the organization itself, as swamp guides become more valuable than architects. As per CONWAY\\u2019S LAW [Coplien 1995], architects depart in futility, while engineers who have mastered the muddy details of the system they have built in their images prevail. [Foote & Yoder 1998a] went so far as to observe that inscrutable code might, in fact, have a survival advantage over good code, by virtue of being difficult to comprehend and change. This advantage can extend to those programmers who can find their ways around such code. In a land devoid of landmarks, such guides may become indispensable.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:207,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The incentives that drive the evolution of such systems can, at times, operate perversely. Just as it is easier to be verbose than concise, it is easier to build complex systems than it is to build simple ones. Skilled programmers may be able to create complexity more quickly than their peers, and more quickly than they can document and explain it. Like an army outrunning its logistics train, complexity increases until it reaches the point where such programmers can no longer reliably cope with it.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:209,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"This is akin to a phenonmenon dubbed the PeterPrinciple of Programming by authors on the Wiki-Wiki web [Cunninghan 1999a]. Complexity increases rapidly until the it reaches a level of complexity just beyond that with which programmers can comfortably cope. At this point, complexity and our abilities to contain it reach an uneasy equilibrium. The blitzkrieg bogs down into a siege. We built the most complicated system that can possible work [Cunningham 1999b].\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:211,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Such code can become a personal fiefdom, since the author care barely understand it anymore, and no one else can come close. Once simple repairs become all day affairs, as the code turns to mud. It becomes increasingly difficult for management to tell how long such repairs ought to take. Simple objectives turn into trench warfare. Everyone becomes resigned to a turgid pace. Some even come to prefer it, hiding in their cozy foxholes, and making their two line-per-day repairs.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:214,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"It is interesting to ask whether some of the differences in productivity seen between hyper-productive organizations and typical shops are due not to differences in talent, but differences in terrain. Mud is hard to march through. The hacker in the trenches must engage complexity in hand-to-hand combat every day. Sometimes, complexity wins.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:216,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Status in the programmer's primate pecking order is often earned through ritual displays of cleverness, rather than through workman-like displays of simplicity and clarity. That which a culture glorifies will flourish.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:218,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Yet, a case can be made that the casual, undifferentiated structure of a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:220,columnNumber:74},this),\" is one of its secret advantages, since forces acting between two parts of the system can be directly addressed without having to worry about undermining the system\\u2019s grander architectural aspirations. These aspirations are modest ones at best in the typical \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:220,columnNumber:352},this),\". Indeed, a casual approach to architecture is emblematic of the early phases of a system\\u2019s evolution, as programmers, architects and users learn their way around the domain [Foote & Opdyke 1995]. During the PROTOTYPE and EXPANSIONARY PHASES of a systems evolution, expedient, white-box inheritance-based code borrowing, and a relaxed approach to encapsulation are common. Later, as experience with the system accrues, the grain of the architectural domain becomes discernable, and more durable black-box components begin to emerge. In other words, it\\u2019s okay if the system looks at first like a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:220,columnNumber:966},this),\", at least until you know better.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:220,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Mud-based Architecture\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:222,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"v v v\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:224,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:['Brian Marick first suggested the name \"',(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:226,columnNumber:40},this),`\" as a name for these sort of architectures, and the observation that this was, perhaps, the dominant architecture currently deployed, during a meeting of the University of Illinois Software Architecture Group several years ago. We have been using the term ever since. The term itself, in turn, appears to have arisen during the '70s as a characterization of Lisp.`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:226,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:228,columnNumber:1},this),' architectures often emerge from throw-away prototypes, or THROWAWAY CODE, because the prototype is kept, or the disposable code is never disposed of. (One might call these \"little balls of mud\".)']},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:228,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"They also can emerge as gradual maintenance and PIECEMEAL GROWTH impinges upon the structure of a mature system. Once a system is working, a good way to encourage its growth is to KEEP IT WORKING. When the SHEARING LAYERS that emerge as change drives the system's evolution run against the existing grain of the system, its structure can be undermined, and the result can be a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:230,columnNumber:378},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:230,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The PROTOTYPE PHASE and EXPANSION PHASE patterns in [Foote & Opdyke 1995] both emphasize that a period of exploration and experimentation is often beneficial before making enduring architectural commitments.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:232,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"However, these activities, which can undermine a system's structure should be interspersed with CONSOLIDATION PHASES [Foote & Opdyke 1995], during which opportunities to refactor the system to enhance its structure are exploited. Proponents of Extreme Programming [Beck 2000] also emphasize continuous coding and refactoring.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:234,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"[Brand 1994] observes that buildings with large spaces punctuated with regular columns had the paradoxical effect of encouraging the innovative reuse of space precisely because they constrained the design space. Grandiose flights of architectural fancy weren\\u2019t possible, which reduced the number of design alternatives that could be put on the table. Sometimes FREEDOM FROM CHOICE [Foote 1988] is what we really want.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:236,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"One of mud's most effective enemies is sunshine. Subjecting convoluted code to scrutiny can set the stage for its refactoring, repair, and rehabilitation. Code reviews are one mechanism one can use to expose code to daylight.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:238,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'Another is the Extreme Programming practice of pair programming [Beck 2000]. A pure pair programming approach requires that every line of code written be added to the system with two programmers present. One types, or \"drives\", while the other \"rides shotgun\" and looks on. In contrast to traditional solitary software production practices, pair programming subjects code to immediate scrutiny, and provides a means by which knowledge about the system is rapidly disseminated.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:240,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Indeed, reviews and pair programming provide programmers with something their work would not otherwise have: an audience. Sunlight, it is said is a powerful disinfectant. Pair-practices add an element of performance to programming. An immediate audience of one's peers provides immediate incentives to programmers to keep their code clear and comprehensible, as well as functional.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:242,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"An additional benefit of pairing is that accumulated wisdom and best practices can be rapidly disseminated throughout an organization through successive pairings. This is, incidentally, the same benefit that sexual reproduction brought to the genome.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:244,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"By contrast, if no one ever looks at code, everyone is free to think they are better than average at producing it. Programmers will, instead, respond to those relatively perverse incentives that do exist. Line of code metrics, design documents, and other indirect measurements of progress and quality can become central concerns.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:246,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"There are three ways to deal with BIG BALLS OF MUD. The first is to keep the system healthy. Conscientiously alternating periods of EXPANSION with periods of CONSOLIDATION, refactoring and repair can maintain, and even enhance a system's structure as it evolves. The second is to throw the system away and start over. The RECONSTRUCTION pattern explores this drastic, but frequently necessary alternative. The third is to simply surrender to entropy, and wallow in the mire.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:248,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Since the time of Roman architect Marcus Vitruvius, [Vitruvius 20 B.C.] architects have focused on his trinity of desirables: Firmitas (strength), Utilitas (utility), and Venustas (beauty). A \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:250,columnNumber:193},this),' usually represents a triumph of utility over aesthetics, because workmanship is sacrificed for functionality. Structure and durability can be sacrificed as well, because an incomprehensible program defies attempts at maintenance. The frenzied, feature-driven \"bloatware\" phenomenon seen in many large consumer software products can be seen as evidence of designers having allowed purely utilitarian concerns to dominate software design.']},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:250,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"throwaway-code\",children:\"THROWAWAY CODE\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:254,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"alias: QUICK HACK, KLEENEX CODE, DISPOSABLE CODE, SCRIPTING, KILLER DEMO, PERMANENT PROTOTYPE, BOOMTOWN\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:256,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"v v v\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:259,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'A homeowner might erect a temporary storage shed or car port, with every intention of quickly tearing it down and replacing it with something more permanent. Such structures have a way of enduring indefinitely. The money expected to replace them might not become available. Or, once the new structure is constructed, the temptation to continue to use the old one for \"a while\" might be hard to resist.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:261,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Likewise, when you are prototyping a system, you are not usually concerned with how elegant or efficient your code is. You know that you will only use it to prove a concept. Once the prototype is done, the code will be thrown away and written properly. As the time nears to demonstrate the prototype, the temptation to load it with impressive but utterly inefficient realizations of the system\\u2019s expected eventual functionality can be hard to resist. Sometimes, this strategy can be a bit too successful. The client, rather than funding the next phase of the project, may slate the prototype itself for release.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:263,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`You need an immediate fix for a small problem, or a quick prototype or proof of concept.\nTime, or a lack thereof, is frequently the decisive force that drives programmers to write THROWAWAY CODE. Taking the time to write a proper, well thought out, well documented program might take more time that is available to solve a problem, or more time that the problem merits. Often, the programmer will make a frantic dash to construct a minimally functional program, while all the while promising him or herself that a better factored, more elegant version will follow thereafter. They may know full well that building a reusable system will make it easier to solve similar problems in the future, and that a more polished architecture would result in a system that was easier to maintain and extend.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:265,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Quick-and-dirty coding is often rationalized as being a stopgap measure. All too often, time is never found for this follow up work. The code languishes, while the program flourishes.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:268,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Therefore, produce, by any means available, simple, expedient, disposable code that adequately addresses just the problem at-hand.\nTHROWAWAY CODE is often written as an alternative to reusing someone else\\u2019s more complex code. When the deadline looms, the certainty that you can produce a sloppy program that works yourself can outweigh the unknown cost of learning and mastering someone else\\u2019s library or framework.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:270,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Programmers are usually not domain experts, especially at first. Use cases or CRC cards [Beck & Cunningham 1989] can help them to discover domain objects. However, nothing beats building a prototype to help a team learn its way around a domain.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:273,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`When you build a prototype, there is always the risk that someone will say \"that's good enough, ship it\". One way to minimize the risk of a prototype being put into production is to write the prototype in using a language or tool that you couldn't possibly use for a production version of your product. Proponents of`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:275,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'Extreme Programming [Beck 2000] often construct quick, disposable prototypes called \"spike solutions\". Prototypes help us learn our way around the problem space, but should never be mistaken for good designs [Johnson & Foote 1988].'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:277,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Not every program need be a palace. A simple throwaway program is like a tent city or a mining boomtown, and often has no need for fifty year solutions to its problems, given that it will give way to a ghost town in five.\nThe real problem with\nTHROWAWAY CODE comes when it isn't thrown away.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:279,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"v v v\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:283,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The production of THROWAWAY CODE is a nearly universal practice. Any software developer, at any skill or experience level, can be expected to have had at least occasional first-hand experience with this approach to software development. For example, in the patterns community, two examples of quick-and-dirty code that have endured are the PLoP online registration code, and the Wiki-Wiki Web pages.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:285,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The EuroPLoP/PLoP/UP online registration code was, in effect, a distributed web-based application that ran on four different machines on two continents. Conference information was maintained on a machine in St. Louis, while registration records were kept on machines in Illinois and Germany. The system could generate web-based reports of registration activity, and now even instantaneously maintaineed an online attendees list. It began life in 1995 as a quick-and-dirty collection of HTML, scavenged C demonstration code, and csh scripts. It was undertaken largely as an experiment in web-based form processing prior to PLoP \\u201895, and, like so many things on the Web, succeeded considerably beyond the expectations of its authors. Today, it is still essentially the same collection of HTML, scavenged C demonstration code, and csh scripts. As such, it showcases how quick-and-dirty code can, when successful, take on a life of its own.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:287,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The original C code and scripts probably contained fewer than three dozen original lines of code. Many lines were cut-and-paste jobs that differed only in the specific text they generate, or fields that they check.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:289,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Here\\u2019s an example of one of the scripts that generates the attendance report:\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:291,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.pre,{children:(0,n.jsxDEV)(e.code,{className:\"hljs language-sh\",children:[(0,n.jsxDEV)(e.span,{className:\"hljs-built_in\",children:\"echo\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" \",(0,n.jsxDEV)(e.span,{className:\"hljs-string\",children:'\"<H2>Registrations: <B>\"'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" `\",(0,n.jsxDEV)(e.span,{className:\"hljs-built_in\",children:\"ls\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" | \",(0,n.jsxDEV)(e.span,{className:\"hljs-built_in\",children:\"wc\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" -l` \",(0,n.jsxDEV)(e.span,{className:\"hljs-string\",children:'\"</B></H2>\"'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),`\n`,(0,n.jsxDEV)(e.span,{className:\"hljs-built_in\",children:\"echo\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" \",(0,n.jsxDEV)(e.span,{className:\"hljs-string\",children:'\"<CODE>\"'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),`\n`,(0,n.jsxDEV)(e.span,{className:\"hljs-built_in\",children:\"echo\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" \",(0,n.jsxDEV)(e.span,{className:\"hljs-string\",children:'\"Authors: <B>\"'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" `grep \",(0,n.jsxDEV)(e.span,{className:\"hljs-string\",children:\"'Author = Yes'\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" * | \",(0,n.jsxDEV)(e.span,{className:\"hljs-built_in\",children:\"wc\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" -l` \",(0,n.jsxDEV)(e.span,{className:\"hljs-string\",children:'\"</B>\"'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),`\n`,(0,n.jsxDEV)(e.span,{className:\"hljs-built_in\",children:\"echo\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" \",(0,n.jsxDEV)(e.span,{className:\"hljs-string\",children:'\"<BR>\"'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),`\n`,(0,n.jsxDEV)(e.span,{className:\"hljs-built_in\",children:\"echo\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" \",(0,n.jsxDEV)(e.span,{className:\"hljs-string\",children:'\"Non-Authors: <B>\"'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" `grep \",(0,n.jsxDEV)(e.span,{className:\"hljs-string\",children:\"'Author = No'\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" * | \",(0,n.jsxDEV)(e.span,{className:\"hljs-built_in\",children:\"wc\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" -l` \",(0,n.jsxDEV)(e.span,{className:\"hljs-string\",children:'\"</B>\"'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),`\n`,(0,n.jsxDEV)(e.span,{className:\"hljs-built_in\",children:\"echo\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),\" \",(0,n.jsxDEV)(e.span,{className:\"hljs-string\",children:'\"<BR><BR>\"'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this),`\n`]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:293,columnNumber:1},this)},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:293,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"This script is slow and inefficient, particularly as the number of registrations increases, but not least among its virtues is the fact that it works. Were the number of attendees to exceed more than around one hundred, this script would start to perform so badly as to be unusable. However, since hundreds of attendees would exceed the physical capacity of the conference site, we knew the number of registrations would have been limited long before the performance of this script became a significant problem. So while this approach is, in general, a lousy way to address this problem, it is perfectly satisfactory within the confines of the particular purpose for which the script has ever actually been used. Such practical constraints are typical of THROWAWAY CODE, and are more often than not undocumented. For that matter, everything about THROWAWAY CODE is more often than not undocumented. When documentation exists, it is frequently not current, and often not accurate.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:302,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"The Wiki-Web code at \",(0,n.jsxDEV)(e.a,{href:\"http://www.c2.com\",children:\"www.c2.com\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:304,columnNumber:22},this),' also started as a CGI experiment undertaken by Ward Cunningham also succeeded beyond the author\\u2019s expectations. The name \"wiki\" is one of Ward\\u2019s personal jokes, having been taken from a Hawaiian word for \"quick\" that the author had seen on an airport van on a vacation in Hawaii. Ward has subsequently used the name for a number of quick-and-dirty projects. The Wiki Web is unusual in that any visitor may change anything that anyone else has written indiscriminately. This would seem like a recipe for vandalism, but in practice, it has worked out well. In light of the system\\u2019s success, the author has subsequently undertaken additional work to polish it up, but the same quick-and-dirty Perl CGI core remains at the heart of the system.']},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:304,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Both systems might be thought of as being on the verge of graduating from little balls of mud to BIG BALLS OF MUD. The registration system\\u2019s C code metastasized from one of the NCSA HTTPD server demos, and still contains zombie code that testifies to this heritage. At each step, KEEPING IT WORKING is a premiere consideration in deciding whether to extend or enhance the system. Both systems might be good candidates for RECONSTRUCTION, were the resources, interest, and audience present to justify such an undertaking. In the mean time, these systems, which are still sufficiently well suited to the particular tasks for which they were built, remain in service. Keeping them on the air takes far less energy than rewriting them. They continue to evolve, in a PIECEMEAL fashion, a little at a time.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:306,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"You can ameloriate the architectural erosion that can be caused by quick-and-dirty code by isolating it from other parts of your system, in its own objects, packages, or modules. To the extent that such code can be quarantined, its ability to affect the integrity of healthy parts of a system is reduced.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:308,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Once it becomes evident that a purportedly disposable artifact is going to be around for a while, one can turn one's attention to improving its structure, either through an iterative process of PIECEMEAL GROWTH, or via a fresh draft, as discussed in the RECONSTRUCTION pattern.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:310,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Rhyolite\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:312,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`From boomtown to ghost town:\nThe mining town of Rhyolite, in Death Valley, was briefly the third largest city in Nevada.\nThen the ore ran out.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:314,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"piecemeal-growth\",children:\"PIECEMEAL GROWTH\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:320,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"alias: URBAN SPRAWL, ITERATIVE-INCREMENTAL DEVELOPMENT\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:322,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Mir Complex\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:325,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'The Russian Mir (\"Peace\") Space Station Complex was designed for reconfiguration and modular growth. The Core module was launched in 1986, and the Kvant (\"Quantum\") and Kvant-2 modules joined the complex in 1987 and 1989. The Kristall (\"Crystal\") module was added in 1990. The Spektr (\"Spectrum\") and shuttle Docking modules were added in 1995, the latter surely a development not anticipated in 1986. The station\\u2019s final module, Priroda (\"Nature\"), was launched in 1996. The common core and independent maneuvering capabilities of several of the modules have allowed the complex to be rearranged several times as it has grown.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:327,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Urban Sprawl in Colorado\nUrban planning has an uneven history of success. For instance, Washington D.C. was laid out according to a master plan designed by the French architect L\\u2019Enfant. The capitals of Brazil (Brasilia) and Nigeria (Abuja) started as paper cities as well. Other cities, such as Houston, have grown without any overarching plan to guide them. Each approach has its problems. For instance, the radial street plans in L\\u2019Enftant\\u2019s master plan become awkward past a certain distance from the center. The lack of any plan at all, on the other hand, leads to a patchwork of residential, commercial, and industrial areas that is dictated by the capricious interaction of local forces such as land ownership, capital, and zoning. Since concerns such as recreation, shopping close to homes, and noise and pollution away from homes are not brought directly into the mix, they are not adequately addressed.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:329,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Most cities are more like Houston than Abuja. They may begin as settlements, subdivisions, docks, or railway stops. Maybe people were drawn by gold, or lumber, access to transportation, or empty land. As time goes on, certain settlements achieve a critical mass, and a positive feedback cycle ensues. The city\\u2019s success draws tradesmen, merchants, doctors, and clergymen. The growing population is able to support infrastructure, governmental institutions, and police protection. These, in turn, draw more people. Different sections of town develop distinct identities. With few exceptions, (Salt Lake City comes to mind) the founders of these settlements never stopped to think that they were founding major cities. Their ambitions were usually more modest, and immediate.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:332,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Brasilia\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:334,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"v v v\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:336,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'It has become fashionable over the last several years to take pot shots at the \"traditional\" waterfall process model. It may seem to the reader that attacking it is tantamount to flogging a dead horse. However, if it be a dead horse, it is a tenacious one. While the approach itself is seen by many as having been long since discredited, it has spawned a legacy of rigid, top-down, front-loaded processes and methodologies that endure, in various guises, to this day. We can do worse that examine the forces that led to its original development.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:338,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:['In the days before waterfall development, programming pioneers employed a simple, casual, relatively undisciplined \"code-and-fix\" approach to software development. Given the primitive nature of the problems of the day, this approach was frequently effective. However, the result of this lack of discipline was, all too often, a ',(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:340,columnNumber:329},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:340,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The waterfall approach arose in response to this muddy morass. While the code-and-fix approach might have been suitable for small jobs, it did not scale well. As software became more complex, it would not do to simply gather a room full of programmers together and tell them to go forth and code. Larger projects demanded better planning and coordination. Why, it was asked, can't software be engineered like cars and bridges, with a careful analysis of the problem, and a detailed up-front design prior to implementation? Indeed, an examination of software development costs showed that problems were many times more expensive to fix during maintenance than during design. Surely it was best to mobilize resources and talent up-front, so as to avoid maintenance expenses down the road. It's surely wiser to route the plumbing correctly now, before the walls are up, than to tear holes in them later. Measure twice, cut once.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:342,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`One of the reasons that the waterfall approach was able to flourish a generation ago was that computers and business requirements changed at a more leisurely pace. Hardware was very expensive, often dwarfing the salaries of the programmers hired to tend it. User interfaces were primitive by today's standards. You could have any user interface you wanted, as long as it was an alphanumeric \"green screen\". Another reason for the popularity of the waterfall approach was that it exhibited a comfortable similarity to practices in more mature engineering and manufacturing disciplines.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:344,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Today's designers are confronted with a broad onslaught of changing requirements. It arises in part from the rapid growth of technology itself, and partially from rapid changes in the business climate (some of which is driven by technology). Customers are used to more sophisticated software these days, and demand more choice and flexibility. Products that were once built from the ground up by in-house programmers must now be integrated with third-party code and applications. User interfaces are complex, both externally and internally. Indeed, we often dedicate an entire tier of our system to their care and feeding. Change threatens to outpace our ability to cope with it.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:346,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Master plans are often rigid, misguided and out of date. Users\\u2019 needs change with time.\nChange: The fundamental problem with top-down design is that real world requirement are inevitably moving targets. You can't simply aspire to solve the problem at hand once and for all, because, by the time you're done, the problem will have changed out from underneath you. You can't simply do what the customer wants, for quite often, they don't know what they want. You can't simply plan, you have to plan to be able to adapt. If you can't fully anticipate what is going to happen, you must be prepared to be nimble.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:348,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Aesthetics: The goal of up-front design is to be able to discern and specify the significant architectural elements of a system before ground is broken for it. A superior design, given this mindset, is one that elegantly and completely specifies the system's structure before a single line of code has been written. Mismatches between these blueprints and reality are considered aberrations, and are treated as mistakes on the part of the designer. A better design would have anticipated these oversights. In the presence of volatile requirements, aspirations towards such design perfection are as vain as the desire for a hole-in-one on every hole.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:351,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"To avoid such embarrassment, the designer may attempt to cover him or herself by specifying a more complicated, and more general solution to certain problems, secure in the knowledge that others will bear the burden of constructing these artifacts. When such predictions about where complexity is needed are correct, they can indeed be a source of power and satisfaction. This is part of their allure of Venustas. However, sometime the anticipated contingencies never arise, and the designer and implementers wind up having wasted effort solving a problem that no one has ever actually had. Other times, not only is the anticipated problem never encountered, its solution introduces complexity in a part of the system that turns out to need to evolve in another direction. In such cases, speculative complexity can be an unnecessary obstacle to subsequent adaptation. It is ironic that the impulse towards elegance can be an unintended source of complexity and clutter instead.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:353,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'In its most virulent form, the desire to anticipate and head off change can lead to \"analysis paralysis\", as the thickening web of imagined contingencies grows to the point where the design space seems irreconcilably constrained.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:355,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Therefore, incrementally address forces that encourage change and growth. Allow opportunities for growth to be exploited locally, as they occur. Refactor unrelentingly.\nSuccessful software attracts a wider audience, which can, in turn, place a broader range of requirements on it. These new requirements can run against the grain of the original design. Nonetheless, they can frequently be addressed, but at the cost of cutting across the grain of existing architectural assumptions. [Foote 1988] called this architectural erosion midlife generality loss.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:357,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"When designers are faced with a choice between building something elegant from the ground up, or undermining the architecture of the existing system to quickly address a problem, architecture usually loses. Indeed, this is a natural phase in a system\\u2019s evolution [Foote & Opdyke 1995]. This might be thought of as messy kitchen phase, during which pieces of the system are scattered across the counter, awaiting an eventual cleanup. The danger is that the clean up is never done. With real kitchens, the board of health will eventually intervene. With software, alas, there is seldom any corresponding agency to police such squalor. Uncontrolled growth can ultimately be a malignant force. The result of neglecting to contain it can be a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:360,columnNumber:739},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:360,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"In How Buildings Learn, Brand [Brand 1994] observed that what he called High Road architecture often resulted in buildings that were expensive and difficult to change, while vernacular, Low Road buildings like bungalows and warehouses were, paradoxically, much more adaptable. Brand noted that Function melts form, and low road buildings are more amenable to such change. Similarly, with software, you may be reluctant to desecrate another programmer\\u2019s cathedral. Expedient changes to a low road system that exhibits no discernable architectural pretensions to begin with are easier to rationalize.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:362,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"In the Oregon Experiment [Brand 1994][Alexander 1988] Alexander noted:\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:364,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Large-lump development is based on the idea of replacement. Piecemeal Growth is based on the idea of repair. \\u2026 Large-lump development is based on the fallacy that it is possible to build perfect buildings. Piecemeal growth is based on the healthier and more realistic view that mistakes are inevitable. \\u2026 Unless money is available for repairing these mistakes, every building, once built, is condemned to be, to some extent unworkable. \\u2026 Piecemeal growth is based on the assumption that adaptation between buildings and their users is necessarily a slow and continuous business which cannot, under any circumstances, be achieve in a single leap.\nAlexander has noted that our mortgage and capital expenditure policies make large sums of money available up front, but do nothing to provide resources for maintenance, improvement, and evolution [Brand 1994][Alexander 1988]. In the software world, we deploy our most skilled, experienced people early in the lifecycle. Later on, maintenance is relegated to junior staff, when resources can be scarce. The so-called maintenance phase is the part of the lifecycle in which the price of the fiction of master planning is really paid. It is maintenance programmers who are called upon to bear the burden of coping with the ever widening divergence between fixed designs and a continuously changing world. If the hypothesis that architectural insight emerges late in the lifecycle is correct, then this practice should be reconsidered.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:366,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Brand went on to observe Maintenance is learning. He distinguishes three levels of learning in the context of systems. This first is habit, where a system dutifully serves its function within the parameters for which it was designed. The second level comes into play when the system must adapt to change. Here, it usually must be modified, and its capacity to sustain such modification determines it\\u2019s degree of adaptability. The third level is the most interesting: learning to learn. With buildings, adding a raised floor is an example. Having had to sustain a major upheaval, the system adapts so that subsequent adaptations will be much less painful.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:369,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"PIECEMEAL GROWTH can be undertaken in an opportunistic fashion, starting with the existing, living, breathing system, and working outward, a step at a time, in such a way as to not undermine the system\\u2019s viability. You enhance the program as you use it. Broad advances on all fronts are avoided. Instead, change is broken down into small, manageable chunks.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:371,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"One of the most striking things about PIECEMEAL GROWTH is the role played by Feedback. Herbert Simon [Simon 1969] has observed that few of the adaptive systems that have been forged by evolution or shaped by man depend on prediction as their main means of coping with the future. He notes that two complementary mechanisms, homeostasis, and retrospective feedback, are often far more effective. Homeostasis insulates the system from short-range fluctuations in its environment, while feedback mechanisms respond to long-term discrepancies between a system's actual and desired behavior, and adjust it accordingly. Alexander [Alexander 1964] has written extensively of the roles that homeostasis and feedback play in adaptation as well.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:373,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"If you can adapt quickly to change, predicting it becomes far less crucial. Hindsight, as Brand observes [Brand 1994] is better than foresight. Such rapid adaptation is the basis of one of the mantras of Extreme Programming [Beck 2000]: You're not going to need it.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:375,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Proponents of XP (as it is called) say to pretend you are not a smart as you think you are, and wait until this clever idea of yours is actually required before you take the time to bring it into being. In the cases where you were right, hey, you saw it coming, and you know what to do. In the cases where you were wrong, you won't have wasted any effort solving a problem you've never had when the design heads in an unanticipated direction instead.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:377,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Extreme Programming relies heavily on feedback to keep requirements in sync with code, by emphasizing short (three week) iterations, and extensive, continuous consultation with users regarding design and development priorities throughout the development process. Extreme Programmers do not engage in extensive up-front planning. Instead, they produce working code as quickly as possible, and steer these prototypes towards what the users are looking for based on feedback.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:379,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Feedback also plays a role in determining coding assignments. Coders who miss a deadline are assigned a different task during the next iteration, regardless of how close they may have been to completing the task. This form of feedback resembles the stern justice meted out by the jungle to the fruit of uncompetitive pairings.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:381,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Extreme Programming also emphasizes testing as an integral part of the development process. Tests are developed, ideally, before the code itself. Code is continuously tested as it is developed.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:383,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`There is a \"back-to-the-future\" quality to Extreme Programming. In many respects, it resembles the blind Code and Fix approach. The thing that distinguishes it is the central role played by feedback in driving the system's evolution. This evolution is abetted, in turn, by modern object-oriented languages and powerful refactoring tools.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:385,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Proponents of extreme programming portray it as placing minimal emphasis on planning and up-front design. They rely instead on feedback and continuous integration. We believe that a certain amount of up-front planning and design is not only important, but inevitable. No one really goes into any project blindly. The groundwork must be laid, the infrastructure must be decided upon, tools must be selected, and a general direction must be set. A focus on a shared architectural vision and strategy should be established early.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:387,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Unbridled, change can undermine structure. Orderly change can enhance it. Change can engender malignant sprawl, or healthy, orderly growth.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:389,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"v v v\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:391,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"A broad consensus that objects emerge from an iterative incremental evolutionary process has formed in the object-oriented community over the last decade. See for instance [Booch 1994]. The SOFTWARE TECTONICS pattern [Foote & Yoder 1996] examines how systems can incrementally cope with change.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:393,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"The biggest risk associated with PIECEMEAL GROWTH is that it will gradually erode the overall structure of the system, and inexorably turn it into a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:395,columnNumber:150},this),\". A strategy of KEEPING IT WORKING goes hand in hand with PIECEMEAL GROWTH. Both patterns emphasize acute, local concerns at the expense of chronic, architectural ones.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:395,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"To counteract these forces, a permanent commitment to CONSOLIDATION and refactoring must be made. It is through such a process that local and global forces are reconciled over time. This lifecyle perspective has been dubbed the fractal model [Foote & Opdyke 1995]. To quote Alexander [Brand 1994][Alexander 1988]:\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:397,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"An organic process of growth and repair must create a gradual sequence of changes, and these changes must be distributed evenly across all levels of scale. [In developing a college campus] there must be as much attention to the repair of details\\u2014rooms, wings of buildings, windows, paths\\u2014as to the creation of brand new buildings. Only then can the environment be balanced both as a whole, and in its parts, at every moment in its history.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:399,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"keep-it-working\",children:\"KEEP IT WORKING\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:402,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"alias: VITALITY, BABY STEPS, DAILY BUILD, FIRST, DO NO HARM\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:404,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'Probably the greatest factor that keeps us moving forward is that we use the system all the time, and we keep trying to do new things with it. It is this \"living-with\" which drives us to root out failures, to clean up inconsistencies, and which inspires our occasional innovation.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:406,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Daniel H. H. Ingalls [Ingalls 1983]\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:408,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`First, Do No Harm\nOnce a city establishes its infrastructure, it is imperative that it be kept working. For example, if the sewers break, and aren\\u2019t quickly repaired, the consequences can escalate from merely unpleasant to genuinely life threatening. People come to expect that they can rely on their public utilities being available 24 hours per day. They (rightfully) expect to be able to demand that an outage be treated as an emergency.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:410,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"v v v\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:413,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Software can be like this. Often a business becomes dependent upon the data driving it. Businesses have become critically dependent on their software and computing infrastructures. There are numerous mission critical systems that must be on-the-air twenty-four hours a day/seven days per week. If these systems go down, inventories can not be checked, employees can not be paid, aircraft cannot be routed, and so on.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:415,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"There may be times where taking a system down for a major overhaul can be justified, but usually, doing so is fraught with peril. However, once the system is brought back up, it is difficult to tell which from among a large collection of modifications might have caused a new problem. Every change is suspect. This is why deferring such integration is a recipe for misery. Capers Jones [Jones 1999] reported that the chance that a significant change might contain a new error--a phenomenon he ominously referred to as a Bad Fix Injection-- was about 7% in the United States. This may strike some readers as a low figure. Still, it's easy to see that compounding this possibility can lead to a situation where multiple upgrades are increasing likely to break a system.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:417,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Maintenance needs have accumulated, but an overhaul is unwise, since you might break the system.\nWorkmanship: Architects who live in the house they are building have an obvious incentive to insure that things are done properly, since they will directly reap the consequences when they do not. The idea of the architect-builder is a central theme of Alexander's work. Who better to resolve the forces impinging upon each design issue as it arises as the person who is going to have to live with these decisions? The architect-builder will be the direct beneficiary of his or her own workmanship and care. Mistakes and shortcuts will merely foul his or her own nest.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:419,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Dependability: These days, people rely on our software artifacts for their very livelihoods, and even, at time, for their very safety. It is imperative that ill-advise changes to elements of a system do not drag the entire system down. Modern software systems are intricate, elaborate webs of interdependent elements. When an essential element is broken, everyone who depends on it will be affected. Deadlines can be missed, and tempers can flare. This problem is particularly acute in BIG BALLS OF MUD, since a single failure can bring the entire system down like a house of cards.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:422,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Therefore, do what it takes to maintain the software and keep it going. Keep it working.\nWhen you are living in the system you\\u2019re building, you have an acute incentive not to break anything. A plumbing outage will be a direct inconvenience, and hence you have a powerful reason to keep it brief. You are, at times, working with live wires, and must exhibit particular care. A major benefit of working with a live system is that feedback is direct, and nearly immediate.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:424,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"One of the strengths of this strategy is that modifications that break the system are rejected immediately. There are always a large number of paths forward from any point in a system\\u2019s evolution, and most of them lead nowhere. By immediately selecting only those that do not undermine the system\\u2019s viability, obvious dead-ends are avoided.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:427,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Of course, this sort of reactive approach, that of kicking the nearest, meanest woolf from your door, is not necessarily globally optimal. Yet, by eliminating obvious wrong turns, only more insidiously incorrect paths remain. While these are always harder to identify and correct, they are, fortunately less numerous than those cases where the best immediate choice is also the best overall choice as well.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:429,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"It may seem that this approach only accommodates minor modifications. This is not necessarily so. Large new subsystems might be constructed off to the side, perhaps by separate teams, and integrated with the running system in such a way as to minimize distruption.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:431,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Design space might be thought of as a vast, dark, largely unexplored forest. Useful potential paths through it might be thought of as encompassing working programs. The space off to the sides of these paths is much larger realm of non-working programs. From any given point, a few small steps in most directions take you from a working to a non-working program. From time to time, there are forks in the path, indicating a choice among working alternatives. In unexplored territory, the prudent strategy is never to stray too far from the path. Now, if one has a map, a shortcut through the trekless thicket that might save miles may be evident. Of course, pioneers, by definition, don\\u2019t have maps. By taking small steps in any direction, they know that it is never more than a few steps back to a working system.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:433,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Some years ago, Harlan Mills proposed that any software system should be grown by incremental development. That is, the system first be made to run, even though it does nothing useful except call the proper set of dummy subprograms. Then, bit by bit, it is fleshed out, with the subprograms in turn being developed into actions or calls to empty stubs in the level below.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:435,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"\\u2026\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:437,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Nothing in the past decade has so radically changed my own practice, and its effectiveness.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:439,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"\\u2026\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:441,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"One always has, at every stage, in the process, a working system. I find that teams can grow much more complex entities in four months than they can build.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:443,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'-- From \"No Silver Bullet\" [Brooks 1995]'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:445,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Microsoft mandates that a DAILY BUILD of each product be performed at the end of each working day. Nortel adheres to the slightly less demanding requirement that a working build be generated at the end of each week [Brooks 1995][Cusumano & Shelby 1995]. Indeed, this approach, and keeping the last working version around, are nearly universal practices among successful maintenance programmers.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:447,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Another vital factor in ensuring a system's continued vitality is a commitment to rigorous testing [Marick 1995][Bach 1994]. It's hard to keep a system working if you don't have a way of making sure it works. Testing is one of pillars of Extreme Programming. XP practices call for the development of unit tests before a single line of code is written.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:449,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"v v v\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:451,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Always beginning with a working system helps to encourage PIECEMEAL GROWTH. Refactoring is the primary means by which programmers maintain order from inside the systems in which they are working. The goal of refactoring is to leave a system working as well after a refactoring as it was before the refactoring. Aggressive unit and integration testing can help to guarantee that this goal is met.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:453,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"shearing-layers\",children:\"SHEARING LAYERS\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:457,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Hummingbird\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:459,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Hummingbirds and flowers are quick, redwood trees are slow, and whole redwood forests are even slower. Most interaction is within the same pace level--hummingbirds and flowers pay attention to each other, oblivious to redwoods, who are oblivious to them.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:461,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"R. V. O'Neill , A Hierarchical Concept of Ecosystems\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:463,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The notion of SHEARING LAYERS is one of the centerpieces of Brand's How Buildings Learn [Brand 1994]. Brand, in turn synthesized his ideas from a variety of sources, including British designer Frank Duffy, and ecologist R. V. O'Neill.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:465,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Brand, Page 13\nBrand quotes Duffy as saying: \"Our basic argument is that there isn't any such thing as a building. A building properly conceived is several layers of longevity of built components\".`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:467,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Brand distilled Duffy's proposed layers into these six: Site, Structure, Skin, Services, Space Plan, and Stuff. Site is geographical setting. Structure is the load bearing elements, such as the foundation and skeleton. Skin is the exterior surface, such as siding and windows. Services are the circulatory and nervous systems of a building, such as its heating plant, wiring, and plumbing. The Space Plan includes walls, flooring, and ceilings. Stuff includes lamps, chairs, appliances, bulletin boards, and paintings.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:470,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"These layers change at different rates. Site, they say, is eternal. Structure may last from 30 to 300 years. Skin lasts for around 20 years, as it responds to the elements, and to the whims of fashion. Services succumb to wear and technical obsolescence more quickly, in 7 to 15 years. Commercial Space Plans may turn over every 3 years. Stuff, is, of course, subject to unrelenting flux [Brand 1994].\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:472,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"v v v\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:474,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Software systems cannot stand still. Software is often called upon to bear the brunt of changing requirements, because, being as that it is made of bits, it can change.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:476,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Different artifacts change at different rates.\nAdaptability: A system that can cope readily with a wide range of requirements, will, all other things being equal, have an advantage over one that cannot. Such a system can allow unexpected requirements to be met with little or no reengineering, and allow its more skilled customers to rapidly address novel challenges.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:478,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Stability: Systems succeed by doing what they were designed to do as well as they can do it. They earn their niches, by bettering their competition along one or more dimensions such as cost, quality, features, and performance. See [Foote & Roberts 1998] for a discussion of the occasionally fickle nature of such completion. Once they have found their niche, for whatever reason, it is essential that short term concerns not be allowed to wash away the elements of the system that account for their mastery of their niche. Such victories are inevitably hard won, and fruits of such victories should not be squandered. Those parts of the system that do what the system does well must be protected from fads, whims, and other such spasms of poor judgement.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:481,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Adaptability and Stability are forces that are in constant tension. On one hand, systems must be able to confront novelty without blinking. On the other, they should not squander their patrimony on spur of the moment misadventures.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:483,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Therefore, factor your system so that artifacts that change at similar rates are together.\nMost interactions in a system tend to be within layers, or between adjacent layers. Individual layers tend to be about things that change at similar rates. Things that change at different rates diverge. Differential rates of change encourage layers to emerge. Brand notes as well that occupational specialties emerge along with these layers. The rate at which things change shapes our organizations as well. For instance, decorators and painters concern themselves with interiors, while architects dwell on site and skin. We expect to see things that evolve at different rates emerge as distinct concerns. This is \"separate that which changes from that which doesn't\" [Roberts & Johnson 1998] writ large.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:485,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Can we identify such layers in software?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:488,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Well, at the bottom, there are data. Things that change most quickly migrate into the data, since this is the aspect of software that is most amenable to change. Data, in turn, interact with users themselves, who produce and consume them.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:490,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Code changes more slowly than data, and is the realm of programmers, analysts and designers. In object-oriented languages, things that will change quickly are cast as black-box polymorphic components. Elements that will change less often may employ white-box inheritance.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:492,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The abstract classes and components that constitute an object-oriented framework change more slowly than the applications that are built from them. Indeed, their role is to distill what is common, and enduring, from among the applications that seeded the framework.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:494,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"As frameworks evolve, certain abstractions make their ways from individual applications into the frameworks and libraries that constitute the system's infrastructure [Foote 1988]. Not all elements will make this journey. Not all should. Those that do are among the most valuable legacies of the projects that spawn them. Objects help shearing layers to emerge, because they provide places where more fine-grained chunks of code and behavior that belong together can coalesce.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:496,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The Smalltalk programming language is built from a set of objects that have proven themselves to be of particular value to programmers. Languages change more slowly than frameworks. They are the purview of scholars and standards committees. One of the traditional functions of such bodies is to ensure that languages evolve at a suitably deliberate pace.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:498,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Artifacts that evolve quickly provide a system with dynamism and flexibility. They allow a system to be fast on its feet in the face of change.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:500,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Slowly evolving objects are bulwarks against change. They embody the wisdom that the system has accrued in its prior interactions with its environment. Like tenure, tradition, big corporations, and conservative politics, they maintain what has worked. They worked once, so they are kept around. They had a good idea once, so maybe they are a better than even bet to have another one.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:502,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Wide acceptance and deployment causes resistance to change. If changing something will break a lot of code, there is considerable incentive not to change it. For example, schema reorganization in large enterprise databases can be an expensive and time-consuming process. Database designers and administrators learn to resist change for this reason. Separate job descriptions, and separate hardware, together with distinct tiers, help to make these tiers distinct.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:504,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The phenomenon whereby distinct concerns emerge as distinct layers and tiers can be seen as well with graphical user interfaces.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:506,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Part of the impetus behind using METADATA [Foote & Yoder 1998b] is the observation that pushing complexity and power into the data pushes that same power (and complexity) out of the realm of the programmer and into the realm of users themselves. Metadata are often used to model static facilities such as classes and schemas, in order to allow them to change dynamically. The effect is analogous to that seen with modular office furniture, which allows office workers to easily, quickly, and cheaply move partitions without having to enlist architects and contractors in the effort.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:508,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Over time, our frameworks, abstract classes, and components come to embody what we've learned about the structure of the domains for which they are built. More enduring insights gravitate towards the primary structural elements of these systems. Things which find themselves in flux are spun out into the data, where users can interact with them. Software evolution becomes like a centrifuge spun by change. The layers that result, over time, can come to a much truer accommodation with the forces that shaped them than any top-down agenda could have devised.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:510,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Things that are good have a certain kind of structure. You can\\u2019t get that structure except dynamically. Period. In nature you\\u2019ve got continuous very-small-feedback-loop adaptation going on, which is why things get to be harmonious. That\\u2019s why they have the qualities we value. If it wasn\\u2019t for the time dimension, it wouldn\\u2019t happen. Yet here we are playing the major role creating the world, and we haven\\u2019t figured this out. That is a very serious matter.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:512,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Christopher Alexander -- [Brand 1994]\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:514,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Redwood\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:516,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"v v v\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:518,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"This pattern has much in common with the HOT SPOTS pattern discussed in [Roberts & Johnson 1998]. Indeed, separating things that change from those that do not is what drives the emergence of SHEARING LAYERS. These layers are the result of such differential rates of change, while HOT SPOTS might be thought of as the rupture zones in the fault lines along which slippage between layers occurs. This tectonic slippage is suggestive as well of the SOFTWARE TECTONICS pattern [Foote & Yoder 1996], which recommends fine-grained iteration as a means of avoiding catastrophic upheaval. METADATA and ACTIVE OBJECT-MODELS [Foote & Yoder 1998b] allow systems to adapt more quickly to changing requirements by pushing power into the data, and out onto users.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:520,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"sweeping-it-under-the-rug\",children:\"SWEEPING IT UNDER THE RUG\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:524,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"alias: POTEMKIN VILLAGE, HOUSECLEANING, PRETTY FACE, QUARANTINE, HIDING IT UNDER THE BED, REHABILITATION\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:526,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Concrete Sarcophagus\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:528,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"One of the most spectacular examples of sweeping a problem under the rug is the concrete sarcophagus that Soviet engineers constructed to put a 10,000 year lid on the infamous reactor number four at Chernobyl, in what is now Ukraine.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:530,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"If you can\\u2019t make a mess go away, at least you can hide it. Urban renewal can begin by painting murals over graffiti and putting fences around abandoned property. Children often learn that a single heap in the closet is better than a scattered mess in the middle of the floor.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:532,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"v v v\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:534,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"There are reasons, other than aesthetic concerns, professional pride, and guilt for trying to clean up messy code. A deadline may be nearing, and a colleague may want to call a chunk of your code, if you could only come up with an interface through which it could be called. If you don\\u2019t come up with an easy to understand interface, they\\u2019ll just use someone else\\u2019s (perhaps inferior) code. You might be cowering during a code-review, as your peers trudge through a particularly undistinguished example of your work. You know that there are good ideas buried in there, but that if you don\\u2019t start to make them more evident, they may be lost.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:536,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"There is a limit to how much chaos an individual can tolerate before being overwhelmed. At first glance, a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:538,columnNumber:108},this),\" can inspire terror and despair in the hearts of those who would try to tame it. The first step on the road to architectural integrity can be to identify the disordered parts of the system, and isolate them from the rest of it. Once the problem areas are identified and hemmed in, they can be gentrified using a divide and conquer strategy.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:538,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Overgrown, tangled, haphazard spaghetti code is hard to comprehend, repair, or extend, and tends to grow even worse if it is not somehow brought under control.\nThe Bondage of Gulliver`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:540,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Comprehensibility: It should go without saying that comprehensible, attractive, well-engineered code will be easier to maintain and extend than complicated, convoluted code. However, it takes Time and money to overhaul sloppy code. Still, the Cost of allowing it to fester and continue to decline should not be underestimated.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:543,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Morale: Indeed, the price of life with a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:545,columnNumber:42},this),\" goes beyond the bottom line. Life in the muddy trenches can be a dispiriting fate. Making even minor modifications can lead to maintenance marathons. Programmers become timid, afraid that tugging at a loose thread may have unpredictable consequences. After a while, the myriad threads that couple every part of the system to every other come to tie the programmer down as surely as Gulliver among the Lilliputians [Swift 1726]. Talent may desert the project in the face of such bondage.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:545,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"It should go without saying that comprehensible, attractive, well-engineered code will be easier to maintain and extend than complicated, convoluted code. However, it takes time and money to overhaul sloppy code. Still, the cost of allowing it to fester and continue to decline should not be underestimated.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:547,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Therefore, if you can\\u2019t easily make a mess go away, at least cordon it off. This restricts the disorder to a fixed area, keeps it out of sight, and can set the stage for additional refactoring.\nBy getting the dirt into a single pile beneath the carpet, you at least know where it is, and can move it around. You\\u2019ve still got a pile of dirt on your hands, but it is localized, and your guests can\\u2019t see it. As the engineers who entombed reactor number four at Chernobly demonstrated, sometimes you've got to get a lid on a problem before you can get serious about cleaning things up. Once the problem area is contained, you can decontaminate at a more leisurely pace.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:549,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Urban Decay\nTo begin to get a handle on spaghetti code, find those sections of it that seem less tightly coupled, and start to draw architectural boundaries there. Separate the global information into distinct data structures, and enforce communication between these enclaves using well-defined interfaces. Such steps can be the first ones on the road to re-establishing the system\\u2019s conceptual integrity, and discerning nascent architectural landmarks.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:552,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"Putting a fresh interface around a run down region of the system can be the first step on the way architectural rehabilitation. This is a long row to hoe, however. Distilling meaningful abstractions from a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:555,columnNumber:207},this),\" is a difficult and demand task. It requires skill, insight, and persistence. At times, RECONSTRUCTION may seem like the less painful course. Still, it is not like unscrambling an egg. As with rehabilitation in the real world, restoring a system to architectural health requires resources, as well as a sustained commitment on the part of the people who live there.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:555,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The UIMX user interface builder for Unix and Motif, and the various Smalltalk GUI builders both provide a means for programmers to cordon off complexity in this fashion.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:557,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"v v v\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:559,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'One frequently constructs a FA\\xC7ADE [Gamma et. al. 1995] to put a congenial \"pretty face\" on the unpleasantness that is SWEPT UNDER THE RUG. Once these messy chunks of code have been quarantined, you can expose their functionality using INTENTION REVEALING SELECTORS [Beck 1997].'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:561,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"This can be the first step on the road to CONSOLIDATION too, since one can begin to hem in unregulated growth than may have occurred during PROTOTYPING or EXPANSION [Foote & Opdyke 1995]. [Foote & Yoder 1998a] explores how, ironically, inscrutable code can persist because it is difficult to comprehend.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:563,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"This paper also examines how complexity can be hidden using suitable defaults (WORKS OUT OF THE BOX and PROGRAMMING-BY-DIFFERRENCE), and interfaces that gradually reveal additional capabilities as the client grows more sophisticated.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:565,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"reconstruction\",children:\"RECONSTRUCTION\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:569,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"alias: TOTAL REWRITE, DEMOLITION, THROWAWAY THE FIRST ONE, START OVER\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:571,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Fulton County Stadium Demolition\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:573,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:'Atlanta\\u2019s Fulton County Stadium was built in 1966 to serve as the home of baseball\\u2019s Atlanta Braves, and football\\u2019s Atlanta Falcons. In August of 1997, the stadium was demolished. Two factors contributed to its relatively rapid obsolescence. One was that the architecture of the original stadium was incapable of accommodating the addition of the \"sky-box\" suites that the spreadsheets of \\u201890s sporting economics demanded. No conceivable retrofit could accommodate this requirement. Addressing it meant starting over, from the ground up. The second was that the stadium\\u2019s attempt to provide a cheap, general solution to the problem of providing a forum for both baseball and football audiences compromised the needs of both. In only thirty-one years, the balance among these forces had shifted decidedly. The facility is being replaced by two new single-purpose stadia.'},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:575,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Might there be lessons for us about unexpected requirements and designing general components here?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:577,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"v v v\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:579,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Plan to Throw One Away (You Will Anyway) -- Brooks\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:581,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Extreme Programming [Beck 2000] had its genesis in the Chrysler Comprehensive Compensation project (C3). It began with a cry for help from a foundering project, and a decision to discard a year and a half's worth of work. The process they put in place after they started anew laid the foundation for XP, and the author's credit these approaches for the subsequent success of the C3 effort. However, less emphasis is given to value of the experience the team might have salvaged from their initial, unsuccessful draft. Could this first draft have been the unsung hero of this tale?\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:583,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Your code has declined to the point where it is beyond repair, or even comprehension.\nObsolescence: Of course, one reason to abandon a system is that it is in fact technically or economically obsolete. These are distinct situations. A system that is no longer state-of-the-art may still sell well, while a technically superior system may be overwhelmed by a more popular competitor for non-technical reasons.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:585,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"In the realm of concrete and steel, blight is the symptom, and a withdrawal of capital is the cause. Of course, once this process begins, it can feed on itself. On the other hand, given a steady infusion of resources, buildings can last indefinitely. It's not merely entropy, but an unwillingness to counteract it, that allows buildings to decline. In Europe, neighborhoods have flourished for hundreds of years. They have avoided the boom/bust cycles that characterize some New World cities.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:588,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Change: Even though software is a highly malleable medium, like Fulton County Stadium, new demands can, at times, cut across a system\\u2019s architectural assumptions in such a ways as to make accommodating them next to impossible. In such cases, a total rewrite might be the only answer.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:590,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Cost: Writing-off a system can be traumatic, both to those who have worked on it, and to those who have paid for it. Software is often treated as an asset by accountants, and can be an expensive asset at that. Rewriting a system, of course, does not discard its conceptual design, or its staff\\u2019s experience. If it is truly the case that the value of these assets is in the design experience they embody, then accounting practices must recognize this.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:592,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Organization: Rebuilding a system from scratch is a high-profile undertaking, that will demand considerable time and resources, which, in turn, will make high-level management support essential.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:594,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Therefore, throw it away and start over.\nSometimes it\\u2019s just easier to throw a system away, and start over. Examples abound. Our shelves are littered with the discarded carcasses of obsolete software and its documentation. Starting over can be seen as a defeat at the hands of the old code, or a victory over it.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:596,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Pruitt-Igoe\nOne reason to start over might be that the previous system was written by people who are long gone. Doing a rewrite provides new personnel with a way to reestablish contact between the architecture and the implementation. Sometimes the only way to understand a system it is to write it yourself. Doing a fresh draft is a way to overcome neglect. Issues are revisited. A fresh draft adds vigor. You draw back to leap. The quagmire vanishes. The swamp is drained.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:599,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Another motivation for building a new system might be that you feel that you've got the experience you need to do the job properly. One way to have gotten this experience is to have participated at some level in the unsuccessful development of a previous version of the system.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:602,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Of course, the new system is not designed in a vacuum. Brook\\u2019s famous tar pit is excavated, and the fossils are examined, to see what they can tell the living. It is essential that a thorough post-mortem review be done of the old system, to see what it did well, and why it failed. Bad code can bog down a good design. A good design can isolate and contain bad code.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:604,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"When a system becomes a \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:606,columnNumber:25},this),\", its relative incomprehensibility may hasten its demise, by making it difficult for it to adapt. It can persist, since it resists change, but cannot evolve, for the same reason. Instead, its inscrutability, even when it is to its s hort-term benefit, sows the seeds of its ultimate demise.\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:606,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"If this makes muddiness a frequently terminal condition, is this really a bad thing? Or is it a blessing that these sclerotic systems yield the stage to more agile successors? Certainly, the departure of these ramshackle relics can be a cause for celebration as well as sadness.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:608,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Cheshire Cat\nDiscarding a system dispenses with its implementation, and leaves only its conceptual design behind. Only the patterns that underlie the system remain, grinning like a Cheshire cat. It is their spirits that help to shape the next implementation. With luck, these architectural insights will be reincarnated as genuine reusable artifacts in the new system, such as abstract classes and frameworks. It is by finding these architectural nuggets that the promise of objects and reuse can finally be fulfilled.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:610,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"There are alternatives to throwning your system away and starting over. One is to embark on a regimen of incremental refactoring, to glean architectural elements and discernable abstractions from the mire. Indeed, you can begin by looking for coarse fissures along which to separate parts of the system, as was suggested in SWEEPING IT UNDER THE RUG. Of course, refactoring is more effective as a prophylactic measure that as a last-restort therapy. As with any edifice, it is a judgement call, whether to rehab or restort for the wrecking ball. Another alternative is to reassess whether new components and frameworks have come along that can replace all or part of the system. When you can reuse and retrofit other existing components, you can spare yourself the time and expense involved in rebuilding, repairing, and maintaining the one you have.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:613,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The United States Commerce Department defines durable goods as those that are designed to last for three years or more. This category traditionally applied to goods such as furniture, appliances, automobiles, and business machines. Ironically, as computer equipment is depreciating ever more quickly, it is increasingly our software artifacts, and not our hardware, that fulfill this criterion. Firmitas has come to the realm of bits and bytes.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:615,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Apple's Lisa Toolkit, and its successor, the Macintosh Toolbox, constitute one of the more intriguing examples of\nRECONSTRUCTION in the history of personal computing.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:617,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`An architect's most useful tools are an eraser at the drafting board, and a wrecking bar at the site\n-- Frank Lloyd Wright`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:620,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"v v v\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:623,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"The SOFTWARE TECTONICS pattern discussed in [Foote & Yoder 1996] observes that if incremental change is deferred indefinitely, major upheaval may be the only alternative. [Foote & Yoder 1998a] explores the WINNING TEAM phenomenon, whereby otherwise superior technical solutions are overwhelmed by non-technical exigencies.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:625,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`Brooks has eloquently observed that the most dangerous system an architect will ever design is his or her second system [Brooks 1995]. This is the notorious second-system effect. RECONSTRUCTION provides an opportunity for this misplaced hubris to exercise itself, so one must keep a wary eye open for it. Still, there are times when the best and only way to make a system better is to throw it away and start over. Indeed, one can do worse than to heed Brook's classic admonition that you should \"plan to throw one away, you will anyway\".`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:627,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Mir over Fiji\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:629,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Mir reenters the atmosphere over Fiji on 22 March, 2001\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:631,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"conclusion\",children:\"Conclusion\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:633,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"In the end, software architecture is about how we distill experience into wisdom, and disseminate it. We think the patterns herein stand alongside other work regarding software architecture and evolution that we cited as we went along. Still, we do not consider these patterns to be anti-patterns. There are good reasons that good programmers build BIG BALLS OF MUD. It may well be that the economics of the software world are such that the market moves so fast that long term architectural ambitions are foolhardy, and that expedient, slash-and-burn, disposable programming is, in fact, a state-of-the-art strategy. The success of these approaches, in any case, is undeniable, and seals their pattern-hood. People build\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:635,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"BIG BALLS OF MUD because they work. In many domains, they are the only things that have been shown to work. Indeed, they work where loftier approaches have yet to demonstrate that they can compete.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:637,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"It is not our purpose to condemn BIG BALLS OF MUD. Casual architecture is natural during the early stages of a system\\u2019s evolution. The reader must surely suspect, however, that our hope is that we can aspire to do better. By recognizing the forces and pressures that lead to architectural malaise, and how and when they might be confronted, we hope to set the stage for the emergence of truly durable artifacts that can put architects in dominant positions for years to come. The key is to ensure that the system, its programmers, and, indeed the entire organization, learn about the domain, and the architectural opportunities looming within it, as the system grows and matures.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:639,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Periods of moderate disorder are a part of the ebb and flow of software evolution. As a master chef tolerates a messy kitchen, developers must not be afraid to get a little mud on their shoes as they explore new territory for the first time. Architectural insight is not the product of master plans, but of hard won experience. The software architects of yesteryear had little choice other than to apply the lessons they learned in successive drafts of their systems, since RECONSTRUCTION was often the only practical means they had of supplanting a mediocre system with a better one. Objects, frameworks, components, and refactoring tools provide us with another alternative. Objects present a medium for expressing our architectural ideas at a level between coarse-grained applications and components and low level code. Refactoring tools and techniques finally give us the means to cultivate these artifacts as they evolve, and capture these insights.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:641,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`The onion-domed Church of the Intercession of the Virgin on the Moat in Moscow is one of Russia's most famous landmarks. It was built by Tsar Ivan IV just outside of the Kremlin walls in 1552 to commemorate Russia's victory over the Tatars at Kazan. The church is better known by it's nickname, St. Basil's. Ivan too is better known by his nickname \"Ivan the Terrible\". Legend has it that once the cathedral was completed, Ivan, ever true to his reputation, had the architects blinded, so that they could never build anything more beautiful. Alas, the state of software architecture today is such that few of us need fear for our eyesight.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:643,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"St. Basil's\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:645,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"acknowledgments\",children:\"Acknowledgments\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:647,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"A lot of people have striven to help us avoid turning this paper into an unintentional example of its central theme. We are grateful first of all to the members of the University of Illinois Software Architecture Group, John Brant, Ian Chai, Ralph Johnson, Lewis Muir, Dragos Manolescu, Brian Marick, Eiji Nabika, John (Zhijiang) Han, Kevin Scheufele, Tim Ryan, Girish Maiya, Weerasak Wittawaskul, Alejandra Garrido, Peter Hatch, and Don Roberts, who commented on several drafts of this work over the last three years.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:649,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"We\\u2019d like to also thank our tireless shepherd, Bobby Woolf, who trudged through the muck of several earlier versions of this paper.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:651,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Naturally, we\\u2019d like to acknowledge the members of our PLoP \\u201997 Conference Writer\\u2019s Workshop, Norm Kerth, Hans Rohnert, Clark Evans, Shai Ben-Yehuda, Lorraine Boyd, Alejandra Garrido, Dragos Manolescu, Gerard Meszaros, Kyle Brown, Ralph Johnson, and Klaus Renzel.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:653,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Lorrie Boyd provided some particularly poignant observations on scale, and the human cost of projects that fail.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:655,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"UIUC Architecture professor Bill Rose provided some keen insights on the durability of housing stock, and history of the estrangement of architects from builders.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:657,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Thanks to Brad Appleton, Michael Beedle, Russ Hurlbut, and the rest of the people in the Chicago Patterns Group for their time, suggestions, and ruminations on reuse and reincarnation.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:659,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Thanks to Steve Berczuk and the members of the Boston Area Patterns Group for their review.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:661,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Thanks too to Joshua Kerievsky and the Design Patterns Study Group of New York City for their comments.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:663,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"We'd like to express our gratitude as well to Paolo Cantoni, Chris Olufson, Sid Wright, John Liu, Martin Cohen, John Potter, Richard Helm, and James Noble of the Sydney Patterns Group, who workshopped this paper during the late winter, er, summer of early 1998.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:665,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"John Vlissides, Neil Harrison, Hans Rohnert, James Coplien, and Ralph Johnson provided some particularly candid, incisive and useful criticism of some of the later drafts of the paper.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:667,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[\"A number of readers have observed, over the years, that \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:669,columnNumber:57},this),\" has a certain dystopian, Dilbert-esque quality to it. We are grateful to United Features Syndicate, Inc. for not having, as of yet, asked us to remove the following cartoon from the web-based version of \",(0,n.jsxDEV)(e.strong,{children:\"Big Ball of Mud\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:669,columnNumber:280},this),\".\"]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:669,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Dilbert -- 6 April 1990\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:671,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.h2,{id:\"references\",children:\"References\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:673,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Alexander 1964]\nChristopher Alexander\nNotes on the Synthesis of Form\nHarvard University Press, Cambridge, MA, 1964`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:676,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Alexander 1979]\nChristopher Alexander\nThe Timeless Way of Building\nOxford University Press, Oxford, UK, 1979`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:681,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Alexander et. al 1977]\nC. Alexander, S. Ishikawa, and M. Silverstein\nA Pattern Language\nOxford University Press, Oxford, UK, 1977`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:686,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Alexander 1988]\nChristopher Alexander\nThe Oregon Experiment\nOxford University Press, Oxford, UK, 1988`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:691,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Bach 1997]\nJames Bach, Softwae Testing Labs\nGood Enough Software: Beyond the Buzzword\nIEEE Computer, August 1997`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:696,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Beck 1997]\nKent Beck\nSmalltalk Best Practice Patterns\nPrentice Hall, Upper Saddle River, NJ, 1997`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:701,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Beck & Cunningham 1989]\nKent Beck and Ward Cunningham\nA Laboratory for Teaching Object-Oriented Thinking\nOOPSLA '89 Proceedings\nNew Orleans, LA\nOctober 1-6 1989, pages 1-6`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:706,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Beck 2000]\nKent Beck\nEmbracing Change: Extreme Programming Explained\nCambridge University Press, 2000`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:713,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Booch 1994]\nGrady Booch\nObject-Oriented Analysis and Design with Applications\nBenjamin/Cummings, Redwood City, CA, 1994`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:718,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Brand 1994]\nStewart Brand\nHow Buildings Learn: What Happens After They're Built\nViking Press, 1994`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:723,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Brooks 1995]\nFrederick P. Brooks, Jr.\nThe Mythical Man-Month (Anniversary Edition)\nAddison-Wesley, Boston, MA, 1995`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:728,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Brown et al. 1998]\nWilliam J. Brown, Raphael C. Malveau,\nHays W. \"Skip\" McCormick III, and Thomas J. Mobray\nAntipatterns: Refactoring, Software Architectures, and Projects in Crisis\nWiley Computer Publishing, John Wiley & Sons, Inc., 1998`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:733,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Buschmann et al. 1996]\nFrank Buschmann, Regine Meunier, Hans Rohnert, Peter Sommerlad, and Michael Stahl\nPattern-Oriented Software Architecture: A System of Patterns\nJohn Wiley and Sons, 1996`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:739,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Coplien 1995]\nJames O. Coplien\nA Generative Development-Process Pattern Language\nFirst Conference on Pattern Languages of Programs (PLoP '94)\nMonticello, Illinois, August 1994\nPattern Languages of Program Design\nedited by James O. Coplien and Douglas C. Schmidt\nAddison-Wesley, 1995`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:744,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[`[Cunningham 1999a]\nWard Cunningham\nPeter Principle of Programming\nPortland Pattern Repository\n13 August 1999\n`,(0,n.jsxDEV)(e.a,{href:\"http://www.c2.com/cgi/wiki?PeterPrincipleProgramming\",children:\"http://www.c2.com/cgi/wiki?PeterPrincipleProgramming\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:758,columnNumber:1},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:753,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[`[Cunningham 1999b]\nWard Cunningham\nThe Most Complicated Thing that Could Possible Work\nPortland Pattern Repository\n13 August 1999\n`,(0,n.jsxDEV)(e.a,{href:\"http://www.c2.com/cgi/wiki?TheMostComplexWhichCanBeMadeToWork\",children:\"http://www.c2.com/cgi/wiki?TheMostComplexWhichCanBeMadeToWork\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:765,columnNumber:1},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:760,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Cusumano & Shelby 1995]\nMichael A. Cusumano and Richard W. Shelby\nMicrosoft Secrets\nThe Free Press, New York, NY, 1995`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:767,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Foote 1988]\nBrian Foote (Advisor: Ralph Johnson)\nDesigning to Facilitate Change with Object-Oriented Frameworks\nMasters Thesis, 1988\nDept. of Computer Science,\nUniversity of Illinois at Urbana-Champaign`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:772,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Foote & Opdyke 1995]\nBrian Foote and William F. Opdyke\nLifecycle and Refactoring Patterns that Support Evolution and Reuse\nFirst Conference on Patterns Languages of Programs (PLoP '94)\nMonticello, Illinois, August 1994\nPattern Languages of Program Design\nedited by James O. Coplien and Douglas C. Schmidt\nAddison-Wesley, 1995`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:779,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"This volume is part of the Addison-Wesley Software Patterns Series.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:788,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Foote & Yoder 1996]\nBrian Foote and Joseph W. Yoder\nEvolution, Architecture, and Metamorphosis\nSecond Conference on Patterns Languages of Programs (PLoP '95)\nMonticello, Illinois, September 1995\nPattern Languages of Program Design 2\nedited by John M. Vlissides, James O. Coplien, and Norman L. Kerth\nAddison-Wesley, 1996`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:790,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"This volume is part of the Addison-Wesley Software Patterns Series.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:799,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Foote & Roberts 1998]\nBrian Foote and Don Roberts\nLingua Franca\nFifth Conference on Patterns Languages of Programs (PLoP '98)\nMonticello, Illinois, August 1998\nTechnical Report #WUCS-98-25 (PLoP '98/EuroPLoP '98), September 1998\nDepartment of Computer Science, Washington University`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:801,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Foote & Yoder 1996]\nBrian Foote and Joseph W. Yoder\nEvolution, Architecture, and Metamorphosis\nSecond Conference on Patterns Languages of Programs (PLoP '95)\nMonticello, Illinois, September 1995\nPattern Languages of Program Design 2\nedited by John M. Vlissides, James O. Coplien, and Norman L. Kerth\nAddison-Wesley, 1996`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:809,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"This volume is part of the Addison-Wesley Software Patterns Series.\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:818,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[`[Foote & Yoder 1998a]\nBrian Foote and Joseph W. Yoder\nThe Selfish Class\nThird Conference on Patterns Languages of Programs (PLoP '96)\nMonticello, Illinois, September 1996\nTechnical Report #WUCS-97-07, September 1996\nDepartment of Computer Science, Washington University\nPattern Languages of Program Design 3\nedited by Robert Martin, Dirk Riehle, and Frank Buschmann\nAddison-Wesley, 1998\n`,(0,n.jsxDEV)(e.a,{href:\"http://www.laputan.org\",children:\"http://www.laputan.org\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:830,columnNumber:1},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:820,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:\"Order from Amazon.com\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:832,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`This volume is part of the Addison-Wesley Software Patterns Series.\nBrian also wrote an introduction for this volume.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:834,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Foote & Yoder 1998b]\nBrian Foote and Joseph W. Yoder\nMetadata\nFifth Conference on Patterns Languages of Programs (PLoP '98)\nMonticello, Illinois, August 1998\nTechnical Report #WUCS-98-25 (PLoP '98/EuroPLoP '98), September 1998\nDepartment of Computer Science, Washington University`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:837,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Fowler 1999]\nMartin Fowler\nRefactoring: Improving the Design of Existing Code\nAddison Wesley Longman, 1999`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:845,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[`[Gabriel 1991]\nRichard P. Gabriel\nLisp: Good News Bad News and How to Win Big\n`,(0,n.jsxDEV)(e.a,{href:\"http://www.laputan.org/gabriel/worse-is-better.html\",children:\"http://www.laputan.org/gabriel/worse-is-better.html\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:853,columnNumber:1},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:850,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:[`[Gabriel 1996]\nRichard P. Gabriel\nPatterns of Software: Tales from the Software Community\nOxford University Press, Oxford, UK, 1996\n`,(0,n.jsxDEV)(e.a,{href:\"http://www.oup-usa.org/\",children:\"http://www.oup-usa.org/\"},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:859,columnNumber:1},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:855,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Gamma et al. 1995]\nEric Gamma, Richard Helm, Ralph Johnson, and John Vlissides\nDesign Patterns:  Elements of Reusable Object-Oriented Software\nAddison-Wesley Longman, Reading, MA, 1995`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:861,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Garlan & Shaw 1993]\nDavid Garlan and Mary Shaw\nAn Introduction to Software Architecture\nV. Ambriola and G. Totora, editors\nAdvances in Software Engineering and Knowledge Engineering, Vol 2.\nSingapore: World Scientific Publishing, 1993, pp. 1-39`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:866,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Ingalls 1983]\nDaniel H. H. Ingalls\nThe Evolution of the Smalltalk Virtual Machine\nSmalltalk-80: Bits of History, Words of Advice\nedited by Glenn Krasner\nAddison-Wesley, 1983`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:873,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Johnson & Foote 1988]\nRalph Johnson and Brian Foote\nDesigning Reusable Classes\nJournal of Object-Oriented Programming\nVolume 1, Number 2, June/July 1988`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:880,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Marick 1995]\nBrian Marick\nThe Craft of Software Testing\nPrentice-Hall, Upper Saddle River, NJ, 1995`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:886,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Meszaros 1997]\nGerard Meszaros\nArchi-Patterns: A Process Pattern Language for Defining Architectures\nFourth Conference on Pattern Languages of Programs (PLoP '97)\nMonticello, Illinois, September 1997`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:891,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Roberts & Johnson 1998]\nDon Roberts and Ralph E. Johnson\nEvolve Frameworks into Domain-Specific Languages\nThird Conference on Patterns Languages of Programs (PLoP '96)\nMonticello, Illinois, September 1996\nTechnical Report #WUCS-97-07, September 1996\nDepartment of Computer Science, Washington University\nPattern Languages of Program Design 3\nedited by Robert Martin, Dirk Riehle, and Frank Buschmann\nAddison-Wesley, 1998`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:897,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Shaw 1996]\nMary Shaw\nSome Patterns for Software Architectures\nSecond Conference on Patterns Languages of Programs (PLoP '95)\nMonticello, Illinois, September 1995\nPattern Languages of Program Design 2\nedited by John M. Vlissides, James O. Coplien, and Norman L. Kerth\nAddison-Wesley, 1996`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:908,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Simon 1969]\nHerbert A. Simon\nThe Sciences of the Artificial\nMIT Press, Cambridge, MA, 1969`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:917,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Swift 1726]\nJohnathan Swift\nTravels Into Several Remote Nations Of The World.\nIn four parts. By Lemuel Gulliver, First a Surgeon, and then a Captain of several Ships.\nB. Motte, London, 1726.`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:922,columnNumber:1},this),`\n`,(0,n.jsxDEV)(e.p,{children:`[Vitruvius 20 B.C.]\nMarcus Vitruvius Pollio (60 B.C-20 B.C.)\nDe Architectura\ntranslated by Joseph Gwilt\nPriestley and Weale, London, 1826`},void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:928,columnNumber:1},this)]},void 0,!0,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\",lineNumber:1,columnNumber:1},this)}function yn(c={}){let{wrapper:e}=c.components||{};return e?(0,n.jsxDEV)(e,Object.assign({},c,{children:(0,n.jsxDEV)(Ve,c,void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this)}),void 0,!1,{fileName:\"/Volumes/T7/Code/blog-next-13/content/posts/_mdx_bundler_entry_point-9e45b9f7-f8c4-437a-8487-a8b2ab402dc7.mdx\"},this):Ve(c)}var _n=yn;return pn(xn);})();\n/*! Bundled license information:\n\nreact/cjs/react-jsx-dev-runtime.development.js:\n  (**\n   * @license React\n   * react-jsx-dev-runtime.development.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n;return Component;"
  },
  "_id": "posts/2023-04-20-big-ball-of-mud.mdx",
  "_raw": {
    "sourceFilePath": "posts/2023-04-20-big-ball-of-mud.mdx",
    "sourceFileName": "2023-04-20-big-ball-of-mud.mdx",
    "sourceFileDir": "posts",
    "contentType": "mdx",
    "flattenedPath": "posts/2023-04-20-big-ball-of-mud"
  },
  "type": "Post",
  "slug": "/posts/2023-04-20-big-ball-of-mud",
  "slugAsParams": "2023-04-20-big-ball-of-mud",
  "stats": {
    "text": "85 min read",
    "minutes": 84.345,
    "time": 5060700,
    "words": 16869
  }
}