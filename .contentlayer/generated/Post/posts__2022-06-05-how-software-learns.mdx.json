{
  "title": "How Software Learns",
  "excerpt": "I recently read the book \"How Buildings Learn\" by Stewart Brand. One premise is that all buildings are predictions, and all predictions are wrong, so design them to be easy to change. It is a wonderful book on complex systems, and the whole time I was reading it I was also thinking of it metaphorically as creating software.",
  "coverImage": "/assets/blog/img/arch-1.jpg",
  "date": "2022-06-05T00:00:00.000Z",
  "published": true,
  "author": {
    "name": "Dan Stroot",
    "picture": "/assets/blog/authors/dan.jpeg",
    "type": "Author",
    "_raw": {}
  },
  "ogImage": {
    "url": "/assets/blog/img/arch-1.jpg",
    "type": "OGImage",
    "_raw": {}
  },
  "seoURL": null,
  "body": {
    "raw": "\nI recently read the book \"How Buildings Learn\" by Stewart Brand (creator of the Whole Earth Catalog). It is a wonderful book, and the whole time I was reading it I was also thinking of it metaphorically like creating software. One of Stewart's premises is that buildings learn and adapt over time - they are constantly refined and reshaped by their occupants. Maintenance is crucial to a building's lifespan and human value. Maintenance is tailoring a building to it's occupants true needs and use.\n\nThis is similar to how software maintenance is crucial to tailoring software. I found it deeply satisfying to think of software, like a building, as a prediction of the future - yet a prediction of the future that we know is wrong even as we create it. However, it becomes less wrong as time, experience, and knowledge are added (maintenance).\n\nIf a city, a town, or a building, is not undergoing upgrade, repairs, and new additions, that means it is dying. That constant din of work is the pulse of life for human environments. Jackhammers removing the old are the sound of a city’s metabolism. Neighborhoods that have construction in them are alive; those without it are dying.\n\nA building needs upgrading and repair to remain healthy in the long-term. There are entire countries like China and India which are like nation-sized construction sites. It seems that every city is chock full of unfinished demolition, detours, cranes, dug-up streets, and on-going construction. The visible, tangible motto is “Pardon our dust, exciting changes in the works!”\n\nIf we think of this as a book about complex systems there is much to learn. I've personally applied many of these lessons to software engineering. As you read my book notes below imagine we are speaking of _software_ rather than _buildings_. Try substituting the word \"software\" for \"buildings\" in your mind. See where the metaphor takes your imagination.\n\n### Book Notes - \"How Buildings Learn\"\n\n1. All buildings are predictions, and all predictions are wrong. Design so that it doesn't matter.\n\n2. Whatever a client or architect says will happen with a building, won't. Whatever you are ready for, doesn't happen. Whatever you aren't ready for, does.\n\n3. Always choose the option that gives you more options. Avoid cutting off choices.\n\n4. Design decisions will keep happening through the whole process, permissions, site preparation, construction, finishing, inhabitation.\n\n5. Buildings shouldn't look exactly like their models. That's when people knew the _least_ about what's really needed.\n\n6. A building can't be finished. All buildings grow.\n\n7. Almost no buildings adapt well, but all buildings adapt anyway.\n\n8. In many fields, \"architecture\" means \"unchanging deep structure\".\n\n![Architecture in use](https://danstroot.imgix.net/assets/blog/img/arch-4.jpg)\n\n9. Buildings have architectural \"layers\". The slower layers (site, structure) constrain the quick (services, space, stuff). Keep services separate from skin as well as structure:\n\n   - STRUCTURE: foundation & load bearing, rarely changed\n   - SKIN: changes every 20 years, more air-tight, better insulated\n   - SERVICES: Plumbing, electrical, etc. - changes every 7-15 years\n   - SPACE PLAN: interior layout, walls, ceilings, floors, doors. changes every 3-30 years\n\n10. Always provide excess services capacity.\n\n11. Document the layers _as built_. Everything that is buried will be dug up some day. Leave a treasure map.\n\n    - Take photos after the services are installed but before the sheetrock/skin. Record precisely where all the services are **before they are hidden**.\n\n12. Keep scrupulous maintenance logs. Precisely what was done, when, and by who. Schedule the routines of periodic servicing and preventative maintenance.\n\n13. Over 50 years, the changes within a building cost 3x more than the original building.\n\n14. We are in denial about maintenance because when done it's just a negated negative.\n\n15. A new building is a bad teacher of maintenance habits, since deferring of maintenance is our nature.\n\n16. Spend more money than usual on the basic structure. Less on finishing. And more on maintenance.\n\n![Unique architecture](https://danstroot.imgix.net/assets/blog/img/arch-3.jpg)\n\n17. Make a building that is easy to maintain.\n\n18. Pouring concrete on the ground for an instant foundation is mal-adaptive because pipes are buried, and there is no basement space for maintenance and services access.\n\n19. Build so it's easy to make little modifications in a way that once you've made them, they feel integral with the nature and structure of what's already there. Be able to mess around with it and progressively change it, adapt it.\n\n20. Hire good builders and save money in the long run. Invest in better construction to spend less on maintenance.\n\n21. Adaptation between buildings and users is slow and continuous process that can't be achieved in a single leap.\n\n22. The \"temporary\" is permanent most of the time. If the cheap fix worked, it stays. If it failed, it's embarrassing to remediate.\n\n23. Occupy a building while it's being finished or remodeled. It's worth it for the fine-tuning that your presence affords. Make sure things sit exactly where it feels best for you: counter height, fridge, sinks, etc. It should fit like tailored clothing.\n\n24. Fine-tuning (making little repairs as you go) turns a building into a joy. Find things that don't work and try things that might not work. By failing small, early, and often, it can succeed long and large.\n\n### References\n\n- [How Buildings Learn](https://www.amazon.com/How-Buildings-Learn-Stewart-Brand/dp/0140139966)\n- [The Technium: Construction is Life](https://kk.org/thetechnium/construction-is-life/)\n\n---\n\nImage Credit: **Google’s New Bjarke Ingels and Thomas Heatherwick Designed Headquarters**\n\n<span className='text-sm'>\n  Google's new Bay View campus, spanning 1.1 million square feet of space at NASA’s Ames Research\n  Center in Silicon Valley. Designed with ideas of innovation, nature, and community in mind, the\n  end result is a uniquely open space capable of furthering Google’s ambition to operate entirely on\n  carbon-free energy for 24 hours a day, seven days a week by 2030.\n</span>\n",
    "code": "var Component=(()=>{var c=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var g=Object.getOwnPropertyNames;var p=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(i,e)=>()=>(e||i((e={exports:{}}).exports,e),e.exports),w=(i,e)=>{for(var t in e)r(i,t,{get:e[t],enumerable:!0})},o=(i,e,t,s)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of g(e))!m.call(i,a)&&a!==t&&r(i,a,{get:()=>e[a],enumerable:!(s=u(e,a))||s.enumerable});return i};var y=(i,e,t)=>(t=i!=null?c(p(i)):{},o(e||!i||!i.__esModule?r(t,\"default\",{value:i,enumerable:!0}):t,i)),b=i=>o(r({},\"__esModule\",{value:!0}),i);var h=f((B,l)=>{l.exports=_jsx_runtime});var x={};w(x,{default:()=>I,frontmatter:()=>k});var n=y(h()),k={title:\"How Software Learns\",excerpt:'I recently read the book \"How Buildings Learn\" by Stewart Brand. One premise is that all buildings are predictions, and all predictions are wrong, so design them to be easy to change. It is a wonderful book on complex systems, and the whole time I was reading it I was also thinking of it metaphorically as creating software.',coverImage:\"/assets/blog/img/arch-1.jpg\",date:\"2022-06-05\",published:!0,author:{name:\"Dan Stroot\",picture:\"/assets/blog/authors/dan.jpeg\"},ogImage:{url:\"/assets/blog/img/arch-1.jpg\"},seoURL:null};function d(i){let e=Object.assign({p:\"p\",em:\"em\",h3:\"h3\",ol:\"ol\",li:\"li\",img:\"img\",ul:\"ul\",strong:\"strong\",a:\"a\",hr:\"hr\"},i.components);return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:`I recently read the book \"How Buildings Learn\" by Stewart Brand (creator of the Whole Earth Catalog). It is a wonderful book, and the whole time I was reading it I was also thinking of it metaphorically like creating software. One of Stewart's premises is that buildings learn and adapt over time - they are constantly refined and reshaped by their occupants. Maintenance is crucial to a building's lifespan and human value. Maintenance is tailoring a building to it's occupants true needs and use.`}),`\n`,(0,n.jsx)(e.p,{children:\"This is similar to how software maintenance is crucial to tailoring software. I found it deeply satisfying to think of software, like a building, as a prediction of the future - yet a prediction of the future that we know is wrong even as we create it. However, it becomes less wrong as time, experience, and knowledge are added (maintenance).\"}),`\n`,(0,n.jsx)(e.p,{children:\"If a city, a town, or a building, is not undergoing upgrade, repairs, and new additions, that means it is dying. That constant din of work is the pulse of life for human environments. Jackhammers removing the old are the sound of a city\\u2019s metabolism. Neighborhoods that have construction in them are alive; those without it are dying.\"}),`\n`,(0,n.jsx)(e.p,{children:\"A building needs upgrading and repair to remain healthy in the long-term. There are entire countries like China and India which are like nation-sized construction sites. It seems that every city is chock full of unfinished demolition, detours, cranes, dug-up streets, and on-going construction. The visible, tangible motto is \\u201CPardon our dust, exciting changes in the works!\\u201D\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"If we think of this as a book about complex systems there is much to learn. I've personally applied many of these lessons to software engineering. As you read my book notes below imagine we are speaking of \",(0,n.jsx)(e.em,{children:\"software\"}),\" rather than \",(0,n.jsx)(e.em,{children:\"buildings\"}),'. Try substituting the word \"software\" for \"buildings\" in your mind. See where the metaphor takes your imagination.']}),`\n`,(0,n.jsx)(e.h3,{id:\"book-notes---how-buildings-learn\",children:'Book Notes - \"How Buildings Learn\"'}),`\n`,(0,n.jsxs)(e.ol,{children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"All buildings are predictions, and all predictions are wrong. Design so that it doesn't matter.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Whatever a client or architect says will happen with a building, won't. Whatever you are ready for, doesn't happen. Whatever you aren't ready for, does.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Always choose the option that gives you more options. Avoid cutting off choices.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Design decisions will keep happening through the whole process, permissions, site preparation, construction, finishing, inhabitation.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Buildings shouldn't look exactly like their models. That's when people knew the \",(0,n.jsx)(e.em,{children:\"least\"}),\" about what's really needed.\"]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"A building can't be finished. All buildings grow.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Almost no buildings adapt well, but all buildings adapt anyway.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:'In many fields, \"architecture\" means \"unchanging deep structure\".'}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://danstroot.imgix.net/assets/blog/img/arch-4.jpg\",alt:\"Architecture in use\"})}),`\n`,(0,n.jsxs)(e.ol,{start:\"9\",children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:'Buildings have architectural \"layers\". The slower layers (site, structure) constrain the quick (services, space, stuff). Keep services separate from skin as well as structure:'}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"STRUCTURE: foundation & load bearing, rarely changed\"}),`\n`,(0,n.jsx)(e.li,{children:\"SKIN: changes every 20 years, more air-tight, better insulated\"}),`\n`,(0,n.jsx)(e.li,{children:\"SERVICES: Plumbing, electrical, etc. - changes every 7-15 years\"}),`\n`,(0,n.jsx)(e.li,{children:\"SPACE PLAN: interior layout, walls, ceilings, floors, doors. changes every 3-30 years\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Always provide excess services capacity.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsxs)(e.p,{children:[\"Document the layers \",(0,n.jsx)(e.em,{children:\"as built\"}),\". Everything that is buried will be dug up some day. Leave a treasure map.\"]}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsxs)(e.li,{children:[\"Take photos after the services are installed but before the sheetrock/skin. Record precisely where all the services are \",(0,n.jsx)(e.strong,{children:\"before they are hidden\"}),\".\"]}),`\n`]}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Keep scrupulous maintenance logs. Precisely what was done, when, and by who. Schedule the routines of periodic servicing and preventative maintenance.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Over 50 years, the changes within a building cost 3x more than the original building.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"We are in denial about maintenance because when done it's just a negated negative.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"A new building is a bad teacher of maintenance habits, since deferring of maintenance is our nature.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Spend more money than usual on the basic structure. Less on finishing. And more on maintenance.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://danstroot.imgix.net/assets/blog/img/arch-3.jpg\",alt:\"Unique architecture\"})}),`\n`,(0,n.jsxs)(e.ol,{start:\"17\",children:[`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Make a building that is easy to maintain.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Pouring concrete on the ground for an instant foundation is mal-adaptive because pipes are buried, and there is no basement space for maintenance and services access.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Build so it's easy to make little modifications in a way that once you've made them, they feel integral with the nature and structure of what's already there. Be able to mess around with it and progressively change it, adapt it.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Hire good builders and save money in the long run. Invest in better construction to spend less on maintenance.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Adaptation between buildings and users is slow and continuous process that can't be achieved in a single leap.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:`The \"temporary\" is permanent most of the time. If the cheap fix worked, it stays. If it failed, it's embarrassing to remediate.`}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Occupy a building while it's being finished or remodeled. It's worth it for the fine-tuning that your presence affords. Make sure things sit exactly where it feels best for you: counter height, fridge, sinks, etc. It should fit like tailored clothing.\"}),`\n`]}),`\n`,(0,n.jsxs)(e.li,{children:[`\n`,(0,n.jsx)(e.p,{children:\"Fine-tuning (making little repairs as you go) turns a building into a joy. Find things that don't work and try things that might not work. By failing small, early, and often, it can succeed long and large.\"}),`\n`]}),`\n`]}),`\n`,(0,n.jsx)(e.h3,{id:\"references\",children:\"References\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://www.amazon.com/How-Buildings-Learn-Stewart-Brand/dp/0140139966\",children:\"How Buildings Learn\"})}),`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://kk.org/thetechnium/construction-is-life/\",children:\"The Technium: Construction is Life\"})}),`\n`]}),`\n`,(0,n.jsx)(e.hr,{}),`\n`,(0,n.jsxs)(e.p,{children:[\"Image Credit: \",(0,n.jsx)(e.strong,{children:\"Google\\u2019s New Bjarke Ingels and Thomas Heatherwick Designed Headquarters\"})]}),`\n`,(0,n.jsx)(\"span\",{className:\"text-sm\",children:(0,n.jsx)(e.p,{children:`Google's new Bay View campus, spanning 1.1 million square feet of space at NASA\\u2019s Ames Research\nCenter in Silicon Valley. Designed with ideas of innovation, nature, and community in mind, the\nend result is a uniquely open space capable of furthering Google\\u2019s ambition to operate entirely on\ncarbon-free energy for 24 hours a day, seven days a week by 2030.`})})]})}function v(i={}){let{wrapper:e}=i.components||{};return e?(0,n.jsx)(e,Object.assign({},i,{children:(0,n.jsx)(d,i)})):d(i)}var I=v;return b(x);})();\n;return Component;"
  },
  "_id": "posts/2022-06-05-how-software-learns.mdx",
  "_raw": {
    "sourceFilePath": "posts/2022-06-05-how-software-learns.mdx",
    "sourceFileName": "2022-06-05-how-software-learns.mdx",
    "sourceFileDir": "posts",
    "contentType": "mdx",
    "flattenedPath": "posts/2022-06-05-how-software-learns"
  },
  "type": "Post",
  "slug": "/posts/2022-06-05-how-software-learns",
  "slugAsParams": "2022-06-05-how-software-learns",
  "stats": {
    "text": "5 min read",
    "minutes": 4.795,
    "time": 287700,
    "words": 959
  }
}