{
  "title": "useIntersectionObserver",
  "summary": "The Intersection Observer API allows you to configure a callback that is called whenever an element intersects either the device viewport.",
  "icon": "react",
  "date": "2021-10-19T00:00:00.000Z",
  "published": true,
  "tags": [
    "React Hook"
  ],
  "body": {
    "raw": "\nThe Intersection Observer API allows you to configure a callback that is called whenever an element, called the target, intersects either the device viewport or a specified element; for the purpose of this API, this is called the root element or root.\n\n- rootMargin: Margin around the root. Serves to grow or shrink each side of the root element's bounding box before computing intersections.\n- threshold: at what percentage of the target's visibility the observer's callback should be executed.\n\n<CodeBlock>\n\n```js\nimport { useEffect } from 'react';\n\nconst useIntersectionObserver = ({\n  target,\n  onIntersect, // callback\n  threshold = 0.2, // when 20% visible\n  rootMargin = '0px', // don't adjust viewport margin\n}) => {\n  useEffect(() => {\n    if (!target) {\n      return;\n    }\n\n    const observer = new IntersectionObserver(onIntersect, {\n      rootMargin,\n      threshold,\n    });\n\n    // Once you have created the observer, you need to give it a target element to watch\n    const current = target.current;\n    observer.observe(current);\n\n    // clean up our observer\n    return () => {\n      observer.unobserve(current);\n    };\n  });\n};\n\nexport default useIntersectionObserver;\n```\n\n</CodeBlock>\n\n<CodeBlock>\n\n```jsx\n<GitGist\n  gistURL={\n    'https://gist.githubusercontent.com/dstroot/94c152da31201f41ee8b550442ddbc0b/raw/3a23e00f7c861fe9d36d9e12289a6904ce2ad15e/useIntersectionObserver.js'\n  }\n/>\n```\n\n</CodeBlock>\n",
    "code": "var Component=(()=>{var d=Object.create;var o=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,b=Object.prototype.hasOwnProperty;var g=(t,e)=>()=>(e||t((e={exports:{}}).exports,e),e.exports),f=(t,e)=>{for(var r in e)o(t,r,{get:e[r],enumerable:!0})},a=(t,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let s of p(e))!b.call(t,s)&&s!==r&&o(t,s,{get:()=>e[s],enumerable:!(c=u(e,s))||c.enumerable});return t};var v=(t,e,r)=>(r=t!=null?d(m(t)):{},a(e||!t||!t.__esModule?o(r,\"default\",{value:t,enumerable:!0}):r,t)),j=t=>a(o({},\"__esModule\",{value:!0}),t);var i=g((O,l)=>{l.exports=_jsx_runtime});var y={};f(y,{default:()=>N,frontmatter:()=>w});var n=v(i()),w={title:\"useIntersectionObserver\",published:!0,date:\"2021-10-19\",summary:\"The Intersection Observer API allows you to configure a callback that is called whenever an element intersects either the device viewport.\",icon:\"react\",tags:[\"React Hook\"]};function h(t){let e=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",pre:\"pre\",code:\"code\",span:\"span\"},t.components),{CodeBlock:r}=e;return r||k(\"CodeBlock\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"The Intersection Observer API allows you to configure a callback that is called whenever an element, called the target, intersects either the device viewport or a specified element; for the purpose of this API, this is called the root element or root.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"rootMargin: Margin around the root. Serves to grow or shrink each side of the root element's bounding box before computing intersections.\"}),`\n`,(0,n.jsx)(e.li,{children:\"threshold: at what percentage of the target's visibility the observer's callback should be executed.\"}),`\n`]}),`\n`,(0,n.jsx)(r,{children:(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-js\",children:[(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"import\"}),\" { useEffect } \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"from\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-string\",children:\"'react'\"}),`;\n\n`,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"const\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"useIntersectionObserver\"}),\" = (\",(0,n.jsxs)(e.span,{className:\"hljs-params\",children:[`{\n  target,\n  onIntersect, // callback\n  threshold = `,(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"0.2\"}),\", // when \",(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"20\"}),`% visible\n  rootMargin = `,(0,n.jsx)(e.span,{className:\"hljs-string\",children:\"'0px'\"}),\", // don\",(0,n.jsx)(e.span,{className:\"hljs-string\",children:`'t adjust viewport margin\n}) => {\n  useEffect(() => {\n    if (!target) {\n      return;\n    }\n\n    const observer = new IntersectionObserver(onIntersect, {\n      rootMargin,\n      threshold,\n    });\n\n    // Once you have created the observer, you need to give it a target element to watch\n    const current = target.current;\n    observer.observe(current);\n\n    // clean up our observer\n    return () => {\n      observer.unobserve(current);\n    };\n  });\n};\n\nexport default useIntersectionObserver;\n`})]})]})})}),`\n`,(0,n.jsx)(r,{children:(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-jsx\",children:[\"<\",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"GitGist\"}),`\n  gistURL={\n    `,(0,n.jsx)(e.span,{className:\"hljs-string\",children:\"'https://gist.githubusercontent.com/dstroot/94c152da31201f41ee8b550442ddbc0b/raw/3a23e00f7c861fe9d36d9e12289a6904ce2ad15e/useIntersectionObserver.js'\"}),`\n  }\n/>\n`]})})})]})}function x(t={}){let{wrapper:e}=t.components||{};return e?(0,n.jsx)(e,Object.assign({},t,{children:(0,n.jsx)(h,t)})):h(t)}var N=x;function k(t,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+t+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return j(y);})();\n;return Component;"
  },
  "_id": "snippets/intersection-observer.mdx",
  "_raw": {
    "sourceFilePath": "snippets/intersection-observer.mdx",
    "sourceFileName": "intersection-observer.mdx",
    "sourceFileDir": "snippets",
    "contentType": "mdx",
    "flattenedPath": "snippets/intersection-observer"
  },
  "type": "Snippet",
  "slug": "/snippets/intersection-observer",
  "slugAsParams": "intersection-observer",
  "stats": {
    "text": "1 min read",
    "minutes": 0.895,
    "time": 53700,
    "words": 179
  }
}