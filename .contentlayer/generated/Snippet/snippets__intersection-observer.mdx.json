{
  "title": "useIntersectionObserver",
  "summary": "The Intersection Observer API allows you to configure a callback that is called whenever an element intersects either the device viewport.",
  "icon": "react",
  "date": "2021-10-19T00:00:00.000Z",
  "published": true,
  "tags": [
    "React Hook"
  ],
  "body": {
    "raw": "\nThe Intersection Observer API allows you to configure a callback that is called whenever an element, called the target, intersects either the device viewport or a specified element; for the purpose of this API, this is called the root element or root.\n\n- onIntersect: Callback function\n- rootMargin: Margin around the root. Serves to grow or shrink each side of the root element's bounding box before computing intersections.\n- threshold: at what percentage of the target's visibility the observer's callback should be executed.\n\n<CodeBlock>\n\n```js:useIntersectionObserver.js\nimport { useEffect } from 'react';\n\nconst useIntersectionObserver = ({\n  target,\n  onIntersect,\n  threshold = 0.2,\n  rootMargin = '0px',\n}) => {\n  useEffect(() => {\n    if (!target) {\n      return;\n    }\n\n    const observer = new IntersectionObserver(onIntersect, {\n      rootMargin,\n      threshold,\n    });\n\n    // Once you have created the observer, you need to give it a target element to watch\n    const current = target.current;\n    observer.observe(current);\n\n    // clean up our observer\n    return () => {\n      observer.unobserve(current);\n    };\n  });\n};\n\nexport default useIntersectionObserver;\n```\n\n</CodeBlock>\n",
    "code": "var Component=(()=>{var d=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var f=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),b=(s,e)=>{for(var r in e)a(s,r,{get:e[r],enumerable:!0})},l=(s,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of m(e))!j.call(s,t)&&t!==r&&a(s,t,{get:()=>e[t],enumerable:!(c=p(e,t))||c.enumerable});return s};var v=(s,e,r)=>(r=s!=null?d(u(s)):{},l(e||!s||!s.__esModule?a(r,\"default\",{value:s,enumerable:!0}):r,s)),g=s=>l(a({},\"__esModule\",{value:!0}),s);var i=f((_,o)=>{o.exports=_jsx_runtime});var x={};b(x,{default:()=>y,frontmatter:()=>N});var n=v(i()),N={title:\"useIntersectionObserver\",published:!0,date:\"2021-10-19\",summary:\"The Intersection Observer API allows you to configure a callback that is called whenever an element intersects either the device viewport.\",icon:\"react\",tags:[\"React Hook\"]};function h(s){let e=Object.assign({p:\"p\",ul:\"ul\",li:\"li\",div:\"div\",pre:\"pre\",code:\"code\",span:\"span\"},s.components),{CodeBlock:r}=e;return r||k(\"CodeBlock\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.p,{children:\"The Intersection Observer API allows you to configure a callback that is called whenever an element, called the target, intersects either the device viewport or a specified element; for the purpose of this API, this is called the root element or root.\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:\"onIntersect: Callback function\"}),`\n`,(0,n.jsx)(e.li,{children:\"rootMargin: Margin around the root. Serves to grow or shrink each side of the root element's bounding box before computing intersections.\"}),`\n`,(0,n.jsx)(e.li,{children:\"threshold: at what percentage of the target's visibility the observer's callback should be executed.\"}),`\n`]}),`\n`,(0,n.jsxs)(r,{children:[(0,n.jsx)(e.div,{className:\"rehype-code-title\",children:\"useIntersectionObserver.js\"}),(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-js\",children:[(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"import\"}),\" { useEffect } \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"from\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-string\",children:\"'react'\"}),`;\n\n`,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"const\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"useIntersectionObserver\"}),\" = (\",(0,n.jsxs)(e.span,{className:\"hljs-params\",children:[`{\n  target,\n  onIntersect,\n  threshold = `,(0,n.jsx)(e.span,{className:\"hljs-number\",children:\"0.2\"}),`,\n  rootMargin = `,(0,n.jsx)(e.span,{className:\"hljs-string\",children:\"'0px'\"}),`,\n}`]}),`) => {\n  `,(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"useEffect\"}),\"(\",(0,n.jsx)(e.span,{className:\"hljs-function\",children:\"() =>\"}),` {\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"if\"}),` (!target) {\n      `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"return\"}),`;\n    }\n\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"const\"}),\" observer = \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"new\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"IntersectionObserver\"}),`(onIntersect, {\n      rootMargin,\n      threshold,\n    });\n\n    `,(0,n.jsx)(e.span,{className:\"hljs-comment\",children:\"// Once you have created the observer, you need to give it a target element to watch\"}),`\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"const\"}),\" current = target.\",(0,n.jsx)(e.span,{className:\"hljs-property\",children:\"current\"}),`;\n    observer.`,(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"observe\"}),`(current);\n\n    `,(0,n.jsx)(e.span,{className:\"hljs-comment\",children:\"// clean up our observer\"}),`\n    `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"return\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-function\",children:\"() =>\"}),` {\n      observer.`,(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"unobserve\"}),`(current);\n    };\n  });\n};\n\n`,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"export\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"default\"}),` useIntersectionObserver;\n`]})})]})]})}function w(s={}){let{wrapper:e}=s.components||{};return e?(0,n.jsx)(e,Object.assign({},s,{children:(0,n.jsx)(h,s)})):h(s)}var y=w;function k(s,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+s+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return g(x);})();\n;return Component;"
  },
  "_id": "snippets/intersection-observer.mdx",
  "_raw": {
    "sourceFilePath": "snippets/intersection-observer.mdx",
    "sourceFileName": "intersection-observer.mdx",
    "sourceFileDir": "snippets",
    "contentType": "mdx",
    "flattenedPath": "snippets/intersection-observer"
  },
  "type": "Snippet",
  "slug": "/snippets/intersection-observer",
  "slugAsParams": "intersection-observer",
  "stats": {
    "text": "1 min read",
    "minutes": 0.815,
    "time": 48900,
    "words": 163
  }
}