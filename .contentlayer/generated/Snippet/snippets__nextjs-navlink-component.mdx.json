{
  "title": "Next.js 13 NavLink Component",
  "summary": "This snippet shows how to create a custom NavLink component in Next.js 13 that extends the built-in Link component to add CSS classNames when the href attribute matches the current URL.",
  "icon": "next",
  "date": "2022-12-23T00:00:00.000Z",
  "published": true,
  "tags": [
    "Javascript"
  ],
  "body": {
    "raw": "\nI have been experimenting with Next.js 13, and the new `/app` folder for routing. For a good user experience I wanted to highlight the active link in the navigation menu. Like so:\n\n![Active Menu Item](https://danstroot.imgix.net/assets/snippets/img/menu.jpg)\n\nTo make this work I extended the Next.js Link component to add specific CSS classNames to a menu item when the href attribute matches the current URL. I created a custom \"NavLink\" component like so.\n\n<Step number={1} title=\"Create a Custom NavLink Component\" />\n\nThis is the NavLink component, by default the \"active\" classNames are added when the href matches the start of the URL pathname. You can use the `exact` property to change it to an exact match with the whole URL pathname.\n\nNote this code must run client side so we need to add the `\"use client\";` directive. Also note we are importing from `next/navigation`.\n\n<CodeBlock>\n\n```jsx:NavLink.jsx\n'use client'\n\n/*\n\nNavLink: by default the active class is added when the href matches the start of the URL pathname.\nUse the exact property to change it to an exact match with the whole URL pathname.\n\n*/\nimport Link from 'next/link'\nimport { usePathname } from 'next/navigation'\n\nexport const NavLink = ({ href, exact, children, ...props }) => {\n  const pathname = usePathname()\n  const active = ' font-bold'\n  const isActive = exact ? pathname === href : pathname.startsWith(href)\n\n  if (isActive) {\n    props.className += active\n  }\n\n  return (\n    <Link href={href} {...props}>\n      {children}\n    </Link>\n  )\n}\n```\n\n</CodeBlock>\n\n<Step number={2} title=\"Use the Custom NavLink Component\" />\n\nHere is a quick example of how to use the custom NavLink component in a Next.js app. You basically use it as a direct replacement for the `next/link` component with the one addition of the `exact` parameter if you want to match to the _exact_ url when highlighting the active menu component. Cheers!\n\n<CodeBlock>\n\n```jsx:example.jsx\n<NavLink href=\"/\" exact className=\"text-grey-dark hover:text-grey-darker\">\n  Home\n</NavLink>\n```\n\n</CodeBlock>\n\n### References\n\n- [Next.js 13 Upgrade Guide](https://beta.nextjs.org/docs/upgrade-guide)\n",
    "code": "var Component=(()=>{var m=Object.create;var c=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var N=Object.getOwnPropertyNames;var u=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var x=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),g=(s,e)=>{for(var t in e)c(s,t,{get:e[t],enumerable:!0})},l=(s,e,t,a)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let i of N(e))!j.call(s,i)&&i!==t&&c(s,i,{get:()=>e[i],enumerable:!(a=p(e,i))||a.enumerable});return s};var f=(s,e,t)=>(t=s!=null?m(u(s)):{},l(e||!s||!s.__esModule?c(t,\"default\",{value:s,enumerable:!0}):t,s)),k=s=>l(c({},\"__esModule\",{value:!0}),s);var r=x((_,h)=>{h.exports=_jsx_runtime});var L={};g(L,{default:()=>y,frontmatter:()=>w});var n=f(r()),w={title:\"Next.js 13 NavLink Component\",published:!0,date:\"2022-12-23\",summary:\"This snippet shows how to create a custom NavLink component in Next.js 13 that extends the built-in Link component to add CSS classNames when the href attribute matches the current URL.\",icon:\"next\",tags:[\"Javascript\"]};function o(s){let e=Object.assign({p:\"p\",code:\"code\",img:\"img\",div:\"div\",pre:\"pre\",span:\"span\",em:\"em\",h3:\"h3\",ul:\"ul\",li:\"li\",a:\"a\"},s.components),{Step:t,CodeBlock:a}=e;return a||d(\"CodeBlock\",!0),t||d(\"Step\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsxs)(e.p,{children:[\"I have been experimenting with Next.js 13, and the new \",(0,n.jsx)(e.code,{children:\"/app\"}),\" folder for routing. For a good user experience I wanted to highlight the active link in the navigation menu. Like so:\"]}),`\n`,(0,n.jsx)(e.p,{children:(0,n.jsx)(e.img,{src:\"https://danstroot.imgix.net/assets/snippets/img/menu.jpg\",alt:\"Active Menu Item\"})}),`\n`,(0,n.jsx)(e.p,{children:'To make this work I extended the Next.js Link component to add specific CSS classNames to a menu item when the href attribute matches the current URL. I created a custom \"NavLink\" component like so.'}),`\n`,(0,n.jsx)(t,{number:1,title:\"Create a Custom NavLink Component\"}),`\n`,(0,n.jsxs)(e.p,{children:['This is the NavLink component, by default the \"active\" classNames are added when the href matches the start of the URL pathname. You can use the ',(0,n.jsx)(e.code,{children:\"exact\"}),\" property to change it to an exact match with the whole URL pathname.\"]}),`\n`,(0,n.jsxs)(e.p,{children:[\"Note this code must run client side so we need to add the \",(0,n.jsx)(e.code,{children:'\"use client\";'}),\" directive. Also note we are importing from \",(0,n.jsx)(e.code,{children:\"next/navigation\"}),\".\"]}),`\n`,(0,n.jsxs)(a,{children:[(0,n.jsx)(e.div,{className:\"rehype-code-title\",children:\"NavLink.jsx\"}),(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-jsx\",children:[(0,n.jsx)(e.span,{className:\"hljs-string\",children:\"'use client'\"}),`\n\n`,(0,n.jsx)(e.span,{className:\"hljs-comment\",children:`/*\n\nNavLink: by default the active class is added when the href matches the start of the URL pathname.\nUse the exact property to change it to an exact match with the whole URL pathname.\n\n*/`}),`\n`,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"import\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"Link\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"from\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-string\",children:\"'next/link'\"}),`\n`,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"import\"}),\" { usePathname } \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"from\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-string\",children:\"'next/navigation'\"}),`\n\n`,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"export\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"const\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"NavLink\"}),\" = (\",(0,n.jsx)(e.span,{className:\"hljs-params\",children:\"{ href, exact, children, ...props }\"}),`) => {\n  `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"const\"}),\" pathname = \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"usePathname\"}),`()\n  `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"const\"}),\" active = \",(0,n.jsx)(e.span,{className:\"hljs-string\",children:\"' font-bold'\"}),`\n  `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"const\"}),\" isActive = exact ? pathname === href : pathname.\",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"startsWith\"}),`(href)\n\n  `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"if\"}),` (isActive) {\n    props.`,(0,n.jsx)(e.span,{className:\"hljs-property\",children:\"className\"}),` += active\n  }\n\n  `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"return\"}),` (\n    `,(0,n.jsxs)(e.span,{className:\"xml\",children:[(0,n.jsxs)(e.span,{className:\"hljs-tag\",children:[\"<\",(0,n.jsx)(e.span,{className:\"hljs-name\",children:\"Link\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-attr\",children:\"href\"}),\"=\",(0,n.jsx)(e.span,{className:\"hljs-string\",children:\"{href}\"}),\" {\",(0,n.jsx)(e.span,{className:\"hljs-attr\",children:\"...props\"}),\"}>\"]}),`\n      {children}\n    `,(0,n.jsxs)(e.span,{className:\"hljs-tag\",children:[\"</\",(0,n.jsx)(e.span,{className:\"hljs-name\",children:\"Link\"}),\">\"]})]}),`\n  )\n}\n`]})})]}),`\n`,(0,n.jsx)(t,{number:2,title:\"Use the Custom NavLink Component\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Here is a quick example of how to use the custom NavLink component in a Next.js app. You basically use it as a direct replacement for the \",(0,n.jsx)(e.code,{children:\"next/link\"}),\" component with the one addition of the \",(0,n.jsx)(e.code,{children:\"exact\"}),\" parameter if you want to match to the \",(0,n.jsx)(e.em,{children:\"exact\"}),\" url when highlighting the active menu component. Cheers!\"]}),`\n`,(0,n.jsxs)(a,{children:[(0,n.jsx)(e.div,{className:\"rehype-code-title\",children:\"example.jsx\"}),(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-jsx\",children:[\"<\",(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"NavLink\"}),\" href=\",(0,n.jsx)(e.span,{className:\"hljs-string\",children:'\"/\"'}),\" exact className=\",(0,n.jsx)(e.span,{className:\"hljs-string\",children:'\"text-grey-dark hover:text-grey-darker\"'}),`>\n  `,(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"Home\"}),`\n</`,(0,n.jsx)(e.span,{className:\"hljs-title class_\",children:\"NavLink\"}),`>\n`]})})]}),`\n`,(0,n.jsx)(e.h3,{id:\"references\",children:\"References\"}),`\n`,(0,n.jsxs)(e.ul,{children:[`\n`,(0,n.jsx)(e.li,{children:(0,n.jsx)(e.a,{href:\"https://beta.nextjs.org/docs/upgrade-guide\",children:\"Next.js 13 Upgrade Guide\"})}),`\n`]})]})}function v(s={}){let{wrapper:e}=s.components||{};return e?(0,n.jsx)(e,Object.assign({},s,{children:(0,n.jsx)(o,s)})):o(s)}var y=v;function d(s,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+s+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return k(L);})();\n;return Component;"
  },
  "_id": "snippets/nextjs-navlink-component.mdx",
  "_raw": {
    "sourceFilePath": "snippets/nextjs-navlink-component.mdx",
    "sourceFileName": "nextjs-navlink-component.mdx",
    "sourceFileDir": "snippets",
    "contentType": "mdx",
    "flattenedPath": "snippets/nextjs-navlink-component"
  },
  "type": "Snippet",
  "slug": "/snippets/nextjs-navlink-component",
  "slugAsParams": "nextjs-navlink-component",
  "stats": {
    "text": "2 min read",
    "minutes": 1.595,
    "time": 95700,
    "words": 319
  }
}