{
  "title": "Easier Imports",
  "summary": "Import from folders like /components, /utils or /hooks from @/anywhere in your codebase.",
  "icon": "js",
  "date": "2023-06-10T00:00:00.000Z",
  "published": true,
  "tags": [
    "Javascript",
    "Typescript"
  ],
  "body": {
    "raw": "\nLet's assume you have a folder structure like this in your project:\n\n<CodeBlock>\n\n```sh:example.sh\nmy-app /\n── pages /\n│   ├── about.jsx\n│   ├── analytics.jsx\n│   ├── index.jsx\n── hooks /\n│   ├── useHasMounted.js\n│   ├── useIntersectionObserver.js\n│   ├── useMediaQuery.js\n│   ├── usePageView.js\n│   └── useViewCount.js\n├── lib /\n│   ├── constants.js\n│   ├── sortPosts.js\n│   └── utils.js\n```\n\n</CodeBlock>\n\nThis is how your imports will typically look:\n\n<CodeBlock>\n\n```JavaScript:example.ts\nimport { SortByDate } from '../lib/sortPosts';\n```\n\n</CodeBlock>\n\nAnd it's gonna be even worse if you are importing in a file that is nested deeply.\n\n<CodeBlock>\n\n```JavaScript:example.ts\nimport { SortByDate } from '../../../lib/sortPosts';\n```\n\n</CodeBlock>\n\nTo solve this, you can add a jsconfig.json (or tsconfig.json if you have a TypeScript project) and then add the following to it.\n\n<CodeBlock>\n\n```JavaScript:example.ts\n{\n    \"baseUrl\": \".\",\n    \"paths\": {\n        \"@/*\": [\"./*\"]\n    }\n}\n```\n\n</CodeBlock>\n\nThis configuration will now essentially allow you to import folders like @/components, @/utils or @/hooks etc from anywhere in the codebase.\n\nNow your imports will look like this:\n\n<CodeBlock>\n\n```JavaScript:example.ts\nimport { SortByDate } from '@/lib/sortPosts';\n```\n\n</CodeBlock>\n",
    "code": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var m=Object.getOwnPropertyNames;var j=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var y=(n,e)=>()=>(e||n((e={exports:{}}).exports,e),e.exports),g=(n,e)=>{for(var l in e)r(n,l,{get:e[l],enumerable:!0})},t=(n,e,l,i)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of m(e))!u.call(n,a)&&a!==l&&r(n,a,{get:()=>e[a],enumerable:!(i=p(e,a))||i.enumerable});return n};var N=(n,e,l)=>(l=n!=null?h(j(n)):{},t(e||!n||!n.__esModule?r(l,\"default\",{value:n,enumerable:!0}):l,n)),f=n=>t(r({},\"__esModule\",{value:!0}),n);var c=y((S,o)=>{o.exports=_jsx_runtime});var b={};g(b,{default:()=>k,frontmatter:()=>w});var s=N(c()),w={title:\"Easier Imports\",published:!0,date:\"2023-06-10\",summary:\"Import from folders like /components, /utils or /hooks from @/anywhere in your codebase.\",icon:\"js\",tags:[\"Javascript\",\"Typescript\"]};function d(n){let e=Object.assign({p:\"p\",div:\"div\",pre:\"pre\",code:\"code\",span:\"span\"},n.components),{CodeBlock:l}=e;return l||v(\"CodeBlock\",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.p,{children:\"Let's assume you have a folder structure like this in your project:\"}),`\n`,(0,s.jsxs)(l,{children:[(0,s.jsx)(e.div,{className:\"rehype-code-title\",children:\"example.sh\"}),(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:\"hljs language-sh\",children:`my-app /\n\\u2500\\u2500 pages /\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 about.jsx\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 analytics.jsx\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 index.jsx\n\\u2500\\u2500 hooks /\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 useHasMounted.js\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 useIntersectionObserver.js\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 useMediaQuery.js\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 usePageView.js\n\\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 useViewCount.js\n\\u251C\\u2500\\u2500 lib /\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 constants.js\n\\u2502\\xA0\\xA0 \\u251C\\u2500\\u2500 sortPosts.js\n\\u2502\\xA0\\xA0 \\u2514\\u2500\\u2500 utils.js\n`})})]}),`\n`,(0,s.jsx)(e.p,{children:\"This is how your imports will typically look:\"}),`\n`,(0,s.jsxs)(l,{children:[(0,s.jsx)(e.div,{className:\"rehype-code-title\",children:\"example.ts\"}),(0,s.jsx)(e.pre,{children:(0,s.jsxs)(e.code,{className:\"hljs language-JavaScript\",children:[(0,s.jsx)(e.span,{className:\"hljs-keyword\",children:\"import\"}),\" { \",(0,s.jsx)(e.span,{className:\"hljs-title class_\",children:\"SortByDate\"}),\" } \",(0,s.jsx)(e.span,{className:\"hljs-keyword\",children:\"from\"}),\" \",(0,s.jsx)(e.span,{className:\"hljs-string\",children:\"'../lib/sortPosts'\"}),`;\n`]})})]}),`\n`,(0,s.jsx)(e.p,{children:\"And it's gonna be even worse if you are importing in a file that is nested deeply.\"}),`\n`,(0,s.jsxs)(l,{children:[(0,s.jsx)(e.div,{className:\"rehype-code-title\",children:\"example.ts\"}),(0,s.jsx)(e.pre,{children:(0,s.jsxs)(e.code,{className:\"hljs language-JavaScript\",children:[(0,s.jsx)(e.span,{className:\"hljs-keyword\",children:\"import\"}),\" { \",(0,s.jsx)(e.span,{className:\"hljs-title class_\",children:\"SortByDate\"}),\" } \",(0,s.jsx)(e.span,{className:\"hljs-keyword\",children:\"from\"}),\" \",(0,s.jsx)(e.span,{className:\"hljs-string\",children:\"'../../../lib/sortPosts'\"}),`;\n`]})})]}),`\n`,(0,s.jsx)(e.p,{children:\"To solve this, you can add a jsconfig.json (or tsconfig.json if you have a TypeScript project) and then add the following to it.\"}),`\n`,(0,s.jsxs)(l,{children:[(0,s.jsx)(e.div,{className:\"rehype-code-title\",children:\"example.ts\"}),(0,s.jsx)(e.pre,{children:(0,s.jsxs)(e.code,{className:\"hljs language-JavaScript\",children:[`{\n    `,(0,s.jsx)(e.span,{className:\"hljs-string\",children:'\"baseUrl\"'}),\": \",(0,s.jsx)(e.span,{className:\"hljs-string\",children:'\".\"'}),`,\n    `,(0,s.jsx)(e.span,{className:\"hljs-string\",children:'\"paths\"'}),`: {\n        `,(0,s.jsx)(e.span,{className:\"hljs-string\",children:'\"@/*\"'}),\": [\",(0,s.jsx)(e.span,{className:\"hljs-string\",children:'\"./*\"'}),`]\n    }\n}\n`]})})]}),`\n`,(0,s.jsx)(e.p,{children:\"This configuration will now essentially allow you to import folders like @/components, @/utils or @/hooks etc from anywhere in the codebase.\"}),`\n`,(0,s.jsx)(e.p,{children:\"Now your imports will look like this:\"}),`\n`,(0,s.jsxs)(l,{children:[(0,s.jsx)(e.div,{className:\"rehype-code-title\",children:\"example.ts\"}),(0,s.jsx)(e.pre,{children:(0,s.jsxs)(e.code,{className:\"hljs language-JavaScript\",children:[(0,s.jsx)(e.span,{className:\"hljs-keyword\",children:\"import\"}),\" { \",(0,s.jsx)(e.span,{className:\"hljs-title class_\",children:\"SortByDate\"}),\" } \",(0,s.jsx)(e.span,{className:\"hljs-keyword\",children:\"from\"}),\" \",(0,s.jsx)(e.span,{className:\"hljs-string\",children:\"'@/lib/sortPosts'\"}),`;\n`]})})]})]})}function x(n={}){let{wrapper:e}=n.components||{};return e?(0,s.jsx)(e,Object.assign({},n,{children:(0,s.jsx)(d,n)})):d(n)}var k=x;function v(n,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+n+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return f(b);})();\n;return Component;"
  },
  "_id": "snippets/easier-imports.mdx",
  "_raw": {
    "sourceFilePath": "snippets/easier-imports.mdx",
    "sourceFileName": "easier-imports.mdx",
    "sourceFileDir": "snippets",
    "contentType": "mdx",
    "flattenedPath": "snippets/easier-imports"
  },
  "type": "Snippet",
  "slug": "/snippets/easier-imports",
  "slugAsParams": "easier-imports",
  "stats": {
    "text": "1 min read",
    "minutes": 0.895,
    "time": 53700,
    "words": 179
  }
}