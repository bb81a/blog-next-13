{
  "title": "useHasMounted",
  "summary": "When dealing with a server-side rendered application it can be useful to know when you are rendering on the client.",
  "icon": "js",
  "date": "2021-10-23T00:00:00.000Z",
  "published": true,
  "tags": [
    "React Hook"
  ],
  "body": {
    "raw": "\n### Why\n\nWhen dealing with a server-side rendered application (through frameworks like Gatsby or Next, or any sort of SSR setup), it can be useful to know whether you're rendering on the server or the client.\n\nThe trick here is that `useEffect` only triggers on the client side _inside_ the browser. Smart right?\n\n### Usage\n\n<CodeBlock>\n\n```js:hookExample.js\nconst hasMounted = useHasMounted()\n\nif (hasMounted) {\n  // do stuff\n}\n```\n\n</CodeBlock>\n\n### Code\n\n<CodeBlock>\n\n```javascript:useHasMounted.js\nimport { useState, useEffect } from 'react';\n\nexport const useHasMounted = () => {\n  const [hasMounted, setHasMounted] = useState(false);\n  useEffect(() => {\n    setHasMounted(true);\n  }, []);\n\nreturn hasMounted;\n};\n```\n\n</CodeBlock>\n",
    "code": "var Component=(()=>{var h=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var p=Object.getOwnPropertyNames;var m=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var f=(s,e)=>()=>(e||s((e={exports:{}}).exports,e),e.exports),N=(s,e)=>{for(var a in e)r(s,a,{get:e[a],enumerable:!0})},c=(s,e,a,l)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let t of p(e))!j.call(s,t)&&t!==a&&r(s,t,{get:()=>e[t],enumerable:!(l=u(e,t))||l.enumerable});return s};var g=(s,e,a)=>(a=s!=null?h(m(s)):{},c(e||!s||!s.__esModule?r(a,\"default\",{value:s,enumerable:!0}):a,s)),y=s=>c(r({},\"__esModule\",{value:!0}),s);var o=f((v,i)=>{i.exports=_jsx_runtime});var _={};N(_,{default:()=>x,frontmatter:()=>w});var n=g(o()),w={title:\"useHasMounted\",published:!0,date:\"2021-10-23\",summary:\"When dealing with a server-side rendered application it can be useful to know when you are rendering on the client.\",icon:\"js\",tags:[\"React Hook\"]};function d(s){let e=Object.assign({h3:\"h3\",p:\"p\",code:\"code\",em:\"em\",div:\"div\",pre:\"pre\",span:\"span\"},s.components),{CodeBlock:a}=e;return a||M(\"CodeBlock\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h3,{id:\"why\",children:\"Why\"}),`\n`,(0,n.jsx)(e.p,{children:\"When dealing with a server-side rendered application (through frameworks like Gatsby or Next, or any sort of SSR setup), it can be useful to know whether you're rendering on the server or the client.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The trick here is that \",(0,n.jsx)(e.code,{children:\"useEffect\"}),\" only triggers on the client side \",(0,n.jsx)(e.em,{children:\"inside\"}),\" the browser. Smart right?\"]}),`\n`,(0,n.jsx)(e.h3,{id:\"usage\",children:\"Usage\"}),`\n`,(0,n.jsxs)(a,{children:[(0,n.jsx)(e.div,{className:\"rehype-code-title\",children:\"hookExample.js\"}),(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-js\",children:[(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"const\"}),\" hasMounted = \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"useHasMounted\"}),`()\n\n`,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"if\"}),` (hasMounted) {\n  `,(0,n.jsx)(e.span,{className:\"hljs-comment\",children:\"// do stuff\"}),`\n}\n`]})})]}),`\n`,(0,n.jsx)(e.h3,{id:\"code\",children:\"Code\"}),`\n`,(0,n.jsxs)(a,{children:[(0,n.jsx)(e.div,{className:\"rehype-code-title\",children:\"useHasMounted.js\"}),(0,n.jsx)(e.pre,{children:(0,n.jsxs)(e.code,{className:\"hljs language-javascript\",children:[(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"import\"}),\" { useState, useEffect } \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"from\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-string\",children:\"'react'\"}),`;\n\n`,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"export\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"const\"}),\" \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"useHasMounted\"}),\" = (\",(0,n.jsx)(e.span,{className:\"hljs-params\"}),`) => {\n  `,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"const\"}),\" [hasMounted, setHasMounted] = \",(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"useState\"}),\"(\",(0,n.jsx)(e.span,{className:\"hljs-literal\",children:\"false\"}),`);\n  `,(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"useEffect\"}),\"(\",(0,n.jsx)(e.span,{className:\"hljs-function\",children:\"() =>\"}),` {\n    `,(0,n.jsx)(e.span,{className:\"hljs-title function_\",children:\"setHasMounted\"}),\"(\",(0,n.jsx)(e.span,{className:\"hljs-literal\",children:\"true\"}),`);\n  }, []);\n\n`,(0,n.jsx)(e.span,{className:\"hljs-keyword\",children:\"return\"}),` hasMounted;\n};\n`]})})]})]})}function k(s={}){let{wrapper:e}=s.components||{};return e?(0,n.jsx)(e,Object.assign({},s,{children:(0,n.jsx)(d,s)})):d(s)}var x=k;function M(s,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+s+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return y(_);})();\n;return Component;"
  },
  "_id": "snippets/use-has-mounted.mdx",
  "_raw": {
    "sourceFilePath": "snippets/use-has-mounted.mdx",
    "sourceFileName": "use-has-mounted.mdx",
    "sourceFileDir": "snippets",
    "contentType": "mdx",
    "flattenedPath": "snippets/use-has-mounted"
  },
  "type": "Snippet",
  "slug": "/snippets/use-has-mounted",
  "slugAsParams": "use-has-mounted",
  "stats": {
    "text": "1 min read",
    "minutes": 0.52,
    "time": 31200,
    "words": 104
  }
}